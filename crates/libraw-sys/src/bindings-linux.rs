/* automatically generated by rust-bindgen 0.71.1 */

pub const _FILE_OFFSET_BITS: u32 = 64;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_FILE_OFFSET64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _MEMORY_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _SYS_TIME_H: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const LIBRAW_DEFAULT_ADJUST_MAXIMUM_THRESHOLD: f64 = 0.75;
pub const LIBRAW_DEFAULT_AUTO_BRIGHTNESS_THRESHOLD: f64 = 0.01;
pub const LIBRAW_MAX_ALLOC_MB_DEFAULT: u32 = 2048;
pub const LIBRAW_MAX_PROFILE_SIZE_MB: u32 = 256;
pub const LIBRAW_MAX_NONDNG_RAW_FILE_SIZE: u32 = 2147483647;
pub const LIBRAW_MAX_DNG_RAW_FILE_SIZE: u32 = 2147483647;
pub const LIBRAW_MAX_THUMBNAIL_MB: u32 = 512;
pub const LIBRAW_MAX_METADATA_BLOCKS: u32 = 1024;
pub const LIBRAW_CBLACK_SIZE: u32 = 4104;
pub const LIBRAW_IFD_MAXCOUNT: u32 = 10;
pub const LIBRAW_THUMBNAIL_MAXCOUNT: u32 = 8;
pub const LIBRAW_CRXTRACKS_MAXCOUNT: u32 = 16;
pub const LIBRAW_AFDATA_MAXCOUNT: u32 = 4;
pub const LIBRAW_AHD_TILE: u32 = 512;
pub const LIBRAW_LENS_NOT_SET: i32 = -1;
pub const LIBRAW_XTRANS: u32 = 9;
pub const LIBRAW_PROGRESS_THUMB_MASK: u32 = 268435455;
pub const LIBRAW_MAJOR_VERSION: u32 = 0;
pub const LIBRAW_MINOR_VERSION: u32 = 21;
pub const LIBRAW_PATCH_VERSION: u32 = 4;
pub const LIBRAW_SHLIB_CURRENT: u32 = 23;
pub const LIBRAW_SHLIB_REVISION: u32 = 0;
pub const LIBRAW_SHLIB_AGE: u32 = 0;
pub const LibRawBigEndian: u32 = 0;
pub const LIBRAW_HISTOGRAM_SIZE: u32 = 8192;
unsafe extern "C" {
    pub fn memcpy(
        __dest: *mut libc::c_void,
        __src: *const libc::c_void,
        __n: libc::c_ulong,
    ) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn memmove(
        __dest: *mut libc::c_void,
        __src: *const libc::c_void,
        __n: libc::c_ulong,
    ) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn memccpy(
        __dest: *mut libc::c_void,
        __src: *const libc::c_void,
        __c: libc::c_int,
        __n: libc::c_ulong,
    ) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn memset(
        __s: *mut libc::c_void,
        __c: libc::c_int,
        __n: libc::c_ulong,
    ) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn memcmp(
        __s1: *const libc::c_void,
        __s2: *const libc::c_void,
        __n: libc::c_ulong,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __memcmpeq(
        __s1: *const libc::c_void,
        __s2: *const libc::c_void,
        __n: usize,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn memchr(
        __s: *const libc::c_void,
        __c: libc::c_int,
        __n: libc::c_ulong,
    ) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn strcpy(__dest: *mut libc::c_char, __src: *const libc::c_char) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn strncpy(
        __dest: *mut libc::c_char,
        __src: *const libc::c_char,
        __n: libc::c_ulong,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn strcat(__dest: *mut libc::c_char, __src: *const libc::c_char) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn strncat(
        __dest: *mut libc::c_char,
        __src: *const libc::c_char,
        __n: libc::c_ulong,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn strcmp(__s1: *const libc::c_char, __s2: *const libc::c_char) -> libc::c_int;
}
unsafe extern "C" {
    pub fn strncmp(
        __s1: *const libc::c_char,
        __s2: *const libc::c_char,
        __n: libc::c_ulong,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn strcoll(__s1: *const libc::c_char, __s2: *const libc::c_char) -> libc::c_int;
}
unsafe extern "C" {
    pub fn strxfrm(
        __dest: *mut libc::c_char,
        __src: *const libc::c_char,
        __n: libc::c_ulong,
    ) -> libc::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const libc::c_ushort,
    pub __ctype_tolower: *const libc::c_int,
    pub __ctype_toupper: *const libc::c_int,
    pub __names: [*const libc::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::core::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::core::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::core::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::core::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::core::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::core::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::core::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
unsafe extern "C" {
    pub fn strcoll_l(
        __s1: *const libc::c_char,
        __s2: *const libc::c_char,
        __l: locale_t,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn strxfrm_l(
        __dest: *mut libc::c_char,
        __src: *const libc::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strdup(__s: *const libc::c_char) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn strndup(__string: *const libc::c_char, __n: libc::c_ulong) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn strchr(__s: *const libc::c_char, __c: libc::c_int) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn strrchr(__s: *const libc::c_char, __c: libc::c_int) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn strchrnul(__s: *const libc::c_char, __c: libc::c_int) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn strcspn(__s: *const libc::c_char, __reject: *const libc::c_char) -> libc::c_ulong;
}
unsafe extern "C" {
    pub fn strspn(__s: *const libc::c_char, __accept: *const libc::c_char) -> libc::c_ulong;
}
unsafe extern "C" {
    pub fn strpbrk(__s: *const libc::c_char, __accept: *const libc::c_char) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn strstr(
        __haystack: *const libc::c_char,
        __needle: *const libc::c_char,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn strtok(__s: *mut libc::c_char, __delim: *const libc::c_char) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn __strtok_r(
        __s: *mut libc::c_char,
        __delim: *const libc::c_char,
        __save_ptr: *mut *mut libc::c_char,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn strtok_r(
        __s: *mut libc::c_char,
        __delim: *const libc::c_char,
        __save_ptr: *mut *mut libc::c_char,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn strcasestr(
        __haystack: *const libc::c_char,
        __needle: *const libc::c_char,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn memmem(
        __haystack: *const libc::c_void,
        __haystacklen: usize,
        __needle: *const libc::c_void,
        __needlelen: usize,
    ) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn __mempcpy(
        __dest: *mut libc::c_void,
        __src: *const libc::c_void,
        __n: usize,
    ) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn mempcpy(
        __dest: *mut libc::c_void,
        __src: *const libc::c_void,
        __n: libc::c_ulong,
    ) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn strlen(__s: *const libc::c_char) -> libc::c_ulong;
}
unsafe extern "C" {
    pub fn strnlen(__string: *const libc::c_char, __maxlen: usize) -> usize;
}
unsafe extern "C" {
    pub fn strerror(__errnum: libc::c_int) -> *mut libc::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: libc::c_int,
        __buf: *mut libc::c_char,
        __buflen: usize,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn strerror_l(__errnum: libc::c_int, __l: locale_t) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn bcmp(
        __s1: *const libc::c_void,
        __s2: *const libc::c_void,
        __n: libc::c_ulong,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn bcopy(__src: *const libc::c_void, __dest: *mut libc::c_void, __n: libc::c_ulong);
}
unsafe extern "C" {
    pub fn bzero(__s: *mut libc::c_void, __n: libc::c_ulong);
}
unsafe extern "C" {
    pub fn index(__s: *const libc::c_char, __c: libc::c_int) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn rindex(__s: *const libc::c_char, __c: libc::c_int) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn ffs(__i: libc::c_int) -> libc::c_int;
}
unsafe extern "C" {
    pub fn ffsl(__l: libc::c_long) -> libc::c_int;
}
unsafe extern "C" {
    pub fn ffsll(__ll: libc::c_longlong) -> libc::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp(__s1: *const libc::c_char, __s2: *const libc::c_char) -> libc::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp(
        __s1: *const libc::c_char,
        __s2: *const libc::c_char,
        __n: libc::c_ulong,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp_l(
        __s1: *const libc::c_char,
        __s2: *const libc::c_char,
        __loc: locale_t,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp_l(
        __s1: *const libc::c_char,
        __s2: *const libc::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn explicit_bzero(__s: *mut libc::c_void, __n: usize);
}
unsafe extern "C" {
    pub fn strsep(
        __stringp: *mut *mut libc::c_char,
        __delim: *const libc::c_char,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn strsignal(__sig: libc::c_int) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn __stpcpy(__dest: *mut libc::c_char, __src: *const libc::c_char) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn stpcpy(__dest: *mut libc::c_char, __src: *const libc::c_char) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn __stpncpy(
        __dest: *mut libc::c_char,
        __src: *const libc::c_char,
        __n: usize,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn stpncpy(
        __dest: *mut libc::c_char,
        __src: *const libc::c_char,
        __n: libc::c_ulong,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn strlcpy(__dest: *mut libc::c_char, __src: *const libc::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn strlcat(__dest: *mut libc::c_char, __src: *const libc::c_char, __n: usize) -> usize;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = libc::c_uchar;
pub type __u_short = libc::c_ushort;
pub type __u_int = libc::c_uint;
pub type __u_long = libc::c_ulong;
pub type __int8_t = libc::c_schar;
pub type __uint8_t = libc::c_uchar;
pub type __int16_t = libc::c_short;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = libc::c_long;
pub type __u_quad_t = libc::c_ulong;
pub type __intmax_t = libc::c_long;
pub type __uintmax_t = libc::c_ulong;
pub type __dev_t = libc::c_ulong;
pub type __uid_t = libc::c_uint;
pub type __gid_t = libc::c_uint;
pub type __ino_t = libc::c_ulong;
pub type __ino64_t = libc::c_ulong;
pub type __mode_t = libc::c_uint;
pub type __nlink_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
pub type __pid_t = libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [libc::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::core::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::core::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::core::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = libc::c_long;
pub type __rlim_t = libc::c_ulong;
pub type __rlim64_t = libc::c_ulong;
pub type __id_t = libc::c_uint;
pub type __time_t = libc::c_long;
pub type __useconds_t = libc::c_uint;
pub type __suseconds_t = libc::c_long;
pub type __suseconds64_t = libc::c_long;
pub type __daddr_t = libc::c_int;
pub type __key_t = libc::c_int;
pub type __clockid_t = libc::c_int;
pub type __timer_t = *mut libc::c_void;
pub type __blksize_t = libc::c_long;
pub type __blkcnt_t = libc::c_long;
pub type __blkcnt64_t = libc::c_long;
pub type __fsblkcnt_t = libc::c_ulong;
pub type __fsblkcnt64_t = libc::c_ulong;
pub type __fsfilcnt_t = libc::c_ulong;
pub type __fsfilcnt64_t = libc::c_ulong;
pub type __fsword_t = libc::c_long;
pub type __ssize_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type __syscall_ulong_t = libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut libc::c_char;
pub type __intptr_t = libc::c_long;
pub type __socklen_t = libc::c_uint;
pub type __sig_atomic_t = libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: libc::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: libc::c_uint,
    pub __wchb: [libc::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::core::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::core::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::core::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::core::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::core::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::core::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::core::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::core::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::core::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::core::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::core::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::core::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::core::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::core::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::core::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::core::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = libc::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *mut libc::c_char,
    pub _IO_read_end: *mut libc::c_char,
    pub _IO_read_base: *mut libc::c_char,
    pub _IO_write_base: *mut libc::c_char,
    pub _IO_write_ptr: *mut libc::c_char,
    pub _IO_write_end: *mut libc::c_char,
    pub _IO_buf_base: *mut libc::c_char,
    pub _IO_buf_end: *mut libc::c_char,
    pub _IO_save_base: *mut libc::c_char,
    pub _IO_backup_base: *mut libc::c_char,
    pub _IO_save_end: *mut libc::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut libc::c_void,
    pub __pad5: usize,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::core::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::core::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::core::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::core::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::core::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::core::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::core::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::core::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::core::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::core::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::core::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::core::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::core::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::core::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::core::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::core::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::core::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::core::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::core::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::core::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::core::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::core::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::core::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::core::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::core::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::core::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::core::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::core::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::core::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::core::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::core::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type cookie_read_function_t = ::core::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut libc::c_void,
        __buf: *mut libc::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::core::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut libc::c_void,
        __buf: *const libc::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::core::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut libc::c_void,
        __pos: *mut __off64_t,
        __w: libc::c_int,
    ) -> libc::c_int,
>;
pub type cookie_close_function_t =
    ::core::option::Option<unsafe extern "C" fn(__cookie: *mut libc::c_void) -> libc::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_cookie_io_functions_t"]
        [::core::mem::size_of::<_IO_cookie_io_functions_t>() - 32usize];
    ["Alignment of _IO_cookie_io_functions_t"]
        [::core::mem::align_of::<_IO_cookie_io_functions_t>() - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::read"]
        [::core::mem::offset_of!(_IO_cookie_io_functions_t, read) - 0usize];
    ["Offset of field: _IO_cookie_io_functions_t::write"]
        [::core::mem::offset_of!(_IO_cookie_io_functions_t, write) - 8usize];
    ["Offset of field: _IO_cookie_io_functions_t::seek"]
        [::core::mem::offset_of!(_IO_cookie_io_functions_t, seek) - 16usize];
    ["Offset of field: _IO_cookie_io_functions_t::close"]
        [::core::mem::offset_of!(_IO_cookie_io_functions_t, close) - 24usize];
};
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type va_list = __gnuc_va_list;
pub type off_t = __off64_t;
pub type fpos_t = __fpos64_t;
unsafe extern "C" {
    pub static mut stdin: *mut FILE;
}
unsafe extern "C" {
    pub static mut stdout: *mut FILE;
}
unsafe extern "C" {
    pub static mut stderr: *mut FILE;
}
unsafe extern "C" {
    pub fn remove(__filename: *const libc::c_char) -> libc::c_int;
}
unsafe extern "C" {
    pub fn rename(__old: *const libc::c_char, __new: *const libc::c_char) -> libc::c_int;
}
unsafe extern "C" {
    pub fn renameat(
        __oldfd: libc::c_int,
        __old: *const libc::c_char,
        __newfd: libc::c_int,
        __new: *const libc::c_char,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn fclose(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}tmpfile64"]
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(arg1: *mut libc::c_char) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn tmpnam_r(__s: *mut libc::c_char) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn tempnam(__dir: *const libc::c_char, __pfx: *const libc::c_char) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn fflush(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}fopen64"]
    pub fn fopen(__filename: *const libc::c_char, __modes: *const libc::c_char) -> *mut FILE;
}
unsafe extern "C" {
    #[link_name = "\u{1}freopen64"]
    pub fn freopen(
        __filename: *const libc::c_char,
        __modes: *const libc::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fdopen(__fd: libc::c_int, __modes: *const libc::c_char) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut libc::c_void,
        __modes: *const libc::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fmemopen(
        __s: *mut libc::c_void,
        __len: usize,
        __modes: *const libc::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut libc::c_char, __sizeloc: *mut usize) -> *mut FILE;
}
unsafe extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut libc::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut libc::c_char,
        __modes: libc::c_int,
        __n: usize,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut libc::c_char, __size: usize);
}
unsafe extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fprintf(__stream: *mut FILE, __format: *const libc::c_char, ...) -> libc::c_int;
}
unsafe extern "C" {
    pub fn printf(__format: *const libc::c_char, ...) -> libc::c_int;
}
unsafe extern "C" {
    pub fn sprintf(__s: *mut libc::c_char, __format: *const libc::c_char, ...) -> libc::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn vprintf(__format: *const libc::c_char, __arg: *mut __va_list_tag) -> libc::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        __s: *mut libc::c_char,
        __format: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn snprintf(
        __s: *mut libc::c_char,
        __maxlen: libc::c_ulong,
        __format: *const libc::c_char,
        ...
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __s: *mut libc::c_char,
        __maxlen: libc::c_ulong,
        __format: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut libc::c_char,
        __f: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut libc::c_char,
        __fmt: *const libc::c_char,
        ...
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn asprintf(__ptr: *mut *mut libc::c_char, __fmt: *const libc::c_char, ...) -> libc::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        __fd: libc::c_int,
        __fmt: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn dprintf(__fd: libc::c_int, __fmt: *const libc::c_char, ...) -> libc::c_int;
}
unsafe extern "C" {
    pub fn fscanf(__stream: *mut FILE, __format: *const libc::c_char, ...) -> libc::c_int;
}
unsafe extern "C" {
    pub fn scanf(__format: *const libc::c_char, ...) -> libc::c_int;
}
unsafe extern "C" {
    pub fn sscanf(__s: *const libc::c_char, __format: *const libc::c_char, ...) -> libc::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE, __format: *const libc::c_char, ...) -> libc::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const libc::c_char, ...) -> libc::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(__s: *const libc::c_char, __format: *const libc::c_char, ...) -> libc::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn vscanf(__format: *const libc::c_char, __arg: *mut __va_list_tag) -> libc::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __s: *const libc::c_char,
        __format: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(__format: *const libc::c_char, __arg: *mut __va_list_tag) -> libc::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const libc::c_char,
        __format: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn getc(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> libc::c_int;
}
unsafe extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> libc::c_int;
}
unsafe extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn fputc(__c: libc::c_int, __stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn putc(__c: libc::c_int, __stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn putchar(__c: libc::c_int) -> libc::c_int;
}
unsafe extern "C" {
    pub fn fputc_unlocked(__c: libc::c_int, __stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(__c: libc::c_int, __stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(__c: libc::c_int) -> libc::c_int;
}
unsafe extern "C" {
    pub fn getw(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn putw(__w: libc::c_int, __stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        __s: *mut libc::c_char,
        __n: libc::c_int,
        __stream: *mut FILE,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut libc::c_char,
        __n: *mut usize,
        __delimiter: libc::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut libc::c_char,
        __n: *mut usize,
        __delimiter: libc::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getline(
        __lineptr: *mut *mut libc::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn fputs(__s: *const libc::c_char, __stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn puts(__s: *const libc::c_char) -> libc::c_int;
}
unsafe extern "C" {
    pub fn ungetc(__c: libc::c_int, __stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut libc::c_void,
        __size: libc::c_ulong,
        __n: libc::c_ulong,
        __stream: *mut FILE,
    ) -> libc::c_ulong;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const libc::c_void,
        __size: libc::c_ulong,
        __n: libc::c_ulong,
        __s: *mut FILE,
    ) -> libc::c_ulong;
}
unsafe extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut libc::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const libc::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: libc::c_long, __whence: libc::c_int) -> libc::c_int;
}
unsafe extern "C" {
    pub fn ftell(__stream: *mut FILE) -> libc::c_long;
}
unsafe extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
unsafe extern "C" {
    #[link_name = "\u{1}fseeko64"]
    pub fn fseeko(__stream: *mut FILE, __off: __off64_t, __whence: libc::c_int) -> libc::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}ftello64"]
    pub fn ftello(__stream: *mut FILE) -> __off64_t;
}
unsafe extern "C" {
    #[link_name = "\u{1}fgetpos64"]
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> libc::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}fsetpos64"]
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> libc::c_int;
}
unsafe extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn ferror(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn perror(__s: *const libc::c_char);
}
unsafe extern "C" {
    pub fn fileno(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn pclose(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn popen(__command: *const libc::c_char, __modes: *const libc::c_char) -> *mut FILE;
}
unsafe extern "C" {
    pub fn ctermid(__s: *mut libc::c_char) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: libc::c_int) -> libc::c_int;
}
pub type wchar_t = libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: libc::c_int,
    pub rem: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::core::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::core::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::core::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::core::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: libc::c_long,
    pub rem: libc::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::core::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::core::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::core::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::core::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: libc::c_longlong,
    pub rem: libc::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::core::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::core::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::core::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::core::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
unsafe extern "C" {
    pub fn atof(__nptr: *const libc::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(__nptr: *const libc::c_char) -> libc::c_int;
}
unsafe extern "C" {
    pub fn atol(__nptr: *const libc::c_char) -> libc::c_long;
}
unsafe extern "C" {
    pub fn atoll(__nptr: *const libc::c_char) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn strtod(__nptr: *const libc::c_char, __endptr: *mut *mut libc::c_char) -> f64;
}
unsafe extern "C" {
    pub fn strtof(__nptr: *const libc::c_char, __endptr: *mut *mut libc::c_char) -> f32;
}
unsafe extern "C" {
    pub fn strtold(__nptr: *const libc::c_char, __endptr: *mut *mut libc::c_char) -> u128;
}
unsafe extern "C" {
    pub fn strtol(
        __nptr: *const libc::c_char,
        __endptr: *mut *mut libc::c_char,
        __base: libc::c_int,
    ) -> libc::c_long;
}
unsafe extern "C" {
    pub fn strtoul(
        __nptr: *const libc::c_char,
        __endptr: *mut *mut libc::c_char,
        __base: libc::c_int,
    ) -> libc::c_ulong;
}
unsafe extern "C" {
    pub fn strtoq(
        __nptr: *const libc::c_char,
        __endptr: *mut *mut libc::c_char,
        __base: libc::c_int,
    ) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __nptr: *const libc::c_char,
        __endptr: *mut *mut libc::c_char,
        __base: libc::c_int,
    ) -> libc::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtoll(
        __nptr: *const libc::c_char,
        __endptr: *mut *mut libc::c_char,
        __base: libc::c_int,
    ) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn strtoull(
        __nptr: *const libc::c_char,
        __endptr: *mut *mut libc::c_char,
        __base: libc::c_int,
    ) -> libc::c_ulonglong;
}
unsafe extern "C" {
    pub fn l64a(__n: libc::c_long) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn a64l(__s: *const libc::c_char) -> libc::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = libc::c_ulong;
pub type ushort = libc::c_ushort;
pub type uint = libc::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = libc::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [libc::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::core::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::core::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::core::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::core::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::core::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::core::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::core::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::core::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::core::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::core::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::core::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = libc::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::core::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::core::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::core::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: libc::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: libc::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> libc::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt64_t;
pub type fsblkcnt_t = __fsblkcnt64_t;
pub type fsfilcnt_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: libc::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: libc::c_uint,
    pub __high: libc::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::core::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::core::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::core::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::core::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::core::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::core::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::core::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"]
        [::core::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::core::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::core::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::core::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::core::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::core::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::core::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: libc::c_int,
    pub __count: libc::c_uint,
    pub __owner: libc::c_int,
    pub __nusers: libc::c_uint,
    pub __kind: libc::c_int,
    pub __spins: libc::c_short,
    pub __elision: libc::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::core::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::core::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::core::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::core::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::core::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::core::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::core::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::core::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::core::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::core::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: libc::c_uint,
    pub __writers: libc::c_uint,
    pub __wrphase_futex: libc::c_uint,
    pub __writers_futex: libc::c_uint,
    pub __pad3: libc::c_uint,
    pub __pad4: libc::c_uint,
    pub __cur_writer: libc::c_int,
    pub __shared: libc::c_int,
    pub __rwelision: libc::c_schar,
    pub __pad1: [libc::c_uchar; 7usize],
    pub __pad2: libc::c_ulong,
    pub __flags: libc::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"]
        [::core::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::core::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::core::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [libc::c_uint; 2usize],
    pub __g_size: [libc::c_uint; 2usize],
    pub __g1_orig_size: libc::c_uint,
    pub __wrefs: libc::c_uint,
    pub __g_signals: [libc::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::core::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::core::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::core::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::core::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::core::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::core::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::core::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::core::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::core::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = libc::c_uint;
pub type __thrd_t = libc::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::core::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::core::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::core::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = libc::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [libc::c_char; 4usize],
    pub __align: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::core::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::core::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::core::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::core::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [libc::c_char; 4usize],
    pub __align: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::core::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::core::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::core::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::core::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = libc::c_uint;
pub type pthread_once_t = libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [libc::c_char; 56usize],
    pub __align: libc::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::core::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::core::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::core::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::core::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [libc::c_char; 40usize],
    pub __align: libc::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::core::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::core::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::core::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::core::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::core::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [libc::c_char; 48usize],
    pub __align: libc::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::core::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::core::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::core::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::core::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::core::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [libc::c_char; 56usize],
    pub __align: libc::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::core::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::core::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::core::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::core::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::core::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [libc::c_char; 8usize],
    pub __align: libc::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::core::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::core::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::core::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::core::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [libc::c_char; 32usize],
    pub __align: libc::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::core::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::core::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::core::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::core::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [libc::c_char; 4usize],
    pub __align: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::core::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::core::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::core::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::core::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
unsafe extern "C" {
    pub fn random() -> libc::c_long;
}
unsafe extern "C" {
    pub fn srandom(__seed: libc::c_uint);
}
unsafe extern "C" {
    pub fn initstate(
        __seed: libc::c_uint,
        __statebuf: *mut libc::c_char,
        __statelen: usize,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn setstate(__statebuf: *mut libc::c_char) -> *mut libc::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: libc::c_int,
    pub rand_deg: libc::c_int,
    pub rand_sep: libc::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::core::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::core::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::core::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::core::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::core::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::core::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::core::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::core::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::core::mem::offset_of!(random_data, end_ptr) - 40usize];
};
unsafe extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> libc::c_int;
}
unsafe extern "C" {
    pub fn srandom_r(__seed: libc::c_uint, __buf: *mut random_data) -> libc::c_int;
}
unsafe extern "C" {
    pub fn initstate_r(
        __seed: libc::c_uint,
        __statebuf: *mut libc::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn setstate_r(__statebuf: *mut libc::c_char, __buf: *mut random_data) -> libc::c_int;
}
unsafe extern "C" {
    pub fn rand() -> libc::c_int;
}
unsafe extern "C" {
    pub fn srand(__seed: libc::c_uint);
}
unsafe extern "C" {
    pub fn rand_r(__seed: *mut libc::c_uint) -> libc::c_int;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn erand48(__xsubi: *mut libc::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn lrand48() -> libc::c_long;
}
unsafe extern "C" {
    pub fn nrand48(__xsubi: *mut libc::c_ushort) -> libc::c_long;
}
unsafe extern "C" {
    pub fn mrand48() -> libc::c_long;
}
unsafe extern "C" {
    pub fn jrand48(__xsubi: *mut libc::c_ushort) -> libc::c_long;
}
unsafe extern "C" {
    pub fn srand48(__seedval: libc::c_long);
}
unsafe extern "C" {
    pub fn seed48(__seed16v: *mut libc::c_ushort) -> *mut libc::c_ushort;
}
unsafe extern "C" {
    pub fn lcong48(__param: *mut libc::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [libc::c_ushort; 3usize],
    pub __old_x: [libc::c_ushort; 3usize],
    pub __c: libc::c_ushort,
    pub __init: libc::c_ushort,
    pub __a: libc::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::core::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::core::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::core::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::core::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::core::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"]
        [::core::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"][::core::mem::offset_of!(drand48_data, __a) - 16usize];
};
unsafe extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> libc::c_int;
}
unsafe extern "C" {
    pub fn erand48_r(
        __xsubi: *mut libc::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data, __result: *mut libc::c_long) -> libc::c_int;
}
unsafe extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut libc::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut libc::c_long,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data, __result: *mut libc::c_long) -> libc::c_int;
}
unsafe extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut libc::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut libc::c_long,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn srand48_r(__seedval: libc::c_long, __buffer: *mut drand48_data) -> libc::c_int;
}
unsafe extern "C" {
    pub fn seed48_r(__seed16v: *mut libc::c_ushort, __buffer: *mut drand48_data) -> libc::c_int;
}
unsafe extern "C" {
    pub fn lcong48_r(__param: *mut libc::c_ushort, __buffer: *mut drand48_data) -> libc::c_int;
}
unsafe extern "C" {
    pub fn arc4random() -> __uint32_t;
}
unsafe extern "C" {
    pub fn arc4random_buf(__buf: *mut libc::c_void, __size: usize);
}
unsafe extern "C" {
    pub fn arc4random_uniform(__upper_bound: __uint32_t) -> __uint32_t;
}
unsafe extern "C" {
    pub fn malloc(__size: libc::c_ulong) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn calloc(__nmemb: libc::c_ulong, __size: libc::c_ulong) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn realloc(__ptr: *mut libc::c_void, __size: libc::c_ulong) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn free(__ptr: *mut libc::c_void);
}
unsafe extern "C" {
    pub fn reallocarray(
        __ptr: *mut libc::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn alloca(__size: libc::c_ulong) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn valloc(__size: usize) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut libc::c_void,
        __alignment: usize,
        __size: usize,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn aligned_alloc(__alignment: libc::c_ulong, __size: libc::c_ulong) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn atexit(__func: ::core::option::Option<unsafe extern "C" fn()>) -> libc::c_int;
}
unsafe extern "C" {
    pub fn at_quick_exit(__func: ::core::option::Option<unsafe extern "C" fn()>) -> libc::c_int;
}
unsafe extern "C" {
    pub fn on_exit(
        __func: ::core::option::Option<
            unsafe extern "C" fn(__status: libc::c_int, __arg: *mut libc::c_void),
        >,
        __arg: *mut libc::c_void,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn exit(__status: libc::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(__status: libc::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(__status: libc::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(__name: *const libc::c_char) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn putenv(__string: *mut libc::c_char) -> libc::c_int;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const libc::c_char,
        __value: *const libc::c_char,
        __replace: libc::c_int,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(__name: *const libc::c_char) -> libc::c_int;
}
unsafe extern "C" {
    pub fn clearenv() -> libc::c_int;
}
unsafe extern "C" {
    pub fn mktemp(__template: *mut libc::c_char) -> *mut libc::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}mkstemp64"]
    pub fn mkstemp(__template: *mut libc::c_char) -> libc::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}mkstemps64"]
    pub fn mkstemps(__template: *mut libc::c_char, __suffixlen: libc::c_int) -> libc::c_int;
}
unsafe extern "C" {
    pub fn mkdtemp(__template: *mut libc::c_char) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn system(__command: *const libc::c_char) -> libc::c_int;
}
unsafe extern "C" {
    pub fn realpath(
        __name: *const libc::c_char,
        __resolved: *mut libc::c_char,
    ) -> *mut libc::c_char;
}
pub type __compar_fn_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: *const libc::c_void, arg2: *const libc::c_void) -> libc::c_int,
>;
unsafe extern "C" {
    pub fn bsearch(
        __key: *const libc::c_void,
        __base: *const libc::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut libc::c_void;
}
unsafe extern "C" {
    pub fn qsort(__base: *mut libc::c_void, __nmemb: usize, __size: usize, __compar: __compar_fn_t);
}
unsafe extern "C" {
    pub fn abs(__x: libc::c_int) -> libc::c_int;
}
unsafe extern "C" {
    pub fn labs(__x: libc::c_long) -> libc::c_long;
}
unsafe extern "C" {
    pub fn llabs(__x: libc::c_longlong) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn div(__numer: libc::c_int, __denom: libc::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn ldiv(__numer: libc::c_long, __denom: libc::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn lldiv(__numer: libc::c_longlong, __denom: libc::c_longlong) -> lldiv_t;
}
unsafe extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn gcvt(__value: f64, __ndigit: libc::c_int, __buf: *mut libc::c_char)
    -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: libc::c_int,
        __buf: *mut libc::c_char,
    ) -> *mut libc::c_char;
}
unsafe extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
        __buf: *mut libc::c_char,
        __len: usize,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
        __buf: *mut libc::c_char,
        __len: usize,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
        __buf: *mut libc::c_char,
        __len: usize,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
        __buf: *mut libc::c_char,
        __len: usize,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn mblen(__s: *const libc::c_char, __n: usize) -> libc::c_int;
}
unsafe extern "C" {
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const libc::c_char, __n: usize) -> libc::c_int;
}
unsafe extern "C" {
    pub fn wctomb(__s: *mut libc::c_char, __wchar: wchar_t) -> libc::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const libc::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcstombs(__s: *mut libc::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn rpmatch(__response: *const libc::c_char) -> libc::c_int;
}
unsafe extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut libc::c_char,
        __tokens: *const *mut libc::c_char,
        __valuep: *mut *mut libc::c_char,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: libc::c_int) -> libc::c_int;
}
pub type float_t = f32;
pub type double_t = f64;
unsafe extern "C" {
    pub fn __fpclassify(__value: f64) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __signbit(__value: f64) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __isinf(__value: f64) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __finite(__value: f64) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __isnan(__value: f64) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __issignaling(__value: f64) -> libc::c_int;
}
unsafe extern "C" {
    pub fn acos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn asin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
unsafe extern "C" {
    pub fn cos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn sin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn tan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut libc::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut libc::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ldexp(__x: f64, __exponent: libc::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __ldexp(__x: f64, __exponent: libc::c_int) -> f64;
}
unsafe extern "C" {
    pub fn log(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn log10(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
unsafe extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
unsafe extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn logb(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn log2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn floor(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn isinf(__value: f64) -> libc::c_int;
}
unsafe extern "C" {
    pub fn finite(__value: f64) -> libc::c_int;
}
unsafe extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn significand(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn nan(__tagb: *const libc::c_char) -> f64;
}
unsafe extern "C" {
    pub fn __nan(__tagb: *const libc::c_char) -> f64;
}
unsafe extern "C" {
    pub fn isnan(__value: f64) -> libc::c_int;
}
unsafe extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn jn(arg1: libc::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn __jn(arg1: libc::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn yn(arg1: libc::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn __yn(arg1: libc::c_int, arg2: f64) -> f64;
}
unsafe extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
unsafe extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut libc::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut libc::c_int) -> f64;
}
unsafe extern "C" {
    pub fn rint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
unsafe extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
unsafe extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn scalbn(__x: f64, __n: libc::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __scalbn(__x: f64, __n: libc::c_int) -> f64;
}
unsafe extern "C" {
    pub fn ilogb(__x: f64) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __ilogb(__x: f64) -> libc::c_int;
}
unsafe extern "C" {
    pub fn scalbln(__x: f64, __n: libc::c_long) -> f64;
}
unsafe extern "C" {
    pub fn __scalbln(__x: f64, __n: libc::c_long) -> f64;
}
unsafe extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn round(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __round(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
unsafe extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut libc::c_int) -> f64;
}
unsafe extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut libc::c_int) -> f64;
}
unsafe extern "C" {
    pub fn lrint(__x: f64) -> libc::c_long;
}
unsafe extern "C" {
    pub fn __lrint(__x: f64) -> libc::c_long;
}
unsafe extern "C" {
    pub fn llrint(__x: f64) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn __llrint(__x: f64) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn lround(__x: f64) -> libc::c_long;
}
unsafe extern "C" {
    pub fn __lround(__x: f64) -> libc::c_long;
}
unsafe extern "C" {
    pub fn llround(__x: f64) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn __llround(__x: f64) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
unsafe extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
unsafe extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
unsafe extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
unsafe extern "C" {
    pub fn __fpclassifyf(__value: f32) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __signbitf(__value: f32) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __isinff(__value: f32) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __finitef(__value: f32) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __isnanf(__value: f32) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __issignalingf(__value: f32) -> libc::c_int;
}
unsafe extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
unsafe extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn expf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut libc::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut libc::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ldexpf(__x: f32, __exponent: libc::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: libc::c_int) -> f32;
}
unsafe extern "C" {
    pub fn logf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
unsafe extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
unsafe extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn isinff(__value: f32) -> libc::c_int;
}
unsafe extern "C" {
    pub fn finitef(__value: f32) -> libc::c_int;
}
unsafe extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn nanf(__tagb: *const libc::c_char) -> f32;
}
unsafe extern "C" {
    pub fn __nanf(__tagb: *const libc::c_char) -> f32;
}
unsafe extern "C" {
    pub fn isnanf(__value: f32) -> libc::c_int;
}
unsafe extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn jnf(arg1: libc::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn __jnf(arg1: libc::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn ynf(arg1: libc::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn __ynf(arg1: libc::c_int, arg2: f32) -> f32;
}
unsafe extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
unsafe extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut libc::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut libc::c_int) -> f32;
}
unsafe extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
unsafe extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
unsafe extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn scalbnf(__x: f32, __n: libc::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __scalbnf(__x: f32, __n: libc::c_int) -> f32;
}
unsafe extern "C" {
    pub fn ilogbf(__x: f32) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __ilogbf(__x: f32) -> libc::c_int;
}
unsafe extern "C" {
    pub fn scalblnf(__x: f32, __n: libc::c_long) -> f32;
}
unsafe extern "C" {
    pub fn __scalblnf(__x: f32, __n: libc::c_long) -> f32;
}
unsafe extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
unsafe extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut libc::c_int) -> f32;
}
unsafe extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut libc::c_int) -> f32;
}
unsafe extern "C" {
    pub fn lrintf(__x: f32) -> libc::c_long;
}
unsafe extern "C" {
    pub fn __lrintf(__x: f32) -> libc::c_long;
}
unsafe extern "C" {
    pub fn llrintf(__x: f32) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn __llrintf(__x: f32) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn lroundf(__x: f32) -> libc::c_long;
}
unsafe extern "C" {
    pub fn __lroundf(__x: f32) -> libc::c_long;
}
unsafe extern "C" {
    pub fn llroundf(__x: f32) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn __llroundf(__x: f32) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
unsafe extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
unsafe extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
unsafe extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
unsafe extern "C" {
    pub fn __fpclassifyl(__value: u128) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __signbitl(__value: u128) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __isinfl(__value: u128) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __finitel(__value: u128) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __isnanl(__value: u128) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __issignalingl(__value: u128) -> libc::c_int;
}
unsafe extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
unsafe extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn expl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut libc::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut libc::c_int) -> u128;
}
unsafe extern "C" {
    pub fn ldexpl(__x: u128, __exponent: libc::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: libc::c_int) -> u128;
}
unsafe extern "C" {
    pub fn logl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
unsafe extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
unsafe extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn isinfl(__value: u128) -> libc::c_int;
}
unsafe extern "C" {
    pub fn finitel(__value: u128) -> libc::c_int;
}
unsafe extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn nanl(__tagb: *const libc::c_char) -> u128;
}
unsafe extern "C" {
    pub fn __nanl(__tagb: *const libc::c_char) -> u128;
}
unsafe extern "C" {
    pub fn isnanl(__value: u128) -> libc::c_int;
}
unsafe extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn jnl(arg1: libc::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn __jnl(arg1: libc::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn ynl(arg1: libc::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn __ynl(arg1: libc::c_int, arg2: u128) -> u128;
}
unsafe extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
unsafe extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut libc::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut libc::c_int) -> u128;
}
unsafe extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn scalbnl(__x: u128, __n: libc::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __scalbnl(__x: u128, __n: libc::c_int) -> u128;
}
unsafe extern "C" {
    pub fn ilogbl(__x: u128) -> libc::c_int;
}
unsafe extern "C" {
    pub fn __ilogbl(__x: u128) -> libc::c_int;
}
unsafe extern "C" {
    pub fn scalblnl(__x: u128, __n: libc::c_long) -> u128;
}
unsafe extern "C" {
    pub fn __scalblnl(__x: u128, __n: libc::c_long) -> u128;
}
unsafe extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
unsafe extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut libc::c_int) -> u128;
}
unsafe extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut libc::c_int) -> u128;
}
unsafe extern "C" {
    pub fn lrintl(__x: u128) -> libc::c_long;
}
unsafe extern "C" {
    pub fn __lrintl(__x: u128) -> libc::c_long;
}
unsafe extern "C" {
    pub fn llrintl(__x: u128) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn __llrintl(__x: u128) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn lroundl(__x: u128) -> libc::c_long;
}
unsafe extern "C" {
    pub fn __lroundl(__x: u128) -> libc::c_long;
}
unsafe extern "C" {
    pub fn llroundl(__x: u128) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn __llroundl(__x: u128) -> libc::c_longlong;
}
unsafe extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
unsafe extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
unsafe extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
unsafe extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
unsafe extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
unsafe extern "C" {
    pub static mut signgam: libc::c_int;
}
pub const FP_NAN: _bindgen_ty_1 = 0;
pub const FP_INFINITE: _bindgen_ty_1 = 1;
pub const FP_ZERO: _bindgen_ty_1 = 2;
pub const FP_SUBNORMAL: _bindgen_ty_1 = 3;
pub const FP_NORMAL: _bindgen_ty_1 = 4;
pub type _bindgen_ty_1 = libc::c_uint;
unsafe extern "C" {
    pub fn __errno_location() -> *mut libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: libc::c_int,
    pub tz_dsttime: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timezone"][::core::mem::size_of::<timezone>() - 8usize];
    ["Alignment of timezone"][::core::mem::align_of::<timezone>() - 4usize];
    ["Offset of field: timezone::tz_minuteswest"]
        [::core::mem::offset_of!(timezone, tz_minuteswest) - 0usize];
    ["Offset of field: timezone::tz_dsttime"]
        [::core::mem::offset_of!(timezone, tz_dsttime) - 4usize];
};
unsafe extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: *mut libc::c_void) -> libc::c_int;
}
unsafe extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> libc::c_int;
}
unsafe extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> libc::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerval"][::core::mem::size_of::<itimerval>() - 32usize];
    ["Alignment of itimerval"][::core::mem::align_of::<itimerval>() - 8usize];
    ["Offset of field: itimerval::it_interval"]
        [::core::mem::offset_of!(itimerval, it_interval) - 0usize];
    ["Offset of field: itimerval::it_value"]
        [::core::mem::offset_of!(itimerval, it_value) - 16usize];
};
pub type __itimer_which_t = libc::c_int;
unsafe extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> libc::c_int;
}
unsafe extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn utimes(__file: *const libc::c_char, __tvp: *const timeval) -> libc::c_int;
}
unsafe extern "C" {
    pub fn lutimes(__file: *const libc::c_char, __tvp: *const timeval) -> libc::c_int;
}
unsafe extern "C" {
    pub fn futimes(__fd: libc::c_int, __tvp: *const timeval) -> libc::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = libc::c_schar;
pub type int_fast16_t = libc::c_long;
pub type int_fast32_t = libc::c_long;
pub type int_fast64_t = libc::c_long;
pub type uint_fast8_t = libc::c_uchar;
pub type uint_fast16_t = libc::c_ulong;
pub type uint_fast32_t = libc::c_ulong;
pub type uint_fast64_t = libc::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: libc::c_long,
    pub rem: libc::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of imaxdiv_t"][::core::mem::size_of::<imaxdiv_t>() - 16usize];
    ["Alignment of imaxdiv_t"][::core::mem::align_of::<imaxdiv_t>() - 8usize];
    ["Offset of field: imaxdiv_t::quot"][::core::mem::offset_of!(imaxdiv_t, quot) - 0usize];
    ["Offset of field: imaxdiv_t::rem"][::core::mem::offset_of!(imaxdiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
unsafe extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
unsafe extern "C" {
    pub fn strtoimax(
        __nptr: *const libc::c_char,
        __endptr: *mut *mut libc::c_char,
        __base: libc::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn strtoumax(
        __nptr: *const libc::c_char,
        __endptr: *mut *mut libc::c_char,
        __base: libc::c_int,
    ) -> uintmax_t;
}
unsafe extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: libc::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: libc::c_int,
    ) -> uintmax_t;
}
pub const LibRaw_openbayer_patterns_LIBRAW_OPENBAYER_RGGB: LibRaw_openbayer_patterns = 148;
pub const LibRaw_openbayer_patterns_LIBRAW_OPENBAYER_BGGR: LibRaw_openbayer_patterns = 22;
pub const LibRaw_openbayer_patterns_LIBRAW_OPENBAYER_GRBG: LibRaw_openbayer_patterns = 97;
pub const LibRaw_openbayer_patterns_LIBRAW_OPENBAYER_GBRG: LibRaw_openbayer_patterns = 73;
pub type LibRaw_openbayer_patterns = libc::c_uint;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_FORWARDMATRIX: LibRaw_dngfields_marks = 1;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_ILLUMINANT: LibRaw_dngfields_marks = 2;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_COLORMATRIX: LibRaw_dngfields_marks = 4;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_CALIBRATION: LibRaw_dngfields_marks = 8;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_ANALOGBALANCE: LibRaw_dngfields_marks = 16;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_BLACK: LibRaw_dngfields_marks = 32;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_WHITE: LibRaw_dngfields_marks = 64;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_OPCODE2: LibRaw_dngfields_marks = 128;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_LINTABLE: LibRaw_dngfields_marks = 256;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_CROPORIGIN: LibRaw_dngfields_marks = 512;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_CROPSIZE: LibRaw_dngfields_marks = 1024;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_PREVIEWCS: LibRaw_dngfields_marks = 2048;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_ASSHOTNEUTRAL: LibRaw_dngfields_marks = 4096;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_BASELINEEXPOSURE: LibRaw_dngfields_marks = 8192;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_LINEARRESPONSELIMIT: LibRaw_dngfields_marks = 16384;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_USERCROP: LibRaw_dngfields_marks = 32768;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_OPCODE1: LibRaw_dngfields_marks = 65536;
pub const LibRaw_dngfields_marks_LIBRAW_DNGFM_OPCODE3: LibRaw_dngfields_marks = 131072;
pub type LibRaw_dngfields_marks = libc::c_uint;
pub const LibRaw_As_Shot_WB_Applied_codes_LIBRAW_ASWB_APPLIED: LibRaw_As_Shot_WB_Applied_codes = 1;
pub const LibRaw_As_Shot_WB_Applied_codes_LIBRAW_ASWB_CANON: LibRaw_As_Shot_WB_Applied_codes = 2;
pub const LibRaw_As_Shot_WB_Applied_codes_LIBRAW_ASWB_NIKON: LibRaw_As_Shot_WB_Applied_codes = 4;
pub const LibRaw_As_Shot_WB_Applied_codes_LIBRAW_ASWB_NIKON_SRAW: LibRaw_As_Shot_WB_Applied_codes =
    8;
pub const LibRaw_As_Shot_WB_Applied_codes_LIBRAW_ASWB_PENTAX: LibRaw_As_Shot_WB_Applied_codes = 16;
pub type LibRaw_As_Shot_WB_Applied_codes = libc::c_uint;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_UNKNOWN: LibRaw_ExifTagTypes = 0;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_BYTE: LibRaw_ExifTagTypes = 1;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_ASCII: LibRaw_ExifTagTypes = 2;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SHORT: LibRaw_ExifTagTypes = 3;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_LONG: LibRaw_ExifTagTypes = 4;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_RATIONAL: LibRaw_ExifTagTypes = 5;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SBYTE: LibRaw_ExifTagTypes = 6;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_UNDEFINED: LibRaw_ExifTagTypes = 7;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SSHORT: LibRaw_ExifTagTypes = 8;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SLONG: LibRaw_ExifTagTypes = 9;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SRATIONAL: LibRaw_ExifTagTypes = 10;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_FLOAT: LibRaw_ExifTagTypes = 11;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_DOUBLE: LibRaw_ExifTagTypes = 12;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_IFD: LibRaw_ExifTagTypes = 13;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_UNICODE: LibRaw_ExifTagTypes = 14;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_COMPLEX: LibRaw_ExifTagTypes = 15;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_LONG8: LibRaw_ExifTagTypes = 16;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_SLONG8: LibRaw_ExifTagTypes = 17;
pub const LibRaw_ExifTagTypes_LIBRAW_EXIFTAG_TYPE_IFD8: LibRaw_ExifTagTypes = 18;
pub type LibRaw_ExifTagTypes = libc::c_uint;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Unknown: LibRaw_whitebalance_code = 0;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Daylight: LibRaw_whitebalance_code = 1;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Fluorescent: LibRaw_whitebalance_code = 2;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Tungsten: LibRaw_whitebalance_code = 3;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Flash: LibRaw_whitebalance_code = 4;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FineWeather: LibRaw_whitebalance_code = 9;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Cloudy: LibRaw_whitebalance_code = 10;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Shade: LibRaw_whitebalance_code = 11;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FL_D: LibRaw_whitebalance_code = 12;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FL_N: LibRaw_whitebalance_code = 13;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FL_W: LibRaw_whitebalance_code = 14;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FL_WW: LibRaw_whitebalance_code = 15;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FL_L: LibRaw_whitebalance_code = 16;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Ill_A: LibRaw_whitebalance_code = 17;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Ill_B: LibRaw_whitebalance_code = 18;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Ill_C: LibRaw_whitebalance_code = 19;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_D55: LibRaw_whitebalance_code = 20;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_D65: LibRaw_whitebalance_code = 21;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_D75: LibRaw_whitebalance_code = 22;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_D50: LibRaw_whitebalance_code = 23;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_StudioTungsten: LibRaw_whitebalance_code = 24;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Sunset: LibRaw_whitebalance_code = 64;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Underwater: LibRaw_whitebalance_code = 65;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_FluorescentHigh: LibRaw_whitebalance_code = 66;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_HT_Mercury: LibRaw_whitebalance_code = 67;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_AsShot: LibRaw_whitebalance_code = 81;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Auto: LibRaw_whitebalance_code = 82;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom: LibRaw_whitebalance_code = 83;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Auto1: LibRaw_whitebalance_code = 85;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Auto2: LibRaw_whitebalance_code = 86;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Auto3: LibRaw_whitebalance_code = 87;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Auto4: LibRaw_whitebalance_code = 88;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom1: LibRaw_whitebalance_code = 90;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom2: LibRaw_whitebalance_code = 91;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom3: LibRaw_whitebalance_code = 92;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom4: LibRaw_whitebalance_code = 93;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom5: LibRaw_whitebalance_code = 94;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Custom6: LibRaw_whitebalance_code = 95;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_PC_Set1: LibRaw_whitebalance_code = 96;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_PC_Set2: LibRaw_whitebalance_code = 97;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_PC_Set3: LibRaw_whitebalance_code = 98;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_PC_Set4: LibRaw_whitebalance_code = 99;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_PC_Set5: LibRaw_whitebalance_code = 100;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Measured: LibRaw_whitebalance_code = 110;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_BW: LibRaw_whitebalance_code = 120;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Kelvin: LibRaw_whitebalance_code = 254;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_Other: LibRaw_whitebalance_code = 255;
pub const LibRaw_whitebalance_code_LIBRAW_WBI_None: LibRaw_whitebalance_code = 65535;
pub type LibRaw_whitebalance_code = libc::c_uint;
pub const LibRaw_MultiExposure_related_LIBRAW_ME_NONE: LibRaw_MultiExposure_related = 0;
pub const LibRaw_MultiExposure_related_LIBRAW_ME_SIMPLE: LibRaw_MultiExposure_related = 1;
pub const LibRaw_MultiExposure_related_LIBRAW_ME_OVERLAY: LibRaw_MultiExposure_related = 2;
pub const LibRaw_MultiExposure_related_LIBRAW_ME_HDR: LibRaw_MultiExposure_related = 3;
pub type LibRaw_MultiExposure_related = libc::c_uint;
pub const LibRaw_dng_processing_LIBRAW_DNG_NONE: LibRaw_dng_processing = 0;
pub const LibRaw_dng_processing_LIBRAW_DNG_FLOAT: LibRaw_dng_processing = 1;
pub const LibRaw_dng_processing_LIBRAW_DNG_LINEAR: LibRaw_dng_processing = 2;
pub const LibRaw_dng_processing_LIBRAW_DNG_DEFLATE: LibRaw_dng_processing = 4;
pub const LibRaw_dng_processing_LIBRAW_DNG_XTRANS: LibRaw_dng_processing = 8;
pub const LibRaw_dng_processing_LIBRAW_DNG_OTHER: LibRaw_dng_processing = 16;
pub const LibRaw_dng_processing_LIBRAW_DNG_8BIT: LibRaw_dng_processing = 32;
pub const LibRaw_dng_processing_LIBRAW_DNG_ALL: LibRaw_dng_processing = 63;
pub const LibRaw_dng_processing_LIBRAW_DNG_DEFAULT: LibRaw_dng_processing = 39;
pub type LibRaw_dng_processing = libc::c_uint;
pub const LibRaw_output_flags_LIBRAW_OUTPUT_FLAGS_NONE: LibRaw_output_flags = 0;
pub const LibRaw_output_flags_LIBRAW_OUTPUT_FLAGS_PPMMETA: LibRaw_output_flags = 1;
pub type LibRaw_output_flags = libc::c_uint;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_RAWSPEED: LibRaw_runtime_capabilities = 1;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_DNGSDK: LibRaw_runtime_capabilities = 2;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_GPRSDK: LibRaw_runtime_capabilities = 4;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_UNICODEPATHS: LibRaw_runtime_capabilities = 8;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_X3FTOOLS: LibRaw_runtime_capabilities = 16;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_RPI6BY9: LibRaw_runtime_capabilities = 32;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_ZLIB: LibRaw_runtime_capabilities = 64;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_JPEG: LibRaw_runtime_capabilities = 128;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_RAWSPEED3: LibRaw_runtime_capabilities = 256;
pub const LibRaw_runtime_capabilities_LIBRAW_CAPS_RAWSPEED_BITS: LibRaw_runtime_capabilities = 512;
pub type LibRaw_runtime_capabilities = libc::c_uint;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_NotFound: LibRaw_colorspace = 0;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_sRGB: LibRaw_colorspace = 1;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_AdobeRGB: LibRaw_colorspace = 2;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_WideGamutRGB: LibRaw_colorspace = 3;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_ProPhotoRGB: LibRaw_colorspace = 4;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_ICC: LibRaw_colorspace = 5;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_Uncalibrated: LibRaw_colorspace = 6;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_CameraLinearUniWB: LibRaw_colorspace = 7;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_CameraLinear: LibRaw_colorspace = 8;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_CameraGammaUniWB: LibRaw_colorspace = 9;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_CameraGamma: LibRaw_colorspace = 10;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_MonochromeLinear: LibRaw_colorspace = 11;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_MonochromeGamma: LibRaw_colorspace = 12;
pub const LibRaw_colorspace_LIBRAW_COLORSPACE_Unknown: LibRaw_colorspace = 255;
pub type LibRaw_colorspace = libc::c_uint;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Unknown: LibRaw_cameramaker_index = 0;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Agfa: LibRaw_cameramaker_index = 1;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Alcatel: LibRaw_cameramaker_index = 2;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Apple: LibRaw_cameramaker_index = 3;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Aptina: LibRaw_cameramaker_index = 4;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_AVT: LibRaw_cameramaker_index = 5;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Baumer: LibRaw_cameramaker_index = 6;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Broadcom: LibRaw_cameramaker_index = 7;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Canon: LibRaw_cameramaker_index = 8;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Casio: LibRaw_cameramaker_index = 9;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_CINE: LibRaw_cameramaker_index = 10;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Clauss: LibRaw_cameramaker_index = 11;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Contax: LibRaw_cameramaker_index = 12;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Creative: LibRaw_cameramaker_index = 13;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_DJI: LibRaw_cameramaker_index = 14;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_DXO: LibRaw_cameramaker_index = 15;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Epson: LibRaw_cameramaker_index = 16;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Foculus: LibRaw_cameramaker_index = 17;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Fujifilm: LibRaw_cameramaker_index = 18;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Generic: LibRaw_cameramaker_index = 19;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Gione: LibRaw_cameramaker_index = 20;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_GITUP: LibRaw_cameramaker_index = 21;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Google: LibRaw_cameramaker_index = 22;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_GoPro: LibRaw_cameramaker_index = 23;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Hasselblad: LibRaw_cameramaker_index = 24;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_HTC: LibRaw_cameramaker_index = 25;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_I_Mobile: LibRaw_cameramaker_index = 26;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Imacon: LibRaw_cameramaker_index = 27;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_JK_Imaging: LibRaw_cameramaker_index = 28;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Kodak: LibRaw_cameramaker_index = 29;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Konica: LibRaw_cameramaker_index = 30;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Leaf: LibRaw_cameramaker_index = 31;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Leica: LibRaw_cameramaker_index = 32;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Lenovo: LibRaw_cameramaker_index = 33;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_LG: LibRaw_cameramaker_index = 34;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Logitech: LibRaw_cameramaker_index = 35;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Mamiya: LibRaw_cameramaker_index = 36;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Matrix: LibRaw_cameramaker_index = 37;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Meizu: LibRaw_cameramaker_index = 38;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Micron: LibRaw_cameramaker_index = 39;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Minolta: LibRaw_cameramaker_index = 40;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Motorola: LibRaw_cameramaker_index = 41;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_NGM: LibRaw_cameramaker_index = 42;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Nikon: LibRaw_cameramaker_index = 43;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Nokia: LibRaw_cameramaker_index = 44;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Olympus: LibRaw_cameramaker_index = 45;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_OmniVison: LibRaw_cameramaker_index = 46;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Panasonic: LibRaw_cameramaker_index = 47;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Parrot: LibRaw_cameramaker_index = 48;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Pentax: LibRaw_cameramaker_index = 49;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_PhaseOne: LibRaw_cameramaker_index = 50;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_PhotoControl: LibRaw_cameramaker_index = 51;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Photron: LibRaw_cameramaker_index = 52;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Pixelink: LibRaw_cameramaker_index = 53;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Polaroid: LibRaw_cameramaker_index = 54;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_RED: LibRaw_cameramaker_index = 55;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Ricoh: LibRaw_cameramaker_index = 56;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Rollei: LibRaw_cameramaker_index = 57;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_RoverShot: LibRaw_cameramaker_index = 58;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Samsung: LibRaw_cameramaker_index = 59;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Sigma: LibRaw_cameramaker_index = 60;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Sinar: LibRaw_cameramaker_index = 61;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_SMaL: LibRaw_cameramaker_index = 62;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Sony: LibRaw_cameramaker_index = 63;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_ST_Micro: LibRaw_cameramaker_index = 64;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_THL: LibRaw_cameramaker_index = 65;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_VLUU: LibRaw_cameramaker_index = 66;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Xiaomi: LibRaw_cameramaker_index = 67;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_XIAOYI: LibRaw_cameramaker_index = 68;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_YI: LibRaw_cameramaker_index = 69;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Yuneec: LibRaw_cameramaker_index = 70;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_Zeiss: LibRaw_cameramaker_index = 71;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_OnePlus: LibRaw_cameramaker_index = 72;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_ISG: LibRaw_cameramaker_index = 73;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_VIVO: LibRaw_cameramaker_index = 74;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_HMD_Global: LibRaw_cameramaker_index = 75;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_HUAWEI: LibRaw_cameramaker_index = 76;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_RaspberryPi: LibRaw_cameramaker_index = 77;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_OmDigital: LibRaw_cameramaker_index = 78;
pub const LibRaw_cameramaker_index_LIBRAW_CAMERAMAKER_TheLastOne: LibRaw_cameramaker_index = 79;
pub type LibRaw_cameramaker_index = libc::c_uint;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Unknown: LibRaw_camera_mounts = 0;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Alpa: LibRaw_camera_mounts = 1;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_C: LibRaw_camera_mounts = 2;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Canon_EF_M: LibRaw_camera_mounts = 3;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Canon_EF_S: LibRaw_camera_mounts = 4;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Canon_EF: LibRaw_camera_mounts = 5;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Canon_RF: LibRaw_camera_mounts = 6;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Contax_N: LibRaw_camera_mounts = 7;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Contax645: LibRaw_camera_mounts = 8;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_FT: LibRaw_camera_mounts = 9;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_mFT: LibRaw_camera_mounts = 10;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Fuji_GF: LibRaw_camera_mounts = 11;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Fuji_GX: LibRaw_camera_mounts = 12;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Fuji_X: LibRaw_camera_mounts = 13;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Hasselblad_H: LibRaw_camera_mounts = 14;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Hasselblad_V: LibRaw_camera_mounts = 15;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Hasselblad_XCD: LibRaw_camera_mounts = 16;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Leica_M: LibRaw_camera_mounts = 17;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Leica_R: LibRaw_camera_mounts = 18;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Leica_S: LibRaw_camera_mounts = 19;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Leica_SL: LibRaw_camera_mounts = 20;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Leica_TL: LibRaw_camera_mounts = 21;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_LPS_L: LibRaw_camera_mounts = 22;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Mamiya67: LibRaw_camera_mounts = 23;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Mamiya645: LibRaw_camera_mounts = 24;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Minolta_A: LibRaw_camera_mounts = 25;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Nikon_CX: LibRaw_camera_mounts = 26;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Nikon_F: LibRaw_camera_mounts = 27;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Nikon_Z: LibRaw_camera_mounts = 28;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_PhaseOne_iXM_MV: LibRaw_camera_mounts = 29;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_PhaseOne_iXM_RS: LibRaw_camera_mounts = 30;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_PhaseOne_iXM: LibRaw_camera_mounts = 31;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Pentax_645: LibRaw_camera_mounts = 32;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Pentax_K: LibRaw_camera_mounts = 33;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Pentax_Q: LibRaw_camera_mounts = 34;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_RicohModule: LibRaw_camera_mounts = 35;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Rollei_bayonet: LibRaw_camera_mounts = 36;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Samsung_NX_M: LibRaw_camera_mounts = 37;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Samsung_NX: LibRaw_camera_mounts = 38;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Sigma_X3F: LibRaw_camera_mounts = 39;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_Sony_E: LibRaw_camera_mounts = 40;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_LF: LibRaw_camera_mounts = 41;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_DigitalBack: LibRaw_camera_mounts = 42;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_FixedLens: LibRaw_camera_mounts = 43;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_IL_UM: LibRaw_camera_mounts = 44;
pub const LibRaw_camera_mounts_LIBRAW_MOUNT_TheLastOne: LibRaw_camera_mounts = 45;
pub type LibRaw_camera_mounts = libc::c_uint;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_Unknown: LibRaw_camera_formats = 0;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_APSC: LibRaw_camera_formats = 1;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_FF: LibRaw_camera_formats = 2;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_MF: LibRaw_camera_formats = 3;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_APSH: LibRaw_camera_formats = 4;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_1INCH: LibRaw_camera_formats = 5;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_1div2p3INCH: LibRaw_camera_formats = 6;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_1div1p7INCH: LibRaw_camera_formats = 7;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_FT: LibRaw_camera_formats = 8;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_CROP645: LibRaw_camera_formats = 9;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_LeicaS: LibRaw_camera_formats = 10;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_645: LibRaw_camera_formats = 11;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_66: LibRaw_camera_formats = 12;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_69: LibRaw_camera_formats = 13;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_LF: LibRaw_camera_formats = 14;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_Leica_DMR: LibRaw_camera_formats = 15;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_67: LibRaw_camera_formats = 16;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_SigmaAPSC: LibRaw_camera_formats = 17;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_SigmaMerrill: LibRaw_camera_formats = 18;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_SigmaAPSH: LibRaw_camera_formats = 19;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_3648: LibRaw_camera_formats = 20;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_68: LibRaw_camera_formats = 21;
pub const LibRaw_camera_formats_LIBRAW_FORMAT_TheLastOne: LibRaw_camera_formats = 22;
pub type LibRaw_camera_formats = libc::c_uint;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_UNKNOWN: LibRawImageAspects = 0;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_OTHER: LibRawImageAspects = 1;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_MINIMAL_REAL_ASPECT_VALUE: LibRawImageAspects = 99;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_MAXIMAL_REAL_ASPECT_VALUE: LibRawImageAspects =
    10000;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_3to2: LibRawImageAspects = 1500;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_1to1: LibRawImageAspects = 1000;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_4to3: LibRawImageAspects = 1333;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_16to9: LibRawImageAspects = 1777;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_5to4: LibRawImageAspects = 1250;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_7to6: LibRawImageAspects = 1166;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_6to5: LibRawImageAspects = 1200;
pub const LibRawImageAspects_LIBRAW_IMAGE_ASPECT_7to5: LibRawImageAspects = 1400;
pub type LibRawImageAspects = libc::c_uint;
pub const LibRaw_lens_focal_types_LIBRAW_FT_UNDEFINED: LibRaw_lens_focal_types = 0;
pub const LibRaw_lens_focal_types_LIBRAW_FT_PRIME_LENS: LibRaw_lens_focal_types = 1;
pub const LibRaw_lens_focal_types_LIBRAW_FT_ZOOM_LENS: LibRaw_lens_focal_types = 2;
pub const LibRaw_lens_focal_types_LIBRAW_FT_ZOOM_LENS_CONSTANT_APERTURE: LibRaw_lens_focal_types =
    3;
pub const LibRaw_lens_focal_types_LIBRAW_FT_ZOOM_LENS_VARIABLE_APERTURE: LibRaw_lens_focal_types =
    4;
pub type LibRaw_lens_focal_types = libc::c_uint;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_UNDEFINED: LibRaw_Canon_RecordModes = 0;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_JPEG: LibRaw_Canon_RecordModes = 1;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CRW_THM: LibRaw_Canon_RecordModes = 2;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_AVI_THM: LibRaw_Canon_RecordModes = 3;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_TIF: LibRaw_Canon_RecordModes = 4;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_TIF_JPEG: LibRaw_Canon_RecordModes = 5;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CR2: LibRaw_Canon_RecordModes = 6;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CR2_JPEG: LibRaw_Canon_RecordModes = 7;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_UNKNOWN: LibRaw_Canon_RecordModes = 8;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_MOV: LibRaw_Canon_RecordModes = 9;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_MP4: LibRaw_Canon_RecordModes = 10;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CRM: LibRaw_Canon_RecordModes = 11;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CR3: LibRaw_Canon_RecordModes = 12;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CR3_JPEG: LibRaw_Canon_RecordModes = 13;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_HEIF: LibRaw_Canon_RecordModes = 14;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_CR3_HEIF: LibRaw_Canon_RecordModes = 15;
pub const LibRaw_Canon_RecordModes_LIBRAW_Canon_RecordMode_TheLastOne: LibRaw_Canon_RecordModes =
    16;
pub type LibRaw_Canon_RecordModes = libc::c_uint;
pub const LibRaw_minolta_storagemethods_LIBRAW_MINOLTA_UNPACKED: LibRaw_minolta_storagemethods = 82;
pub const LibRaw_minolta_storagemethods_LIBRAW_MINOLTA_PACKED: LibRaw_minolta_storagemethods = 89;
pub type LibRaw_minolta_storagemethods = libc::c_uint;
pub const LibRaw_minolta_bayerpatterns_LIBRAW_MINOLTA_RGGB: LibRaw_minolta_bayerpatterns = 1;
pub const LibRaw_minolta_bayerpatterns_LIBRAW_MINOLTA_G2BRG1: LibRaw_minolta_bayerpatterns = 4;
pub type LibRaw_minolta_bayerpatterns = libc::c_uint;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_DSC: LibRaw_sony_cameratypes = 1;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_DSLR: LibRaw_sony_cameratypes = 2;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_NEX: LibRaw_sony_cameratypes = 3;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_SLT: LibRaw_sony_cameratypes = 4;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_ILCE: LibRaw_sony_cameratypes = 5;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_ILCA: LibRaw_sony_cameratypes = 6;
pub const LibRaw_sony_cameratypes_LIBRAW_SONY_CameraType_UNKNOWN: LibRaw_sony_cameratypes = 65535;
pub type LibRaw_sony_cameratypes = libc::c_uint;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010None: LibRaw_Sony_0x2010_Type = 0;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010a: LibRaw_Sony_0x2010_Type = 1;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010b: LibRaw_Sony_0x2010_Type = 2;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010c: LibRaw_Sony_0x2010_Type = 3;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010d: LibRaw_Sony_0x2010_Type = 4;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010e: LibRaw_Sony_0x2010_Type = 5;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010f: LibRaw_Sony_0x2010_Type = 6;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010g: LibRaw_Sony_0x2010_Type = 7;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010h: LibRaw_Sony_0x2010_Type = 8;
pub const LibRaw_Sony_0x2010_Type_LIBRAW_SONY_Tag2010i: LibRaw_Sony_0x2010_Type = 9;
pub type LibRaw_Sony_0x2010_Type = libc::c_uint;
pub const LibRaw_Sony_0x9050_Type_LIBRAW_SONY_Tag9050None: LibRaw_Sony_0x9050_Type = 0;
pub const LibRaw_Sony_0x9050_Type_LIBRAW_SONY_Tag9050a: LibRaw_Sony_0x9050_Type = 1;
pub const LibRaw_Sony_0x9050_Type_LIBRAW_SONY_Tag9050b: LibRaw_Sony_0x9050_Type = 2;
pub const LibRaw_Sony_0x9050_Type_LIBRAW_SONY_Tag9050c: LibRaw_Sony_0x9050_Type = 3;
pub type LibRaw_Sony_0x9050_Type = libc::c_uint;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_MF: LIBRAW_SONY_FOCUSMODEmodes = 0;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_AF_S: LIBRAW_SONY_FOCUSMODEmodes = 2;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_AF_C: LIBRAW_SONY_FOCUSMODEmodes = 3;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_AF_A: LIBRAW_SONY_FOCUSMODEmodes = 4;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_DMF: LIBRAW_SONY_FOCUSMODEmodes = 6;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_AF_D: LIBRAW_SONY_FOCUSMODEmodes = 7;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_AF: LIBRAW_SONY_FOCUSMODEmodes = 101;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_PERMANENT_AF:
    LIBRAW_SONY_FOCUSMODEmodes = 104;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_SEMI_MF: LIBRAW_SONY_FOCUSMODEmodes =
    105;
pub const LIBRAW_SONY_FOCUSMODEmodes_LIBRAW_SONY_FOCUSMODE_UNKNOWN: LIBRAW_SONY_FOCUSMODEmodes = -1;
pub type LIBRAW_SONY_FOCUSMODEmodes = libc::c_int;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_UnknownSensor: LibRaw_KodakSensors = 0;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M1: LibRaw_KodakSensors = 1;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M15: LibRaw_KodakSensors = 2;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M16: LibRaw_KodakSensors = 3;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M17: LibRaw_KodakSensors = 4;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M2: LibRaw_KodakSensors = 5;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M23: LibRaw_KodakSensors = 6;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M24: LibRaw_KodakSensors = 7;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M3: LibRaw_KodakSensors = 8;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M5: LibRaw_KodakSensors = 9;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M6: LibRaw_KodakSensors = 10;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_C14: LibRaw_KodakSensors = 11;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_X14: LibRaw_KodakSensors = 12;
pub const LibRaw_KodakSensors_LIBRAW_Kodak_M11: LibRaw_KodakSensors = 13;
pub type LibRaw_KodakSensors = libc::c_uint;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_Unknown: LibRaw_HasselbladFormatCodes = 0;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_3FR: LibRaw_HasselbladFormatCodes = 1;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_FFF: LibRaw_HasselbladFormatCodes = 2;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_Imacon: LibRaw_HasselbladFormatCodes = 3;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_HasselbladDNG: LibRaw_HasselbladFormatCodes = 4;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_AdobeDNG: LibRaw_HasselbladFormatCodes = 5;
pub const LibRaw_HasselbladFormatCodes_LIBRAW_HF_AdobeDNG_fromPhocusDNG:
    LibRaw_HasselbladFormatCodes = 6;
pub type LibRaw_HasselbladFormatCodes = libc::c_uint;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_NONE: LibRaw_rawspecial_t = 0;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_BASEONLY: LibRaw_rawspecial_t = 1;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_DELTAONLY: LibRaw_rawspecial_t = 2;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_DELTAZEROBASE: LibRaw_rawspecial_t = 4;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_DELTATOVALUE: LibRaw_rawspecial_t = 8;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SONYARW2_ALLFLAGS: LibRaw_rawspecial_t = 15;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_NODP2Q_INTERPOLATERG: LibRaw_rawspecial_t = 16;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_NODP2Q_INTERPOLATEAF: LibRaw_rawspecial_t = 32;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SRAW_NO_RGB: LibRaw_rawspecial_t = 64;
pub const LibRaw_rawspecial_t_LIBRAW_RAWSPECIAL_SRAW_NO_INTERPOLATE: LibRaw_rawspecial_t = 128;
pub type LibRaw_rawspecial_t = libc::c_uint;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV1_USE: LibRaw_rawspeed_bits_t = 1;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV1_FAILONUNKNOWN: LibRaw_rawspeed_bits_t = 2;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV1_IGNOREERRORS: LibRaw_rawspeed_bits_t = 4;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV3_USE: LibRaw_rawspeed_bits_t = 256;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV3_FAILONUNKNOWN: LibRaw_rawspeed_bits_t = 512;
pub const LibRaw_rawspeed_bits_t_LIBRAW_RAWSPEEDV3_IGNOREERRORS: LibRaw_rawspeed_bits_t = 1024;
pub type LibRaw_rawspeed_bits_t = libc::c_uint;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_PENTAX_PS_ALLFRAMES:
    LibRaw_processing_options = 1;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_CONVERTFLOAT_TO_INT:
    LibRaw_processing_options = 2;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_ARQ_SKIP_CHANNEL_SWAP:
    LibRaw_processing_options = 4;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_NO_ROTATE_FOR_KODAK_THUMBNAILS:
    LibRaw_processing_options = 8;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_USE_PPM16_THUMBS: LibRaw_processing_options =
    32;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DONT_CHECK_DNG_ILLUMINANT:
    LibRaw_processing_options = 64;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNGSDK_ZEROCOPY: LibRaw_processing_options =
    128;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_ZEROFILTERS_FOR_MONOCHROMETIFFS:
    LibRaw_processing_options = 256;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_ADD_ENHANCED: LibRaw_processing_options =
    512;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_ADD_PREVIEWS: LibRaw_processing_options =
    1024;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_PREFER_LARGEST_IMAGE:
    LibRaw_processing_options = 2048;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_STAGE2: LibRaw_processing_options = 4096;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_STAGE3: LibRaw_processing_options = 8192;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_ALLOWSIZECHANGE:
    LibRaw_processing_options = 16384;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_DISABLEWBADJUST:
    LibRaw_processing_options = 32768;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_PROVIDE_NONSTANDARD_WB:
    LibRaw_processing_options = 65536;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_CAMERAWB_FALLBACK_TO_DAYLIGHT:
    LibRaw_processing_options = 131072;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_CHECK_THUMBNAILS_KNOWN_VENDORS:
    LibRaw_processing_options = 262144;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_CHECK_THUMBNAILS_ALL_VENDORS:
    LibRaw_processing_options = 524288;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_STAGE2_IFPRESENT:
    LibRaw_processing_options = 1048576;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_STAGE3_IFPRESENT:
    LibRaw_processing_options = 2097152;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_DNG_ADD_MASKS: LibRaw_processing_options =
    4194304;
pub const LibRaw_processing_options_LIBRAW_RAWOPTIONS_CANON_IGNORE_MAKERNOTES_ROTATION:
    LibRaw_processing_options = 8388608;
pub type LibRaw_processing_options = libc::c_uint;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_HASCURVE: LibRaw_decoder_flags = 16;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_SONYARW2: LibRaw_decoder_flags = 32;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_TRYRAWSPEED: LibRaw_decoder_flags = 64;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_OWNALLOC: LibRaw_decoder_flags = 128;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_FIXEDMAXC: LibRaw_decoder_flags = 256;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_ADOBECOPYPIXEL: LibRaw_decoder_flags = 512;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_LEGACY_WITH_MARGINS: LibRaw_decoder_flags = 1024;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_3CHANNEL: LibRaw_decoder_flags = 2048;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_SINAR4SHOT: LibRaw_decoder_flags = 2048;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_FLATDATA: LibRaw_decoder_flags = 4096;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_FLAT_BG2_SWAPPED: LibRaw_decoder_flags = 8192;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_UNSUPPORTED_FORMAT: LibRaw_decoder_flags = 16384;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_NOTSET: LibRaw_decoder_flags = 32768;
pub const LibRaw_decoder_flags_LIBRAW_DECODER_TRYRAWSPEED3: LibRaw_decoder_flags = 65536;
pub type LibRaw_decoder_flags = libc::c_uint;
pub const LibRaw_constructor_flags_LIBRAW_OPTIONS_NONE: LibRaw_constructor_flags = 0;
pub const LibRaw_constructor_flags_LIBRAW_OPTIONS_NO_DATAERR_CALLBACK: LibRaw_constructor_flags = 2;
pub const LibRaw_constructor_flags_LIBRAW_OPIONS_NO_DATAERR_CALLBACK: LibRaw_constructor_flags = 2;
pub type LibRaw_constructor_flags = libc::c_uint;
pub const LibRaw_warnings_LIBRAW_WARN_NONE: LibRaw_warnings = 0;
pub const LibRaw_warnings_LIBRAW_WARN_BAD_CAMERA_WB: LibRaw_warnings = 4;
pub const LibRaw_warnings_LIBRAW_WARN_NO_METADATA: LibRaw_warnings = 8;
pub const LibRaw_warnings_LIBRAW_WARN_NO_JPEGLIB: LibRaw_warnings = 16;
pub const LibRaw_warnings_LIBRAW_WARN_NO_EMBEDDED_PROFILE: LibRaw_warnings = 32;
pub const LibRaw_warnings_LIBRAW_WARN_NO_INPUT_PROFILE: LibRaw_warnings = 64;
pub const LibRaw_warnings_LIBRAW_WARN_BAD_OUTPUT_PROFILE: LibRaw_warnings = 128;
pub const LibRaw_warnings_LIBRAW_WARN_NO_BADPIXELMAP: LibRaw_warnings = 256;
pub const LibRaw_warnings_LIBRAW_WARN_BAD_DARKFRAME_FILE: LibRaw_warnings = 512;
pub const LibRaw_warnings_LIBRAW_WARN_BAD_DARKFRAME_DIM: LibRaw_warnings = 1024;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED_PROBLEM: LibRaw_warnings = 4096;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED_UNSUPPORTED: LibRaw_warnings = 8192;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED_PROCESSED: LibRaw_warnings = 16384;
pub const LibRaw_warnings_LIBRAW_WARN_FALLBACK_TO_AHD: LibRaw_warnings = 32768;
pub const LibRaw_warnings_LIBRAW_WARN_PARSEFUJI_PROCESSED: LibRaw_warnings = 65536;
pub const LibRaw_warnings_LIBRAW_WARN_DNGSDK_PROCESSED: LibRaw_warnings = 131072;
pub const LibRaw_warnings_LIBRAW_WARN_DNG_IMAGES_REORDERED: LibRaw_warnings = 262144;
pub const LibRaw_warnings_LIBRAW_WARN_DNG_STAGE2_APPLIED: LibRaw_warnings = 524288;
pub const LibRaw_warnings_LIBRAW_WARN_DNG_STAGE3_APPLIED: LibRaw_warnings = 1048576;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED3_PROBLEM: LibRaw_warnings = 2097152;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED3_UNSUPPORTED: LibRaw_warnings = 4194304;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED3_PROCESSED: LibRaw_warnings = 8388608;
pub const LibRaw_warnings_LIBRAW_WARN_RAWSPEED3_NOTLISTED: LibRaw_warnings = 16777216;
pub type LibRaw_warnings = libc::c_uint;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_NONE: LibRaw_exceptions = 0;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_ALLOC: LibRaw_exceptions = 1;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_DECODE_RAW: LibRaw_exceptions = 2;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_DECODE_JPEG: LibRaw_exceptions = 3;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_IO_EOF: LibRaw_exceptions = 4;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_IO_CORRUPT: LibRaw_exceptions = 5;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_CANCELLED_BY_CALLBACK: LibRaw_exceptions = 6;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_BAD_CROP: LibRaw_exceptions = 7;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_IO_BADFILE: LibRaw_exceptions = 8;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_DECODE_JPEG2000: LibRaw_exceptions = 9;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_TOOBIG: LibRaw_exceptions = 10;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_MEMPOOL: LibRaw_exceptions = 11;
pub const LibRaw_exceptions_LIBRAW_EXCEPTION_UNSUPPORTED_FORMAT: LibRaw_exceptions = 12;
pub type LibRaw_exceptions = libc::c_uint;
pub const LibRaw_progress_LIBRAW_PROGRESS_START: LibRaw_progress = 0;
pub const LibRaw_progress_LIBRAW_PROGRESS_OPEN: LibRaw_progress = 1;
pub const LibRaw_progress_LIBRAW_PROGRESS_IDENTIFY: LibRaw_progress = 2;
pub const LibRaw_progress_LIBRAW_PROGRESS_SIZE_ADJUST: LibRaw_progress = 4;
pub const LibRaw_progress_LIBRAW_PROGRESS_LOAD_RAW: LibRaw_progress = 8;
pub const LibRaw_progress_LIBRAW_PROGRESS_RAW2_IMAGE: LibRaw_progress = 16;
pub const LibRaw_progress_LIBRAW_PROGRESS_REMOVE_ZEROES: LibRaw_progress = 32;
pub const LibRaw_progress_LIBRAW_PROGRESS_BAD_PIXELS: LibRaw_progress = 64;
pub const LibRaw_progress_LIBRAW_PROGRESS_DARK_FRAME: LibRaw_progress = 128;
pub const LibRaw_progress_LIBRAW_PROGRESS_FOVEON_INTERPOLATE: LibRaw_progress = 256;
pub const LibRaw_progress_LIBRAW_PROGRESS_SCALE_COLORS: LibRaw_progress = 512;
pub const LibRaw_progress_LIBRAW_PROGRESS_PRE_INTERPOLATE: LibRaw_progress = 1024;
pub const LibRaw_progress_LIBRAW_PROGRESS_INTERPOLATE: LibRaw_progress = 2048;
pub const LibRaw_progress_LIBRAW_PROGRESS_MIX_GREEN: LibRaw_progress = 4096;
pub const LibRaw_progress_LIBRAW_PROGRESS_MEDIAN_FILTER: LibRaw_progress = 8192;
pub const LibRaw_progress_LIBRAW_PROGRESS_HIGHLIGHTS: LibRaw_progress = 16384;
pub const LibRaw_progress_LIBRAW_PROGRESS_FUJI_ROTATE: LibRaw_progress = 32768;
pub const LibRaw_progress_LIBRAW_PROGRESS_FLIP: LibRaw_progress = 65536;
pub const LibRaw_progress_LIBRAW_PROGRESS_APPLY_PROFILE: LibRaw_progress = 131072;
pub const LibRaw_progress_LIBRAW_PROGRESS_CONVERT_RGB: LibRaw_progress = 262144;
pub const LibRaw_progress_LIBRAW_PROGRESS_STRETCH: LibRaw_progress = 524288;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE20: LibRaw_progress = 1048576;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE21: LibRaw_progress = 2097152;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE22: LibRaw_progress = 4194304;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE23: LibRaw_progress = 8388608;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE24: LibRaw_progress = 16777216;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE25: LibRaw_progress = 33554432;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE26: LibRaw_progress = 67108864;
pub const LibRaw_progress_LIBRAW_PROGRESS_STAGE27: LibRaw_progress = 134217728;
pub const LibRaw_progress_LIBRAW_PROGRESS_THUMB_LOAD: LibRaw_progress = 268435456;
pub const LibRaw_progress_LIBRAW_PROGRESS_TRESERVED1: LibRaw_progress = 536870912;
pub const LibRaw_progress_LIBRAW_PROGRESS_TRESERVED2: LibRaw_progress = 1073741824;
pub type LibRaw_progress = libc::c_uint;
pub const LibRaw_errors_LIBRAW_SUCCESS: LibRaw_errors = 0;
pub const LibRaw_errors_LIBRAW_UNSPECIFIED_ERROR: LibRaw_errors = -1;
pub const LibRaw_errors_LIBRAW_FILE_UNSUPPORTED: LibRaw_errors = -2;
pub const LibRaw_errors_LIBRAW_REQUEST_FOR_NONEXISTENT_IMAGE: LibRaw_errors = -3;
pub const LibRaw_errors_LIBRAW_OUT_OF_ORDER_CALL: LibRaw_errors = -4;
pub const LibRaw_errors_LIBRAW_NO_THUMBNAIL: LibRaw_errors = -5;
pub const LibRaw_errors_LIBRAW_UNSUPPORTED_THUMBNAIL: LibRaw_errors = -6;
pub const LibRaw_errors_LIBRAW_INPUT_CLOSED: LibRaw_errors = -7;
pub const LibRaw_errors_LIBRAW_NOT_IMPLEMENTED: LibRaw_errors = -8;
pub const LibRaw_errors_LIBRAW_REQUEST_FOR_NONEXISTENT_THUMBNAIL: LibRaw_errors = -9;
pub const LibRaw_errors_LIBRAW_UNSUFFICIENT_MEMORY: LibRaw_errors = -100007;
pub const LibRaw_errors_LIBRAW_DATA_ERROR: LibRaw_errors = -100008;
pub const LibRaw_errors_LIBRAW_IO_ERROR: LibRaw_errors = -100009;
pub const LibRaw_errors_LIBRAW_CANCELLED_BY_CALLBACK: LibRaw_errors = -100010;
pub const LibRaw_errors_LIBRAW_BAD_CROP: LibRaw_errors = -100011;
pub const LibRaw_errors_LIBRAW_TOO_BIG: LibRaw_errors = -100012;
pub const LibRaw_errors_LIBRAW_MEMPOOL_OVERFLOW: LibRaw_errors = -100013;
pub type LibRaw_errors = libc::c_int;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_UNKNOWN:
    LibRaw_internal_thumbnail_formats = 0;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_KODAK_THUMB:
    LibRaw_internal_thumbnail_formats = 1;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_KODAK_YCBCR:
    LibRaw_internal_thumbnail_formats = 2;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_KODAK_RGB:
    LibRaw_internal_thumbnail_formats = 3;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_JPEG:
    LibRaw_internal_thumbnail_formats = 4;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_LAYER:
    LibRaw_internal_thumbnail_formats = 5;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_ROLLEI:
    LibRaw_internal_thumbnail_formats = 6;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_PPM:
    LibRaw_internal_thumbnail_formats = 7;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_PPM16:
    LibRaw_internal_thumbnail_formats = 8;
pub const LibRaw_internal_thumbnail_formats_LIBRAW_INTERNAL_THUMBNAIL_X3F:
    LibRaw_internal_thumbnail_formats = 9;
pub type LibRaw_internal_thumbnail_formats = libc::c_uint;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_UNKNOWN: LibRaw_thumbnail_formats = 0;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_JPEG: LibRaw_thumbnail_formats = 1;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_BITMAP: LibRaw_thumbnail_formats = 2;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_BITMAP16: LibRaw_thumbnail_formats = 3;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_LAYER: LibRaw_thumbnail_formats = 4;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_ROLLEI: LibRaw_thumbnail_formats = 5;
pub const LibRaw_thumbnail_formats_LIBRAW_THUMBNAIL_H265: LibRaw_thumbnail_formats = 6;
pub type LibRaw_thumbnail_formats = libc::c_uint;
pub const LibRaw_image_formats_LIBRAW_IMAGE_JPEG: LibRaw_image_formats = 1;
pub const LibRaw_image_formats_LIBRAW_IMAGE_BITMAP: LibRaw_image_formats = 2;
pub type LibRaw_image_formats = libc::c_uint;
pub type INT64 = libc::c_longlong;
pub type UINT64 = libc::c_ulonglong;
pub type uchar = libc::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_decoder_info_t {
    pub decoder_name: *const libc::c_char,
    pub decoder_flags: libc::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_decoder_info_t"][::core::mem::size_of::<libraw_decoder_info_t>() - 16usize];
    ["Alignment of libraw_decoder_info_t"]
        [::core::mem::align_of::<libraw_decoder_info_t>() - 8usize];
    ["Offset of field: libraw_decoder_info_t::decoder_name"]
        [::core::mem::offset_of!(libraw_decoder_info_t, decoder_name) - 0usize];
    ["Offset of field: libraw_decoder_info_t::decoder_flags"]
        [::core::mem::offset_of!(libraw_decoder_info_t, decoder_flags) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_internal_output_params_t {
    pub mix_green: libc::c_uint,
    pub raw_color: libc::c_uint,
    pub zero_is_bad: libc::c_uint,
    pub shrink: ushort,
    pub fuji_width: ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_internal_output_params_t"]
        [::core::mem::size_of::<libraw_internal_output_params_t>() - 16usize];
    ["Alignment of libraw_internal_output_params_t"]
        [::core::mem::align_of::<libraw_internal_output_params_t>() - 4usize];
    ["Offset of field: libraw_internal_output_params_t::mix_green"]
        [::core::mem::offset_of!(libraw_internal_output_params_t, mix_green) - 0usize];
    ["Offset of field: libraw_internal_output_params_t::raw_color"]
        [::core::mem::offset_of!(libraw_internal_output_params_t, raw_color) - 4usize];
    ["Offset of field: libraw_internal_output_params_t::zero_is_bad"]
        [::core::mem::offset_of!(libraw_internal_output_params_t, zero_is_bad) - 8usize];
    ["Offset of field: libraw_internal_output_params_t::shrink"]
        [::core::mem::offset_of!(libraw_internal_output_params_t, shrink) - 12usize];
    ["Offset of field: libraw_internal_output_params_t::fuji_width"]
        [::core::mem::offset_of!(libraw_internal_output_params_t, fuji_width) - 14usize];
};
pub type memory_callback = ::core::option::Option<
    unsafe extern "C" fn(
        data: *mut libc::c_void,
        file: *const libc::c_char,
        where_: *const libc::c_char,
    ),
>;
pub type exif_parser_callback = ::core::option::Option<
    unsafe extern "C" fn(
        context: *mut libc::c_void,
        tag: libc::c_int,
        type_: libc::c_int,
        len: libc::c_int,
        ord: libc::c_uint,
        ifp: *mut libc::c_void,
        base: INT64,
    ),
>;
pub type data_callback = ::core::option::Option<
    unsafe extern "C" fn(data: *mut libc::c_void, file: *const libc::c_char, offset: libc::c_int),
>;
unsafe extern "C" {
    pub fn default_data_callback(
        data: *mut libc::c_void,
        file: *const libc::c_char,
        offset: libc::c_int,
    );
}
pub type progress_callback = ::core::option::Option<
    unsafe extern "C" fn(
        data: *mut libc::c_void,
        stage: LibRaw_progress,
        iteration: libc::c_int,
        expected: libc::c_int,
    ) -> libc::c_int,
>;
pub type pre_identify_callback =
    ::core::option::Option<unsafe extern "C" fn(ctx: *mut libc::c_void) -> libc::c_int>;
pub type post_identify_callback =
    ::core::option::Option<unsafe extern "C" fn(ctx: *mut libc::c_void)>;
pub type process_step_callback =
    ::core::option::Option<unsafe extern "C" fn(ctx: *mut libc::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_callbacks_t {
    pub data_cb: data_callback,
    pub datacb_data: *mut libc::c_void,
    pub progress_cb: progress_callback,
    pub progresscb_data: *mut libc::c_void,
    pub exif_cb: exif_parser_callback,
    pub exifparser_data: *mut libc::c_void,
    pub pre_identify_cb: pre_identify_callback,
    pub post_identify_cb: post_identify_callback,
    pub pre_subtractblack_cb: process_step_callback,
    pub pre_scalecolors_cb: process_step_callback,
    pub pre_preinterpolate_cb: process_step_callback,
    pub pre_interpolate_cb: process_step_callback,
    pub interpolate_bayer_cb: process_step_callback,
    pub interpolate_xtrans_cb: process_step_callback,
    pub post_interpolate_cb: process_step_callback,
    pub pre_converttorgb_cb: process_step_callback,
    pub post_converttorgb_cb: process_step_callback,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_callbacks_t"][::core::mem::size_of::<libraw_callbacks_t>() - 136usize];
    ["Alignment of libraw_callbacks_t"][::core::mem::align_of::<libraw_callbacks_t>() - 8usize];
    ["Offset of field: libraw_callbacks_t::data_cb"]
        [::core::mem::offset_of!(libraw_callbacks_t, data_cb) - 0usize];
    ["Offset of field: libraw_callbacks_t::datacb_data"]
        [::core::mem::offset_of!(libraw_callbacks_t, datacb_data) - 8usize];
    ["Offset of field: libraw_callbacks_t::progress_cb"]
        [::core::mem::offset_of!(libraw_callbacks_t, progress_cb) - 16usize];
    ["Offset of field: libraw_callbacks_t::progresscb_data"]
        [::core::mem::offset_of!(libraw_callbacks_t, progresscb_data) - 24usize];
    ["Offset of field: libraw_callbacks_t::exif_cb"]
        [::core::mem::offset_of!(libraw_callbacks_t, exif_cb) - 32usize];
    ["Offset of field: libraw_callbacks_t::exifparser_data"]
        [::core::mem::offset_of!(libraw_callbacks_t, exifparser_data) - 40usize];
    ["Offset of field: libraw_callbacks_t::pre_identify_cb"]
        [::core::mem::offset_of!(libraw_callbacks_t, pre_identify_cb) - 48usize];
    ["Offset of field: libraw_callbacks_t::post_identify_cb"]
        [::core::mem::offset_of!(libraw_callbacks_t, post_identify_cb) - 56usize];
    ["Offset of field: libraw_callbacks_t::pre_subtractblack_cb"]
        [::core::mem::offset_of!(libraw_callbacks_t, pre_subtractblack_cb) - 64usize];
    ["Offset of field: libraw_callbacks_t::pre_scalecolors_cb"]
        [::core::mem::offset_of!(libraw_callbacks_t, pre_scalecolors_cb) - 72usize];
    ["Offset of field: libraw_callbacks_t::pre_preinterpolate_cb"]
        [::core::mem::offset_of!(libraw_callbacks_t, pre_preinterpolate_cb) - 80usize];
    ["Offset of field: libraw_callbacks_t::pre_interpolate_cb"]
        [::core::mem::offset_of!(libraw_callbacks_t, pre_interpolate_cb) - 88usize];
    ["Offset of field: libraw_callbacks_t::interpolate_bayer_cb"]
        [::core::mem::offset_of!(libraw_callbacks_t, interpolate_bayer_cb) - 96usize];
    ["Offset of field: libraw_callbacks_t::interpolate_xtrans_cb"]
        [::core::mem::offset_of!(libraw_callbacks_t, interpolate_xtrans_cb) - 104usize];
    ["Offset of field: libraw_callbacks_t::post_interpolate_cb"]
        [::core::mem::offset_of!(libraw_callbacks_t, post_interpolate_cb) - 112usize];
    ["Offset of field: libraw_callbacks_t::pre_converttorgb_cb"]
        [::core::mem::offset_of!(libraw_callbacks_t, pre_converttorgb_cb) - 120usize];
    ["Offset of field: libraw_callbacks_t::post_converttorgb_cb"]
        [::core::mem::offset_of!(libraw_callbacks_t, post_converttorgb_cb) - 128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_processed_image_t {
    pub type_: LibRaw_image_formats,
    pub height: ushort,
    pub width: ushort,
    pub colors: ushort,
    pub bits: ushort,
    pub data_size: libc::c_uint,
    pub data: [libc::c_uchar; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_processed_image_t"]
        [::core::mem::size_of::<libraw_processed_image_t>() - 20usize];
    ["Alignment of libraw_processed_image_t"]
        [::core::mem::align_of::<libraw_processed_image_t>() - 4usize];
    ["Offset of field: libraw_processed_image_t::type_"]
        [::core::mem::offset_of!(libraw_processed_image_t, type_) - 0usize];
    ["Offset of field: libraw_processed_image_t::height"]
        [::core::mem::offset_of!(libraw_processed_image_t, height) - 4usize];
    ["Offset of field: libraw_processed_image_t::width"]
        [::core::mem::offset_of!(libraw_processed_image_t, width) - 6usize];
    ["Offset of field: libraw_processed_image_t::colors"]
        [::core::mem::offset_of!(libraw_processed_image_t, colors) - 8usize];
    ["Offset of field: libraw_processed_image_t::bits"]
        [::core::mem::offset_of!(libraw_processed_image_t, bits) - 10usize];
    ["Offset of field: libraw_processed_image_t::data_size"]
        [::core::mem::offset_of!(libraw_processed_image_t, data_size) - 12usize];
    ["Offset of field: libraw_processed_image_t::data"]
        [::core::mem::offset_of!(libraw_processed_image_t, data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_iparams_t {
    pub guard: [libc::c_char; 4usize],
    pub make: [libc::c_char; 64usize],
    pub model: [libc::c_char; 64usize],
    pub software: [libc::c_char; 64usize],
    pub normalized_make: [libc::c_char; 64usize],
    pub normalized_model: [libc::c_char; 64usize],
    pub maker_index: libc::c_uint,
    pub raw_count: libc::c_uint,
    pub dng_version: libc::c_uint,
    pub is_foveon: libc::c_uint,
    pub colors: libc::c_int,
    pub filters: libc::c_uint,
    pub xtrans: [[libc::c_char; 6usize]; 6usize],
    pub xtrans_abs: [[libc::c_char; 6usize]; 6usize],
    pub cdesc: [libc::c_char; 5usize],
    pub xmplen: libc::c_uint,
    pub xmpdata: *mut libc::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_iparams_t"][::core::mem::size_of::<libraw_iparams_t>() - 440usize];
    ["Alignment of libraw_iparams_t"][::core::mem::align_of::<libraw_iparams_t>() - 8usize];
    ["Offset of field: libraw_iparams_t::guard"]
        [::core::mem::offset_of!(libraw_iparams_t, guard) - 0usize];
    ["Offset of field: libraw_iparams_t::make"]
        [::core::mem::offset_of!(libraw_iparams_t, make) - 4usize];
    ["Offset of field: libraw_iparams_t::model"]
        [::core::mem::offset_of!(libraw_iparams_t, model) - 68usize];
    ["Offset of field: libraw_iparams_t::software"]
        [::core::mem::offset_of!(libraw_iparams_t, software) - 132usize];
    ["Offset of field: libraw_iparams_t::normalized_make"]
        [::core::mem::offset_of!(libraw_iparams_t, normalized_make) - 196usize];
    ["Offset of field: libraw_iparams_t::normalized_model"]
        [::core::mem::offset_of!(libraw_iparams_t, normalized_model) - 260usize];
    ["Offset of field: libraw_iparams_t::maker_index"]
        [::core::mem::offset_of!(libraw_iparams_t, maker_index) - 324usize];
    ["Offset of field: libraw_iparams_t::raw_count"]
        [::core::mem::offset_of!(libraw_iparams_t, raw_count) - 328usize];
    ["Offset of field: libraw_iparams_t::dng_version"]
        [::core::mem::offset_of!(libraw_iparams_t, dng_version) - 332usize];
    ["Offset of field: libraw_iparams_t::is_foveon"]
        [::core::mem::offset_of!(libraw_iparams_t, is_foveon) - 336usize];
    ["Offset of field: libraw_iparams_t::colors"]
        [::core::mem::offset_of!(libraw_iparams_t, colors) - 340usize];
    ["Offset of field: libraw_iparams_t::filters"]
        [::core::mem::offset_of!(libraw_iparams_t, filters) - 344usize];
    ["Offset of field: libraw_iparams_t::xtrans"]
        [::core::mem::offset_of!(libraw_iparams_t, xtrans) - 348usize];
    ["Offset of field: libraw_iparams_t::xtrans_abs"]
        [::core::mem::offset_of!(libraw_iparams_t, xtrans_abs) - 384usize];
    ["Offset of field: libraw_iparams_t::cdesc"]
        [::core::mem::offset_of!(libraw_iparams_t, cdesc) - 420usize];
    ["Offset of field: libraw_iparams_t::xmplen"]
        [::core::mem::offset_of!(libraw_iparams_t, xmplen) - 428usize];
    ["Offset of field: libraw_iparams_t::xmpdata"]
        [::core::mem::offset_of!(libraw_iparams_t, xmpdata) - 432usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_raw_inset_crop_t {
    pub cleft: ushort,
    pub ctop: ushort,
    pub cwidth: ushort,
    pub cheight: ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_raw_inset_crop_t"][::core::mem::size_of::<libraw_raw_inset_crop_t>() - 8usize];
    ["Alignment of libraw_raw_inset_crop_t"]
        [::core::mem::align_of::<libraw_raw_inset_crop_t>() - 2usize];
    ["Offset of field: libraw_raw_inset_crop_t::cleft"]
        [::core::mem::offset_of!(libraw_raw_inset_crop_t, cleft) - 0usize];
    ["Offset of field: libraw_raw_inset_crop_t::ctop"]
        [::core::mem::offset_of!(libraw_raw_inset_crop_t, ctop) - 2usize];
    ["Offset of field: libraw_raw_inset_crop_t::cwidth"]
        [::core::mem::offset_of!(libraw_raw_inset_crop_t, cwidth) - 4usize];
    ["Offset of field: libraw_raw_inset_crop_t::cheight"]
        [::core::mem::offset_of!(libraw_raw_inset_crop_t, cheight) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_image_sizes_t {
    pub raw_height: ushort,
    pub raw_width: ushort,
    pub height: ushort,
    pub width: ushort,
    pub top_margin: ushort,
    pub left_margin: ushort,
    pub iheight: ushort,
    pub iwidth: ushort,
    pub raw_pitch: libc::c_uint,
    pub pixel_aspect: f64,
    pub flip: libc::c_int,
    pub mask: [[libc::c_int; 4usize]; 8usize],
    pub raw_aspect: ushort,
    pub raw_inset_crops: [libraw_raw_inset_crop_t; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_image_sizes_t"][::core::mem::size_of::<libraw_image_sizes_t>() - 184usize];
    ["Alignment of libraw_image_sizes_t"][::core::mem::align_of::<libraw_image_sizes_t>() - 8usize];
    ["Offset of field: libraw_image_sizes_t::raw_height"]
        [::core::mem::offset_of!(libraw_image_sizes_t, raw_height) - 0usize];
    ["Offset of field: libraw_image_sizes_t::raw_width"]
        [::core::mem::offset_of!(libraw_image_sizes_t, raw_width) - 2usize];
    ["Offset of field: libraw_image_sizes_t::height"]
        [::core::mem::offset_of!(libraw_image_sizes_t, height) - 4usize];
    ["Offset of field: libraw_image_sizes_t::width"]
        [::core::mem::offset_of!(libraw_image_sizes_t, width) - 6usize];
    ["Offset of field: libraw_image_sizes_t::top_margin"]
        [::core::mem::offset_of!(libraw_image_sizes_t, top_margin) - 8usize];
    ["Offset of field: libraw_image_sizes_t::left_margin"]
        [::core::mem::offset_of!(libraw_image_sizes_t, left_margin) - 10usize];
    ["Offset of field: libraw_image_sizes_t::iheight"]
        [::core::mem::offset_of!(libraw_image_sizes_t, iheight) - 12usize];
    ["Offset of field: libraw_image_sizes_t::iwidth"]
        [::core::mem::offset_of!(libraw_image_sizes_t, iwidth) - 14usize];
    ["Offset of field: libraw_image_sizes_t::raw_pitch"]
        [::core::mem::offset_of!(libraw_image_sizes_t, raw_pitch) - 16usize];
    ["Offset of field: libraw_image_sizes_t::pixel_aspect"]
        [::core::mem::offset_of!(libraw_image_sizes_t, pixel_aspect) - 24usize];
    ["Offset of field: libraw_image_sizes_t::flip"]
        [::core::mem::offset_of!(libraw_image_sizes_t, flip) - 32usize];
    ["Offset of field: libraw_image_sizes_t::mask"]
        [::core::mem::offset_of!(libraw_image_sizes_t, mask) - 36usize];
    ["Offset of field: libraw_image_sizes_t::raw_aspect"]
        [::core::mem::offset_of!(libraw_image_sizes_t, raw_aspect) - 164usize];
    ["Offset of field: libraw_image_sizes_t::raw_inset_crops"]
        [::core::mem::offset_of!(libraw_image_sizes_t, raw_inset_crops) - 166usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_area_t {
    pub t: libc::c_short,
    pub l: libc::c_short,
    pub b: libc::c_short,
    pub r: libc::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_area_t"][::core::mem::size_of::<libraw_area_t>() - 8usize];
    ["Alignment of libraw_area_t"][::core::mem::align_of::<libraw_area_t>() - 2usize];
    ["Offset of field: libraw_area_t::t"][::core::mem::offset_of!(libraw_area_t, t) - 0usize];
    ["Offset of field: libraw_area_t::l"][::core::mem::offset_of!(libraw_area_t, l) - 2usize];
    ["Offset of field: libraw_area_t::b"][::core::mem::offset_of!(libraw_area_t, b) - 4usize];
    ["Offset of field: libraw_area_t::r"][::core::mem::offset_of!(libraw_area_t, r) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ph1_t {
    pub format: libc::c_int,
    pub key_off: libc::c_int,
    pub tag_21a: libc::c_int,
    pub t_black: libc::c_int,
    pub split_col: libc::c_int,
    pub black_col: libc::c_int,
    pub split_row: libc::c_int,
    pub black_row: libc::c_int,
    pub tag_210: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ph1_t"][::core::mem::size_of::<ph1_t>() - 36usize];
    ["Alignment of ph1_t"][::core::mem::align_of::<ph1_t>() - 4usize];
    ["Offset of field: ph1_t::format"][::core::mem::offset_of!(ph1_t, format) - 0usize];
    ["Offset of field: ph1_t::key_off"][::core::mem::offset_of!(ph1_t, key_off) - 4usize];
    ["Offset of field: ph1_t::tag_21a"][::core::mem::offset_of!(ph1_t, tag_21a) - 8usize];
    ["Offset of field: ph1_t::t_black"][::core::mem::offset_of!(ph1_t, t_black) - 12usize];
    ["Offset of field: ph1_t::split_col"][::core::mem::offset_of!(ph1_t, split_col) - 16usize];
    ["Offset of field: ph1_t::black_col"][::core::mem::offset_of!(ph1_t, black_col) - 20usize];
    ["Offset of field: ph1_t::split_row"][::core::mem::offset_of!(ph1_t, split_row) - 24usize];
    ["Offset of field: ph1_t::black_row"][::core::mem::offset_of!(ph1_t, black_row) - 28usize];
    ["Offset of field: ph1_t::tag_210"][::core::mem::offset_of!(ph1_t, tag_210) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_dng_color_t {
    pub parsedfields: libc::c_uint,
    pub illuminant: ushort,
    pub calibration: [[f32; 4usize]; 4usize],
    pub colormatrix: [[f32; 3usize]; 4usize],
    pub forwardmatrix: [[f32; 4usize]; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_dng_color_t"][::core::mem::size_of::<libraw_dng_color_t>() - 168usize];
    ["Alignment of libraw_dng_color_t"][::core::mem::align_of::<libraw_dng_color_t>() - 4usize];
    ["Offset of field: libraw_dng_color_t::parsedfields"]
        [::core::mem::offset_of!(libraw_dng_color_t, parsedfields) - 0usize];
    ["Offset of field: libraw_dng_color_t::illuminant"]
        [::core::mem::offset_of!(libraw_dng_color_t, illuminant) - 4usize];
    ["Offset of field: libraw_dng_color_t::calibration"]
        [::core::mem::offset_of!(libraw_dng_color_t, calibration) - 8usize];
    ["Offset of field: libraw_dng_color_t::colormatrix"]
        [::core::mem::offset_of!(libraw_dng_color_t, colormatrix) - 72usize];
    ["Offset of field: libraw_dng_color_t::forwardmatrix"]
        [::core::mem::offset_of!(libraw_dng_color_t, forwardmatrix) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_dng_levels_t {
    pub parsedfields: libc::c_uint,
    pub dng_cblack: [libc::c_uint; 4104usize],
    pub dng_black: libc::c_uint,
    pub dng_fcblack: [f32; 4104usize],
    pub dng_fblack: f32,
    pub dng_whitelevel: [libc::c_uint; 4usize],
    pub default_crop: [ushort; 4usize],
    pub user_crop: [f32; 4usize],
    pub preview_colorspace: libc::c_uint,
    pub analogbalance: [f32; 4usize],
    pub asshotneutral: [f32; 4usize],
    pub baseline_exposure: f32,
    pub LinearResponseLimit: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_dng_levels_t"][::core::mem::size_of::<libraw_dng_levels_t>() - 32928usize];
    ["Alignment of libraw_dng_levels_t"][::core::mem::align_of::<libraw_dng_levels_t>() - 4usize];
    ["Offset of field: libraw_dng_levels_t::parsedfields"]
        [::core::mem::offset_of!(libraw_dng_levels_t, parsedfields) - 0usize];
    ["Offset of field: libraw_dng_levels_t::dng_cblack"]
        [::core::mem::offset_of!(libraw_dng_levels_t, dng_cblack) - 4usize];
    ["Offset of field: libraw_dng_levels_t::dng_black"]
        [::core::mem::offset_of!(libraw_dng_levels_t, dng_black) - 16420usize];
    ["Offset of field: libraw_dng_levels_t::dng_fcblack"]
        [::core::mem::offset_of!(libraw_dng_levels_t, dng_fcblack) - 16424usize];
    ["Offset of field: libraw_dng_levels_t::dng_fblack"]
        [::core::mem::offset_of!(libraw_dng_levels_t, dng_fblack) - 32840usize];
    ["Offset of field: libraw_dng_levels_t::dng_whitelevel"]
        [::core::mem::offset_of!(libraw_dng_levels_t, dng_whitelevel) - 32844usize];
    ["Offset of field: libraw_dng_levels_t::default_crop"]
        [::core::mem::offset_of!(libraw_dng_levels_t, default_crop) - 32860usize];
    ["Offset of field: libraw_dng_levels_t::user_crop"]
        [::core::mem::offset_of!(libraw_dng_levels_t, user_crop) - 32868usize];
    ["Offset of field: libraw_dng_levels_t::preview_colorspace"]
        [::core::mem::offset_of!(libraw_dng_levels_t, preview_colorspace) - 32884usize];
    ["Offset of field: libraw_dng_levels_t::analogbalance"]
        [::core::mem::offset_of!(libraw_dng_levels_t, analogbalance) - 32888usize];
    ["Offset of field: libraw_dng_levels_t::asshotneutral"]
        [::core::mem::offset_of!(libraw_dng_levels_t, asshotneutral) - 32904usize];
    ["Offset of field: libraw_dng_levels_t::baseline_exposure"]
        [::core::mem::offset_of!(libraw_dng_levels_t, baseline_exposure) - 32920usize];
    ["Offset of field: libraw_dng_levels_t::LinearResponseLimit"]
        [::core::mem::offset_of!(libraw_dng_levels_t, LinearResponseLimit) - 32924usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_P1_color_t {
    pub romm_cam: [f32; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_P1_color_t"][::core::mem::size_of::<libraw_P1_color_t>() - 36usize];
    ["Alignment of libraw_P1_color_t"][::core::mem::align_of::<libraw_P1_color_t>() - 4usize];
    ["Offset of field: libraw_P1_color_t::romm_cam"]
        [::core::mem::offset_of!(libraw_P1_color_t, romm_cam) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_canon_makernotes_t {
    pub ColorDataVer: libc::c_int,
    pub ColorDataSubVer: libc::c_int,
    pub SpecularWhiteLevel: libc::c_int,
    pub NormalWhiteLevel: libc::c_int,
    pub ChannelBlackLevel: [libc::c_int; 4usize],
    pub AverageBlackLevel: libc::c_int,
    pub multishot: [libc::c_uint; 4usize],
    pub MeteringMode: libc::c_short,
    pub SpotMeteringMode: libc::c_short,
    pub FlashMeteringMode: uchar,
    pub FlashExposureLock: libc::c_short,
    pub ExposureMode: libc::c_short,
    pub AESetting: libc::c_short,
    pub ImageStabilization: libc::c_short,
    pub FlashMode: libc::c_short,
    pub FlashActivity: libc::c_short,
    pub FlashBits: libc::c_short,
    pub ManualFlashOutput: libc::c_short,
    pub FlashOutput: libc::c_short,
    pub FlashGuideNumber: libc::c_short,
    pub ContinuousDrive: libc::c_short,
    pub SensorWidth: libc::c_short,
    pub SensorHeight: libc::c_short,
    pub AFMicroAdjMode: libc::c_int,
    pub AFMicroAdjValue: f32,
    pub MakernotesFlip: libc::c_short,
    pub RecordMode: libc::c_short,
    pub SRAWQuality: libc::c_short,
    pub wbi: libc::c_uint,
    pub RF_lensID: libc::c_short,
    pub AutoLightingOptimizer: libc::c_int,
    pub HighlightTonePriority: libc::c_int,
    pub Quality: libc::c_short,
    pub CanonLog: libc::c_int,
    pub DefaultCropAbsolute: libraw_area_t,
    pub RecommendedImageArea: libraw_area_t,
    pub LeftOpticalBlack: libraw_area_t,
    pub UpperOpticalBlack: libraw_area_t,
    pub ActiveArea: libraw_area_t,
    pub ISOgain: [libc::c_short; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_canon_makernotes_t"]
        [::core::mem::size_of::<libraw_canon_makernotes_t>() - 168usize];
    ["Alignment of libraw_canon_makernotes_t"]
        [::core::mem::align_of::<libraw_canon_makernotes_t>() - 4usize];
    ["Offset of field: libraw_canon_makernotes_t::ColorDataVer"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, ColorDataVer) - 0usize];
    ["Offset of field: libraw_canon_makernotes_t::ColorDataSubVer"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, ColorDataSubVer) - 4usize];
    ["Offset of field: libraw_canon_makernotes_t::SpecularWhiteLevel"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, SpecularWhiteLevel) - 8usize];
    ["Offset of field: libraw_canon_makernotes_t::NormalWhiteLevel"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, NormalWhiteLevel) - 12usize];
    ["Offset of field: libraw_canon_makernotes_t::ChannelBlackLevel"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, ChannelBlackLevel) - 16usize];
    ["Offset of field: libraw_canon_makernotes_t::AverageBlackLevel"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, AverageBlackLevel) - 32usize];
    ["Offset of field: libraw_canon_makernotes_t::multishot"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, multishot) - 36usize];
    ["Offset of field: libraw_canon_makernotes_t::MeteringMode"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, MeteringMode) - 52usize];
    ["Offset of field: libraw_canon_makernotes_t::SpotMeteringMode"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, SpotMeteringMode) - 54usize];
    ["Offset of field: libraw_canon_makernotes_t::FlashMeteringMode"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, FlashMeteringMode) - 56usize];
    ["Offset of field: libraw_canon_makernotes_t::FlashExposureLock"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, FlashExposureLock) - 58usize];
    ["Offset of field: libraw_canon_makernotes_t::ExposureMode"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, ExposureMode) - 60usize];
    ["Offset of field: libraw_canon_makernotes_t::AESetting"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, AESetting) - 62usize];
    ["Offset of field: libraw_canon_makernotes_t::ImageStabilization"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, ImageStabilization) - 64usize];
    ["Offset of field: libraw_canon_makernotes_t::FlashMode"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, FlashMode) - 66usize];
    ["Offset of field: libraw_canon_makernotes_t::FlashActivity"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, FlashActivity) - 68usize];
    ["Offset of field: libraw_canon_makernotes_t::FlashBits"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, FlashBits) - 70usize];
    ["Offset of field: libraw_canon_makernotes_t::ManualFlashOutput"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, ManualFlashOutput) - 72usize];
    ["Offset of field: libraw_canon_makernotes_t::FlashOutput"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, FlashOutput) - 74usize];
    ["Offset of field: libraw_canon_makernotes_t::FlashGuideNumber"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, FlashGuideNumber) - 76usize];
    ["Offset of field: libraw_canon_makernotes_t::ContinuousDrive"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, ContinuousDrive) - 78usize];
    ["Offset of field: libraw_canon_makernotes_t::SensorWidth"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, SensorWidth) - 80usize];
    ["Offset of field: libraw_canon_makernotes_t::SensorHeight"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, SensorHeight) - 82usize];
    ["Offset of field: libraw_canon_makernotes_t::AFMicroAdjMode"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, AFMicroAdjMode) - 84usize];
    ["Offset of field: libraw_canon_makernotes_t::AFMicroAdjValue"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, AFMicroAdjValue) - 88usize];
    ["Offset of field: libraw_canon_makernotes_t::MakernotesFlip"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, MakernotesFlip) - 92usize];
    ["Offset of field: libraw_canon_makernotes_t::RecordMode"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, RecordMode) - 94usize];
    ["Offset of field: libraw_canon_makernotes_t::SRAWQuality"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, SRAWQuality) - 96usize];
    ["Offset of field: libraw_canon_makernotes_t::wbi"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, wbi) - 100usize];
    ["Offset of field: libraw_canon_makernotes_t::RF_lensID"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, RF_lensID) - 104usize];
    ["Offset of field: libraw_canon_makernotes_t::AutoLightingOptimizer"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, AutoLightingOptimizer) - 108usize];
    ["Offset of field: libraw_canon_makernotes_t::HighlightTonePriority"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, HighlightTonePriority) - 112usize];
    ["Offset of field: libraw_canon_makernotes_t::Quality"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, Quality) - 116usize];
    ["Offset of field: libraw_canon_makernotes_t::CanonLog"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, CanonLog) - 120usize];
    ["Offset of field: libraw_canon_makernotes_t::DefaultCropAbsolute"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, DefaultCropAbsolute) - 124usize];
    ["Offset of field: libraw_canon_makernotes_t::RecommendedImageArea"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, RecommendedImageArea) - 132usize];
    ["Offset of field: libraw_canon_makernotes_t::LeftOpticalBlack"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, LeftOpticalBlack) - 140usize];
    ["Offset of field: libraw_canon_makernotes_t::UpperOpticalBlack"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, UpperOpticalBlack) - 148usize];
    ["Offset of field: libraw_canon_makernotes_t::ActiveArea"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, ActiveArea) - 156usize];
    ["Offset of field: libraw_canon_makernotes_t::ISOgain"]
        [::core::mem::offset_of!(libraw_canon_makernotes_t, ISOgain) - 164usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_hasselblad_makernotes_t {
    pub BaseISO: libc::c_int,
    pub Gain: f64,
    pub Sensor: [libc::c_char; 8usize],
    pub SensorUnit: [libc::c_char; 64usize],
    pub HostBody: [libc::c_char; 64usize],
    pub SensorCode: libc::c_int,
    pub SensorSubCode: libc::c_int,
    pub CoatingCode: libc::c_int,
    pub uncropped: libc::c_int,
    pub CaptureSequenceInitiator: [libc::c_char; 32usize],
    pub SensorUnitConnector: [libc::c_char; 64usize],
    pub format: libc::c_int,
    pub nIFD_CM: [libc::c_int; 2usize],
    pub RecommendedCrop: [libc::c_int; 2usize],
    pub mnColorMatrix: [[f64; 3usize]; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_hasselblad_makernotes_t"]
        [::core::mem::size_of::<libraw_hasselblad_makernotes_t>() - 384usize];
    ["Alignment of libraw_hasselblad_makernotes_t"]
        [::core::mem::align_of::<libraw_hasselblad_makernotes_t>() - 8usize];
    ["Offset of field: libraw_hasselblad_makernotes_t::BaseISO"]
        [::core::mem::offset_of!(libraw_hasselblad_makernotes_t, BaseISO) - 0usize];
    ["Offset of field: libraw_hasselblad_makernotes_t::Gain"]
        [::core::mem::offset_of!(libraw_hasselblad_makernotes_t, Gain) - 8usize];
    ["Offset of field: libraw_hasselblad_makernotes_t::Sensor"]
        [::core::mem::offset_of!(libraw_hasselblad_makernotes_t, Sensor) - 16usize];
    ["Offset of field: libraw_hasselblad_makernotes_t::SensorUnit"]
        [::core::mem::offset_of!(libraw_hasselblad_makernotes_t, SensorUnit) - 24usize];
    ["Offset of field: libraw_hasselblad_makernotes_t::HostBody"]
        [::core::mem::offset_of!(libraw_hasselblad_makernotes_t, HostBody) - 88usize];
    ["Offset of field: libraw_hasselblad_makernotes_t::SensorCode"]
        [::core::mem::offset_of!(libraw_hasselblad_makernotes_t, SensorCode) - 152usize];
    ["Offset of field: libraw_hasselblad_makernotes_t::SensorSubCode"]
        [::core::mem::offset_of!(libraw_hasselblad_makernotes_t, SensorSubCode) - 156usize];
    ["Offset of field: libraw_hasselblad_makernotes_t::CoatingCode"]
        [::core::mem::offset_of!(libraw_hasselblad_makernotes_t, CoatingCode) - 160usize];
    ["Offset of field: libraw_hasselblad_makernotes_t::uncropped"]
        [::core::mem::offset_of!(libraw_hasselblad_makernotes_t, uncropped) - 164usize];
    ["Offset of field: libraw_hasselblad_makernotes_t::CaptureSequenceInitiator"][::core::mem::offset_of!(
        libraw_hasselblad_makernotes_t,
        CaptureSequenceInitiator
    ) - 168usize];
    ["Offset of field: libraw_hasselblad_makernotes_t::SensorUnitConnector"]
        [::core::mem::offset_of!(libraw_hasselblad_makernotes_t, SensorUnitConnector) - 200usize];
    ["Offset of field: libraw_hasselblad_makernotes_t::format"]
        [::core::mem::offset_of!(libraw_hasselblad_makernotes_t, format) - 264usize];
    ["Offset of field: libraw_hasselblad_makernotes_t::nIFD_CM"]
        [::core::mem::offset_of!(libraw_hasselblad_makernotes_t, nIFD_CM) - 268usize];
    ["Offset of field: libraw_hasselblad_makernotes_t::RecommendedCrop"]
        [::core::mem::offset_of!(libraw_hasselblad_makernotes_t, RecommendedCrop) - 276usize];
    ["Offset of field: libraw_hasselblad_makernotes_t::mnColorMatrix"]
        [::core::mem::offset_of!(libraw_hasselblad_makernotes_t, mnColorMatrix) - 288usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_fuji_info_t {
    pub ExpoMidPointShift: f32,
    pub DynamicRange: ushort,
    pub FilmMode: ushort,
    pub DynamicRangeSetting: ushort,
    pub DevelopmentDynamicRange: ushort,
    pub AutoDynamicRange: ushort,
    pub DRangePriority: ushort,
    pub DRangePriorityAuto: ushort,
    pub DRangePriorityFixed: ushort,
    pub BrightnessCompensation: f32,
    pub FocusMode: ushort,
    pub AFMode: ushort,
    pub FocusPixel: [ushort; 2usize],
    pub PrioritySettings: ushort,
    pub FocusSettings: libc::c_uint,
    pub AF_C_Settings: libc::c_uint,
    pub FocusWarning: ushort,
    pub ImageStabilization: [ushort; 3usize],
    pub FlashMode: ushort,
    pub WB_Preset: ushort,
    pub ShutterType: ushort,
    pub ExrMode: ushort,
    pub Macro: ushort,
    pub Rating: libc::c_uint,
    pub CropMode: ushort,
    pub SerialSignature: [libc::c_char; 13usize],
    pub SensorID: [libc::c_char; 5usize],
    pub RAFVersion: [libc::c_char; 5usize],
    pub RAFDataGeneration: libc::c_int,
    pub RAFDataVersion: ushort,
    pub isTSNERDTS: libc::c_int,
    pub DriveMode: libc::c_short,
    pub BlackLevel: [ushort; 9usize],
    pub RAFData_ImageSizeTable: [libc::c_uint; 32usize],
    pub AutoBracketing: libc::c_int,
    pub SequenceNumber: libc::c_int,
    pub SeriesLength: libc::c_int,
    pub PixelShiftOffset: [f32; 2usize],
    pub ImageCount: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_fuji_info_t"][::core::mem::size_of::<libraw_fuji_info_t>() - 280usize];
    ["Alignment of libraw_fuji_info_t"][::core::mem::align_of::<libraw_fuji_info_t>() - 4usize];
    ["Offset of field: libraw_fuji_info_t::ExpoMidPointShift"]
        [::core::mem::offset_of!(libraw_fuji_info_t, ExpoMidPointShift) - 0usize];
    ["Offset of field: libraw_fuji_info_t::DynamicRange"]
        [::core::mem::offset_of!(libraw_fuji_info_t, DynamicRange) - 4usize];
    ["Offset of field: libraw_fuji_info_t::FilmMode"]
        [::core::mem::offset_of!(libraw_fuji_info_t, FilmMode) - 6usize];
    ["Offset of field: libraw_fuji_info_t::DynamicRangeSetting"]
        [::core::mem::offset_of!(libraw_fuji_info_t, DynamicRangeSetting) - 8usize];
    ["Offset of field: libraw_fuji_info_t::DevelopmentDynamicRange"]
        [::core::mem::offset_of!(libraw_fuji_info_t, DevelopmentDynamicRange) - 10usize];
    ["Offset of field: libraw_fuji_info_t::AutoDynamicRange"]
        [::core::mem::offset_of!(libraw_fuji_info_t, AutoDynamicRange) - 12usize];
    ["Offset of field: libraw_fuji_info_t::DRangePriority"]
        [::core::mem::offset_of!(libraw_fuji_info_t, DRangePriority) - 14usize];
    ["Offset of field: libraw_fuji_info_t::DRangePriorityAuto"]
        [::core::mem::offset_of!(libraw_fuji_info_t, DRangePriorityAuto) - 16usize];
    ["Offset of field: libraw_fuji_info_t::DRangePriorityFixed"]
        [::core::mem::offset_of!(libraw_fuji_info_t, DRangePriorityFixed) - 18usize];
    ["Offset of field: libraw_fuji_info_t::BrightnessCompensation"]
        [::core::mem::offset_of!(libraw_fuji_info_t, BrightnessCompensation) - 20usize];
    ["Offset of field: libraw_fuji_info_t::FocusMode"]
        [::core::mem::offset_of!(libraw_fuji_info_t, FocusMode) - 24usize];
    ["Offset of field: libraw_fuji_info_t::AFMode"]
        [::core::mem::offset_of!(libraw_fuji_info_t, AFMode) - 26usize];
    ["Offset of field: libraw_fuji_info_t::FocusPixel"]
        [::core::mem::offset_of!(libraw_fuji_info_t, FocusPixel) - 28usize];
    ["Offset of field: libraw_fuji_info_t::PrioritySettings"]
        [::core::mem::offset_of!(libraw_fuji_info_t, PrioritySettings) - 32usize];
    ["Offset of field: libraw_fuji_info_t::FocusSettings"]
        [::core::mem::offset_of!(libraw_fuji_info_t, FocusSettings) - 36usize];
    ["Offset of field: libraw_fuji_info_t::AF_C_Settings"]
        [::core::mem::offset_of!(libraw_fuji_info_t, AF_C_Settings) - 40usize];
    ["Offset of field: libraw_fuji_info_t::FocusWarning"]
        [::core::mem::offset_of!(libraw_fuji_info_t, FocusWarning) - 44usize];
    ["Offset of field: libraw_fuji_info_t::ImageStabilization"]
        [::core::mem::offset_of!(libraw_fuji_info_t, ImageStabilization) - 46usize];
    ["Offset of field: libraw_fuji_info_t::FlashMode"]
        [::core::mem::offset_of!(libraw_fuji_info_t, FlashMode) - 52usize];
    ["Offset of field: libraw_fuji_info_t::WB_Preset"]
        [::core::mem::offset_of!(libraw_fuji_info_t, WB_Preset) - 54usize];
    ["Offset of field: libraw_fuji_info_t::ShutterType"]
        [::core::mem::offset_of!(libraw_fuji_info_t, ShutterType) - 56usize];
    ["Offset of field: libraw_fuji_info_t::ExrMode"]
        [::core::mem::offset_of!(libraw_fuji_info_t, ExrMode) - 58usize];
    ["Offset of field: libraw_fuji_info_t::Macro"]
        [::core::mem::offset_of!(libraw_fuji_info_t, Macro) - 60usize];
    ["Offset of field: libraw_fuji_info_t::Rating"]
        [::core::mem::offset_of!(libraw_fuji_info_t, Rating) - 64usize];
    ["Offset of field: libraw_fuji_info_t::CropMode"]
        [::core::mem::offset_of!(libraw_fuji_info_t, CropMode) - 68usize];
    ["Offset of field: libraw_fuji_info_t::SerialSignature"]
        [::core::mem::offset_of!(libraw_fuji_info_t, SerialSignature) - 70usize];
    ["Offset of field: libraw_fuji_info_t::SensorID"]
        [::core::mem::offset_of!(libraw_fuji_info_t, SensorID) - 83usize];
    ["Offset of field: libraw_fuji_info_t::RAFVersion"]
        [::core::mem::offset_of!(libraw_fuji_info_t, RAFVersion) - 88usize];
    ["Offset of field: libraw_fuji_info_t::RAFDataGeneration"]
        [::core::mem::offset_of!(libraw_fuji_info_t, RAFDataGeneration) - 96usize];
    ["Offset of field: libraw_fuji_info_t::RAFDataVersion"]
        [::core::mem::offset_of!(libraw_fuji_info_t, RAFDataVersion) - 100usize];
    ["Offset of field: libraw_fuji_info_t::isTSNERDTS"]
        [::core::mem::offset_of!(libraw_fuji_info_t, isTSNERDTS) - 104usize];
    ["Offset of field: libraw_fuji_info_t::DriveMode"]
        [::core::mem::offset_of!(libraw_fuji_info_t, DriveMode) - 108usize];
    ["Offset of field: libraw_fuji_info_t::BlackLevel"]
        [::core::mem::offset_of!(libraw_fuji_info_t, BlackLevel) - 110usize];
    ["Offset of field: libraw_fuji_info_t::RAFData_ImageSizeTable"]
        [::core::mem::offset_of!(libraw_fuji_info_t, RAFData_ImageSizeTable) - 128usize];
    ["Offset of field: libraw_fuji_info_t::AutoBracketing"]
        [::core::mem::offset_of!(libraw_fuji_info_t, AutoBracketing) - 256usize];
    ["Offset of field: libraw_fuji_info_t::SequenceNumber"]
        [::core::mem::offset_of!(libraw_fuji_info_t, SequenceNumber) - 260usize];
    ["Offset of field: libraw_fuji_info_t::SeriesLength"]
        [::core::mem::offset_of!(libraw_fuji_info_t, SeriesLength) - 264usize];
    ["Offset of field: libraw_fuji_info_t::PixelShiftOffset"]
        [::core::mem::offset_of!(libraw_fuji_info_t, PixelShiftOffset) - 268usize];
    ["Offset of field: libraw_fuji_info_t::ImageCount"]
        [::core::mem::offset_of!(libraw_fuji_info_t, ImageCount) - 276usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_sensor_highspeed_crop_t {
    pub cleft: ushort,
    pub ctop: ushort,
    pub cwidth: ushort,
    pub cheight: ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_sensor_highspeed_crop_t"]
        [::core::mem::size_of::<libraw_sensor_highspeed_crop_t>() - 8usize];
    ["Alignment of libraw_sensor_highspeed_crop_t"]
        [::core::mem::align_of::<libraw_sensor_highspeed_crop_t>() - 2usize];
    ["Offset of field: libraw_sensor_highspeed_crop_t::cleft"]
        [::core::mem::offset_of!(libraw_sensor_highspeed_crop_t, cleft) - 0usize];
    ["Offset of field: libraw_sensor_highspeed_crop_t::ctop"]
        [::core::mem::offset_of!(libraw_sensor_highspeed_crop_t, ctop) - 2usize];
    ["Offset of field: libraw_sensor_highspeed_crop_t::cwidth"]
        [::core::mem::offset_of!(libraw_sensor_highspeed_crop_t, cwidth) - 4usize];
    ["Offset of field: libraw_sensor_highspeed_crop_t::cheight"]
        [::core::mem::offset_of!(libraw_sensor_highspeed_crop_t, cheight) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_nikon_makernotes_t {
    pub ExposureBracketValue: f64,
    pub ActiveDLighting: ushort,
    pub ShootingMode: ushort,
    pub ImageStabilization: [uchar; 7usize],
    pub VibrationReduction: uchar,
    pub VRMode: uchar,
    pub FlashSetting: [libc::c_char; 13usize],
    pub FlashType: [libc::c_char; 20usize],
    pub FlashExposureCompensation: [uchar; 4usize],
    pub ExternalFlashExposureComp: [uchar; 4usize],
    pub FlashExposureBracketValue: [uchar; 4usize],
    pub FlashMode: uchar,
    pub FlashExposureCompensation2: libc::c_schar,
    pub FlashExposureCompensation3: libc::c_schar,
    pub FlashExposureCompensation4: libc::c_schar,
    pub FlashSource: uchar,
    pub FlashFirmware: [uchar; 2usize],
    pub ExternalFlashFlags: uchar,
    pub FlashControlCommanderMode: uchar,
    pub FlashOutputAndCompensation: uchar,
    pub FlashFocalLength: uchar,
    pub FlashGNDistance: uchar,
    pub FlashGroupControlMode: [uchar; 4usize],
    pub FlashGroupOutputAndCompensation: [uchar; 4usize],
    pub FlashColorFilter: uchar,
    pub NEFCompression: ushort,
    pub ExposureMode: libc::c_int,
    pub ExposureProgram: libc::c_int,
    pub nMEshots: libc::c_int,
    pub MEgainOn: libc::c_int,
    pub ME_WB: [f64; 4usize],
    pub AFFineTune: uchar,
    pub AFFineTuneIndex: uchar,
    pub AFFineTuneAdj: i8,
    pub LensDataVersion: libc::c_uint,
    pub FlashInfoVersion: libc::c_uint,
    pub ColorBalanceVersion: libc::c_uint,
    pub key: uchar,
    pub NEFBitDepth: [ushort; 4usize],
    pub HighSpeedCropFormat: ushort,
    pub SensorHighSpeedCrop: libraw_sensor_highspeed_crop_t,
    pub SensorWidth: ushort,
    pub SensorHeight: ushort,
    pub Active_D_Lighting: ushort,
    pub ShotInfoVersion: libc::c_uint,
    pub MakernotesFlip: libc::c_short,
    pub RollAngle: f64,
    pub PitchAngle: f64,
    pub YawAngle: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_nikon_makernotes_t"]
        [::core::mem::size_of::<libraw_nikon_makernotes_t>() - 224usize];
    ["Alignment of libraw_nikon_makernotes_t"]
        [::core::mem::align_of::<libraw_nikon_makernotes_t>() - 8usize];
    ["Offset of field: libraw_nikon_makernotes_t::ExposureBracketValue"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, ExposureBracketValue) - 0usize];
    ["Offset of field: libraw_nikon_makernotes_t::ActiveDLighting"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, ActiveDLighting) - 8usize];
    ["Offset of field: libraw_nikon_makernotes_t::ShootingMode"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, ShootingMode) - 10usize];
    ["Offset of field: libraw_nikon_makernotes_t::ImageStabilization"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, ImageStabilization) - 12usize];
    ["Offset of field: libraw_nikon_makernotes_t::VibrationReduction"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, VibrationReduction) - 19usize];
    ["Offset of field: libraw_nikon_makernotes_t::VRMode"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, VRMode) - 20usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashSetting"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashSetting) - 21usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashType"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashType) - 34usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashExposureCompensation"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashExposureCompensation) - 54usize];
    ["Offset of field: libraw_nikon_makernotes_t::ExternalFlashExposureComp"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, ExternalFlashExposureComp) - 58usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashExposureBracketValue"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashExposureBracketValue) - 62usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashMode"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashMode) - 66usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashExposureCompensation2"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashExposureCompensation2) - 67usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashExposureCompensation3"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashExposureCompensation3) - 68usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashExposureCompensation4"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashExposureCompensation4) - 69usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashSource"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashSource) - 70usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashFirmware"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashFirmware) - 71usize];
    ["Offset of field: libraw_nikon_makernotes_t::ExternalFlashFlags"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, ExternalFlashFlags) - 73usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashControlCommanderMode"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashControlCommanderMode) - 74usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashOutputAndCompensation"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashOutputAndCompensation) - 75usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashFocalLength"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashFocalLength) - 76usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashGNDistance"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashGNDistance) - 77usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashGroupControlMode"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashGroupControlMode) - 78usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashGroupOutputAndCompensation"][::core::mem::offset_of!(
        libraw_nikon_makernotes_t,
        FlashGroupOutputAndCompensation
    ) - 82usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashColorFilter"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashColorFilter) - 86usize];
    ["Offset of field: libraw_nikon_makernotes_t::NEFCompression"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, NEFCompression) - 88usize];
    ["Offset of field: libraw_nikon_makernotes_t::ExposureMode"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, ExposureMode) - 92usize];
    ["Offset of field: libraw_nikon_makernotes_t::ExposureProgram"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, ExposureProgram) - 96usize];
    ["Offset of field: libraw_nikon_makernotes_t::nMEshots"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, nMEshots) - 100usize];
    ["Offset of field: libraw_nikon_makernotes_t::MEgainOn"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, MEgainOn) - 104usize];
    ["Offset of field: libraw_nikon_makernotes_t::ME_WB"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, ME_WB) - 112usize];
    ["Offset of field: libraw_nikon_makernotes_t::AFFineTune"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, AFFineTune) - 144usize];
    ["Offset of field: libraw_nikon_makernotes_t::AFFineTuneIndex"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, AFFineTuneIndex) - 145usize];
    ["Offset of field: libraw_nikon_makernotes_t::AFFineTuneAdj"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, AFFineTuneAdj) - 146usize];
    ["Offset of field: libraw_nikon_makernotes_t::LensDataVersion"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, LensDataVersion) - 148usize];
    ["Offset of field: libraw_nikon_makernotes_t::FlashInfoVersion"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, FlashInfoVersion) - 152usize];
    ["Offset of field: libraw_nikon_makernotes_t::ColorBalanceVersion"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, ColorBalanceVersion) - 156usize];
    ["Offset of field: libraw_nikon_makernotes_t::key"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, key) - 160usize];
    ["Offset of field: libraw_nikon_makernotes_t::NEFBitDepth"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, NEFBitDepth) - 162usize];
    ["Offset of field: libraw_nikon_makernotes_t::HighSpeedCropFormat"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, HighSpeedCropFormat) - 170usize];
    ["Offset of field: libraw_nikon_makernotes_t::SensorHighSpeedCrop"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, SensorHighSpeedCrop) - 172usize];
    ["Offset of field: libraw_nikon_makernotes_t::SensorWidth"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, SensorWidth) - 180usize];
    ["Offset of field: libraw_nikon_makernotes_t::SensorHeight"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, SensorHeight) - 182usize];
    ["Offset of field: libraw_nikon_makernotes_t::Active_D_Lighting"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, Active_D_Lighting) - 184usize];
    ["Offset of field: libraw_nikon_makernotes_t::ShotInfoVersion"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, ShotInfoVersion) - 188usize];
    ["Offset of field: libraw_nikon_makernotes_t::MakernotesFlip"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, MakernotesFlip) - 192usize];
    ["Offset of field: libraw_nikon_makernotes_t::RollAngle"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, RollAngle) - 200usize];
    ["Offset of field: libraw_nikon_makernotes_t::PitchAngle"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, PitchAngle) - 208usize];
    ["Offset of field: libraw_nikon_makernotes_t::YawAngle"]
        [::core::mem::offset_of!(libraw_nikon_makernotes_t, YawAngle) - 216usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_olympus_makernotes_t {
    pub CameraType2: [libc::c_char; 6usize],
    pub ValidBits: ushort,
    pub SensorCalibration: [libc::c_int; 2usize],
    pub DriveMode: [ushort; 5usize],
    pub ColorSpace: ushort,
    pub FocusMode: [ushort; 2usize],
    pub AutoFocus: ushort,
    pub AFPoint: ushort,
    pub AFAreas: [libc::c_uint; 64usize],
    pub AFPointSelected: [f64; 5usize],
    pub AFResult: ushort,
    pub AFFineTune: uchar,
    pub AFFineTuneAdj: [libc::c_short; 3usize],
    pub SpecialMode: [libc::c_uint; 3usize],
    pub ZoomStepCount: ushort,
    pub FocusStepCount: ushort,
    pub FocusStepInfinity: ushort,
    pub FocusStepNear: ushort,
    pub FocusDistance: f64,
    pub AspectFrame: [ushort; 4usize],
    pub StackedImage: [libc::c_uint; 2usize],
    pub isLiveND: uchar,
    pub LiveNDfactor: libc::c_uint,
    pub Panorama_mode: ushort,
    pub Panorama_frameNum: ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_olympus_makernotes_t"]
        [::core::mem::size_of::<libraw_olympus_makernotes_t>() - 408usize];
    ["Alignment of libraw_olympus_makernotes_t"]
        [::core::mem::align_of::<libraw_olympus_makernotes_t>() - 8usize];
    ["Offset of field: libraw_olympus_makernotes_t::CameraType2"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, CameraType2) - 0usize];
    ["Offset of field: libraw_olympus_makernotes_t::ValidBits"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, ValidBits) - 6usize];
    ["Offset of field: libraw_olympus_makernotes_t::SensorCalibration"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, SensorCalibration) - 8usize];
    ["Offset of field: libraw_olympus_makernotes_t::DriveMode"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, DriveMode) - 16usize];
    ["Offset of field: libraw_olympus_makernotes_t::ColorSpace"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, ColorSpace) - 26usize];
    ["Offset of field: libraw_olympus_makernotes_t::FocusMode"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, FocusMode) - 28usize];
    ["Offset of field: libraw_olympus_makernotes_t::AutoFocus"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, AutoFocus) - 32usize];
    ["Offset of field: libraw_olympus_makernotes_t::AFPoint"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, AFPoint) - 34usize];
    ["Offset of field: libraw_olympus_makernotes_t::AFAreas"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, AFAreas) - 36usize];
    ["Offset of field: libraw_olympus_makernotes_t::AFPointSelected"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, AFPointSelected) - 296usize];
    ["Offset of field: libraw_olympus_makernotes_t::AFResult"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, AFResult) - 336usize];
    ["Offset of field: libraw_olympus_makernotes_t::AFFineTune"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, AFFineTune) - 338usize];
    ["Offset of field: libraw_olympus_makernotes_t::AFFineTuneAdj"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, AFFineTuneAdj) - 340usize];
    ["Offset of field: libraw_olympus_makernotes_t::SpecialMode"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, SpecialMode) - 348usize];
    ["Offset of field: libraw_olympus_makernotes_t::ZoomStepCount"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, ZoomStepCount) - 360usize];
    ["Offset of field: libraw_olympus_makernotes_t::FocusStepCount"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, FocusStepCount) - 362usize];
    ["Offset of field: libraw_olympus_makernotes_t::FocusStepInfinity"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, FocusStepInfinity) - 364usize];
    ["Offset of field: libraw_olympus_makernotes_t::FocusStepNear"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, FocusStepNear) - 366usize];
    ["Offset of field: libraw_olympus_makernotes_t::FocusDistance"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, FocusDistance) - 368usize];
    ["Offset of field: libraw_olympus_makernotes_t::AspectFrame"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, AspectFrame) - 376usize];
    ["Offset of field: libraw_olympus_makernotes_t::StackedImage"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, StackedImage) - 384usize];
    ["Offset of field: libraw_olympus_makernotes_t::isLiveND"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, isLiveND) - 392usize];
    ["Offset of field: libraw_olympus_makernotes_t::LiveNDfactor"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, LiveNDfactor) - 396usize];
    ["Offset of field: libraw_olympus_makernotes_t::Panorama_mode"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, Panorama_mode) - 400usize];
    ["Offset of field: libraw_olympus_makernotes_t::Panorama_frameNum"]
        [::core::mem::offset_of!(libraw_olympus_makernotes_t, Panorama_frameNum) - 402usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_panasonic_makernotes_t {
    pub Compression: ushort,
    pub BlackLevelDim: ushort,
    pub BlackLevel: [f32; 8usize],
    pub Multishot: libc::c_uint,
    pub gamma: f32,
    pub HighISOMultiplier: [libc::c_int; 3usize],
    pub FocusStepNear: libc::c_short,
    pub FocusStepCount: libc::c_short,
    pub ZoomPosition: libc::c_uint,
    pub LensManufacturer: libc::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_panasonic_makernotes_t"]
        [::core::mem::size_of::<libraw_panasonic_makernotes_t>() - 68usize];
    ["Alignment of libraw_panasonic_makernotes_t"]
        [::core::mem::align_of::<libraw_panasonic_makernotes_t>() - 4usize];
    ["Offset of field: libraw_panasonic_makernotes_t::Compression"]
        [::core::mem::offset_of!(libraw_panasonic_makernotes_t, Compression) - 0usize];
    ["Offset of field: libraw_panasonic_makernotes_t::BlackLevelDim"]
        [::core::mem::offset_of!(libraw_panasonic_makernotes_t, BlackLevelDim) - 2usize];
    ["Offset of field: libraw_panasonic_makernotes_t::BlackLevel"]
        [::core::mem::offset_of!(libraw_panasonic_makernotes_t, BlackLevel) - 4usize];
    ["Offset of field: libraw_panasonic_makernotes_t::Multishot"]
        [::core::mem::offset_of!(libraw_panasonic_makernotes_t, Multishot) - 36usize];
    ["Offset of field: libraw_panasonic_makernotes_t::gamma"]
        [::core::mem::offset_of!(libraw_panasonic_makernotes_t, gamma) - 40usize];
    ["Offset of field: libraw_panasonic_makernotes_t::HighISOMultiplier"]
        [::core::mem::offset_of!(libraw_panasonic_makernotes_t, HighISOMultiplier) - 44usize];
    ["Offset of field: libraw_panasonic_makernotes_t::FocusStepNear"]
        [::core::mem::offset_of!(libraw_panasonic_makernotes_t, FocusStepNear) - 56usize];
    ["Offset of field: libraw_panasonic_makernotes_t::FocusStepCount"]
        [::core::mem::offset_of!(libraw_panasonic_makernotes_t, FocusStepCount) - 58usize];
    ["Offset of field: libraw_panasonic_makernotes_t::ZoomPosition"]
        [::core::mem::offset_of!(libraw_panasonic_makernotes_t, ZoomPosition) - 60usize];
    ["Offset of field: libraw_panasonic_makernotes_t::LensManufacturer"]
        [::core::mem::offset_of!(libraw_panasonic_makernotes_t, LensManufacturer) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_pentax_makernotes_t {
    pub DriveMode: [uchar; 4usize],
    pub FocusMode: [ushort; 2usize],
    pub AFPointSelected: [ushort; 2usize],
    pub AFPointSelected_Area: ushort,
    pub AFPointsInFocus_version: libc::c_int,
    pub AFPointsInFocus: libc::c_uint,
    pub FocusPosition: ushort,
    pub AFAdjustment: libc::c_short,
    pub AFPointMode: uchar,
    pub MultiExposure: uchar,
    pub Quality: ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_pentax_makernotes_t"]
        [::core::mem::size_of::<libraw_pentax_makernotes_t>() - 32usize];
    ["Alignment of libraw_pentax_makernotes_t"]
        [::core::mem::align_of::<libraw_pentax_makernotes_t>() - 4usize];
    ["Offset of field: libraw_pentax_makernotes_t::DriveMode"]
        [::core::mem::offset_of!(libraw_pentax_makernotes_t, DriveMode) - 0usize];
    ["Offset of field: libraw_pentax_makernotes_t::FocusMode"]
        [::core::mem::offset_of!(libraw_pentax_makernotes_t, FocusMode) - 4usize];
    ["Offset of field: libraw_pentax_makernotes_t::AFPointSelected"]
        [::core::mem::offset_of!(libraw_pentax_makernotes_t, AFPointSelected) - 8usize];
    ["Offset of field: libraw_pentax_makernotes_t::AFPointSelected_Area"]
        [::core::mem::offset_of!(libraw_pentax_makernotes_t, AFPointSelected_Area) - 12usize];
    ["Offset of field: libraw_pentax_makernotes_t::AFPointsInFocus_version"]
        [::core::mem::offset_of!(libraw_pentax_makernotes_t, AFPointsInFocus_version) - 16usize];
    ["Offset of field: libraw_pentax_makernotes_t::AFPointsInFocus"]
        [::core::mem::offset_of!(libraw_pentax_makernotes_t, AFPointsInFocus) - 20usize];
    ["Offset of field: libraw_pentax_makernotes_t::FocusPosition"]
        [::core::mem::offset_of!(libraw_pentax_makernotes_t, FocusPosition) - 24usize];
    ["Offset of field: libraw_pentax_makernotes_t::AFAdjustment"]
        [::core::mem::offset_of!(libraw_pentax_makernotes_t, AFAdjustment) - 26usize];
    ["Offset of field: libraw_pentax_makernotes_t::AFPointMode"]
        [::core::mem::offset_of!(libraw_pentax_makernotes_t, AFPointMode) - 28usize];
    ["Offset of field: libraw_pentax_makernotes_t::MultiExposure"]
        [::core::mem::offset_of!(libraw_pentax_makernotes_t, MultiExposure) - 29usize];
    ["Offset of field: libraw_pentax_makernotes_t::Quality"]
        [::core::mem::offset_of!(libraw_pentax_makernotes_t, Quality) - 30usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_ricoh_makernotes_t {
    pub AFStatus: ushort,
    pub AFAreaXPosition: [libc::c_uint; 2usize],
    pub AFAreaYPosition: [libc::c_uint; 2usize],
    pub AFAreaMode: ushort,
    pub SensorWidth: libc::c_uint,
    pub SensorHeight: libc::c_uint,
    pub CroppedImageWidth: libc::c_uint,
    pub CroppedImageHeight: libc::c_uint,
    pub WideAdapter: ushort,
    pub CropMode: ushort,
    pub NDFilter: ushort,
    pub AutoBracketing: ushort,
    pub MacroMode: ushort,
    pub FlashMode: ushort,
    pub FlashExposureComp: f64,
    pub ManualFlashOutput: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_ricoh_makernotes_t"]
        [::core::mem::size_of::<libraw_ricoh_makernotes_t>() - 72usize];
    ["Alignment of libraw_ricoh_makernotes_t"]
        [::core::mem::align_of::<libraw_ricoh_makernotes_t>() - 8usize];
    ["Offset of field: libraw_ricoh_makernotes_t::AFStatus"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, AFStatus) - 0usize];
    ["Offset of field: libraw_ricoh_makernotes_t::AFAreaXPosition"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, AFAreaXPosition) - 4usize];
    ["Offset of field: libraw_ricoh_makernotes_t::AFAreaYPosition"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, AFAreaYPosition) - 12usize];
    ["Offset of field: libraw_ricoh_makernotes_t::AFAreaMode"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, AFAreaMode) - 20usize];
    ["Offset of field: libraw_ricoh_makernotes_t::SensorWidth"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, SensorWidth) - 24usize];
    ["Offset of field: libraw_ricoh_makernotes_t::SensorHeight"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, SensorHeight) - 28usize];
    ["Offset of field: libraw_ricoh_makernotes_t::CroppedImageWidth"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, CroppedImageWidth) - 32usize];
    ["Offset of field: libraw_ricoh_makernotes_t::CroppedImageHeight"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, CroppedImageHeight) - 36usize];
    ["Offset of field: libraw_ricoh_makernotes_t::WideAdapter"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, WideAdapter) - 40usize];
    ["Offset of field: libraw_ricoh_makernotes_t::CropMode"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, CropMode) - 42usize];
    ["Offset of field: libraw_ricoh_makernotes_t::NDFilter"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, NDFilter) - 44usize];
    ["Offset of field: libraw_ricoh_makernotes_t::AutoBracketing"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, AutoBracketing) - 46usize];
    ["Offset of field: libraw_ricoh_makernotes_t::MacroMode"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, MacroMode) - 48usize];
    ["Offset of field: libraw_ricoh_makernotes_t::FlashMode"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, FlashMode) - 50usize];
    ["Offset of field: libraw_ricoh_makernotes_t::FlashExposureComp"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, FlashExposureComp) - 56usize];
    ["Offset of field: libraw_ricoh_makernotes_t::ManualFlashOutput"]
        [::core::mem::offset_of!(libraw_ricoh_makernotes_t, ManualFlashOutput) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_samsung_makernotes_t {
    pub ImageSizeFull: [libc::c_uint; 4usize],
    pub ImageSizeCrop: [libc::c_uint; 4usize],
    pub ColorSpace: [libc::c_int; 2usize],
    pub key: [libc::c_uint; 11usize],
    pub DigitalGain: f64,
    pub DeviceType: libc::c_int,
    pub LensFirmware: [libc::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_samsung_makernotes_t"]
        [::core::mem::size_of::<libraw_samsung_makernotes_t>() - 136usize];
    ["Alignment of libraw_samsung_makernotes_t"]
        [::core::mem::align_of::<libraw_samsung_makernotes_t>() - 8usize];
    ["Offset of field: libraw_samsung_makernotes_t::ImageSizeFull"]
        [::core::mem::offset_of!(libraw_samsung_makernotes_t, ImageSizeFull) - 0usize];
    ["Offset of field: libraw_samsung_makernotes_t::ImageSizeCrop"]
        [::core::mem::offset_of!(libraw_samsung_makernotes_t, ImageSizeCrop) - 16usize];
    ["Offset of field: libraw_samsung_makernotes_t::ColorSpace"]
        [::core::mem::offset_of!(libraw_samsung_makernotes_t, ColorSpace) - 32usize];
    ["Offset of field: libraw_samsung_makernotes_t::key"]
        [::core::mem::offset_of!(libraw_samsung_makernotes_t, key) - 40usize];
    ["Offset of field: libraw_samsung_makernotes_t::DigitalGain"]
        [::core::mem::offset_of!(libraw_samsung_makernotes_t, DigitalGain) - 88usize];
    ["Offset of field: libraw_samsung_makernotes_t::DeviceType"]
        [::core::mem::offset_of!(libraw_samsung_makernotes_t, DeviceType) - 96usize];
    ["Offset of field: libraw_samsung_makernotes_t::LensFirmware"]
        [::core::mem::offset_of!(libraw_samsung_makernotes_t, LensFirmware) - 100usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_kodak_makernotes_t {
    pub BlackLevelTop: ushort,
    pub BlackLevelBottom: ushort,
    pub offset_left: libc::c_short,
    pub offset_top: libc::c_short,
    pub clipBlack: ushort,
    pub clipWhite: ushort,
    pub romm_camDaylight: [[f32; 3usize]; 3usize],
    pub romm_camTungsten: [[f32; 3usize]; 3usize],
    pub romm_camFluorescent: [[f32; 3usize]; 3usize],
    pub romm_camFlash: [[f32; 3usize]; 3usize],
    pub romm_camCustom: [[f32; 3usize]; 3usize],
    pub romm_camAuto: [[f32; 3usize]; 3usize],
    pub val018percent: ushort,
    pub val100percent: ushort,
    pub val170percent: ushort,
    pub MakerNoteKodak8a: libc::c_short,
    pub ISOCalibrationGain: f32,
    pub AnalogISO: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_kodak_makernotes_t"]
        [::core::mem::size_of::<libraw_kodak_makernotes_t>() - 244usize];
    ["Alignment of libraw_kodak_makernotes_t"]
        [::core::mem::align_of::<libraw_kodak_makernotes_t>() - 4usize];
    ["Offset of field: libraw_kodak_makernotes_t::BlackLevelTop"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, BlackLevelTop) - 0usize];
    ["Offset of field: libraw_kodak_makernotes_t::BlackLevelBottom"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, BlackLevelBottom) - 2usize];
    ["Offset of field: libraw_kodak_makernotes_t::offset_left"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, offset_left) - 4usize];
    ["Offset of field: libraw_kodak_makernotes_t::offset_top"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, offset_top) - 6usize];
    ["Offset of field: libraw_kodak_makernotes_t::clipBlack"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, clipBlack) - 8usize];
    ["Offset of field: libraw_kodak_makernotes_t::clipWhite"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, clipWhite) - 10usize];
    ["Offset of field: libraw_kodak_makernotes_t::romm_camDaylight"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, romm_camDaylight) - 12usize];
    ["Offset of field: libraw_kodak_makernotes_t::romm_camTungsten"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, romm_camTungsten) - 48usize];
    ["Offset of field: libraw_kodak_makernotes_t::romm_camFluorescent"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, romm_camFluorescent) - 84usize];
    ["Offset of field: libraw_kodak_makernotes_t::romm_camFlash"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, romm_camFlash) - 120usize];
    ["Offset of field: libraw_kodak_makernotes_t::romm_camCustom"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, romm_camCustom) - 156usize];
    ["Offset of field: libraw_kodak_makernotes_t::romm_camAuto"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, romm_camAuto) - 192usize];
    ["Offset of field: libraw_kodak_makernotes_t::val018percent"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, val018percent) - 228usize];
    ["Offset of field: libraw_kodak_makernotes_t::val100percent"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, val100percent) - 230usize];
    ["Offset of field: libraw_kodak_makernotes_t::val170percent"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, val170percent) - 232usize];
    ["Offset of field: libraw_kodak_makernotes_t::MakerNoteKodak8a"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, MakerNoteKodak8a) - 234usize];
    ["Offset of field: libraw_kodak_makernotes_t::ISOCalibrationGain"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, ISOCalibrationGain) - 236usize];
    ["Offset of field: libraw_kodak_makernotes_t::AnalogISO"]
        [::core::mem::offset_of!(libraw_kodak_makernotes_t, AnalogISO) - 240usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_p1_makernotes_t {
    pub Software: [libc::c_char; 64usize],
    pub SystemType: [libc::c_char; 64usize],
    pub FirmwareString: [libc::c_char; 256usize],
    pub SystemModel: [libc::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_p1_makernotes_t"][::core::mem::size_of::<libraw_p1_makernotes_t>() - 448usize];
    ["Alignment of libraw_p1_makernotes_t"]
        [::core::mem::align_of::<libraw_p1_makernotes_t>() - 1usize];
    ["Offset of field: libraw_p1_makernotes_t::Software"]
        [::core::mem::offset_of!(libraw_p1_makernotes_t, Software) - 0usize];
    ["Offset of field: libraw_p1_makernotes_t::SystemType"]
        [::core::mem::offset_of!(libraw_p1_makernotes_t, SystemType) - 64usize];
    ["Offset of field: libraw_p1_makernotes_t::FirmwareString"]
        [::core::mem::offset_of!(libraw_p1_makernotes_t, FirmwareString) - 128usize];
    ["Offset of field: libraw_p1_makernotes_t::SystemModel"]
        [::core::mem::offset_of!(libraw_p1_makernotes_t, SystemModel) - 384usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_sony_info_t {
    pub CameraType: ushort,
    pub Sony0x9400_version: uchar,
    pub Sony0x9400_ReleaseMode2: uchar,
    pub Sony0x9400_SequenceImageNumber: libc::c_uint,
    pub Sony0x9400_SequenceLength1: uchar,
    pub Sony0x9400_SequenceFileNumber: libc::c_uint,
    pub Sony0x9400_SequenceLength2: uchar,
    pub AFAreaModeSetting: u8,
    pub AFAreaMode: u16,
    pub FlexibleSpotPosition: [ushort; 2usize],
    pub AFPointSelected: u8,
    pub AFPointSelected_0x201e: u8,
    pub nAFPointsUsed: libc::c_short,
    pub AFPointsUsed: [u8; 10usize],
    pub AFTracking: u8,
    pub AFType: u8,
    pub FocusLocation: [ushort; 4usize],
    pub FocusPosition: ushort,
    pub AFMicroAdjValue: i8,
    pub AFMicroAdjOn: i8,
    pub AFMicroAdjRegisteredLenses: uchar,
    pub VariableLowPassFilter: ushort,
    pub LongExposureNoiseReduction: libc::c_uint,
    pub HighISONoiseReduction: ushort,
    pub HDR: [ushort; 2usize],
    pub group2010: ushort,
    pub group9050: ushort,
    pub real_iso_offset: ushort,
    pub MeteringMode_offset: ushort,
    pub ExposureProgram_offset: ushort,
    pub ReleaseMode2_offset: ushort,
    pub MinoltaCamID: libc::c_uint,
    pub firmware: f32,
    pub ImageCount3_offset: ushort,
    pub ImageCount3: libc::c_uint,
    pub ElectronicFrontCurtainShutter: libc::c_uint,
    pub MeteringMode2: ushort,
    pub SonyDateTime: [libc::c_char; 20usize],
    pub ShotNumberSincePowerUp: libc::c_uint,
    pub PixelShiftGroupPrefix: ushort,
    pub PixelShiftGroupID: libc::c_uint,
    pub nShotsInPixelShiftGroup: libc::c_char,
    pub numInPixelShiftGroup: libc::c_char,
    pub prd_ImageHeight: ushort,
    pub prd_ImageWidth: ushort,
    pub prd_Total_bps: ushort,
    pub prd_Active_bps: ushort,
    pub prd_StorageMethod: ushort,
    pub prd_BayerPattern: ushort,
    pub SonyRawFileType: ushort,
    pub RAWFileType: ushort,
    pub RawSizeType: ushort,
    pub Quality: libc::c_uint,
    pub FileFormat: ushort,
    pub MetaVersion: [libc::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_sony_info_t"][::core::mem::size_of::<libraw_sony_info_t>() - 180usize];
    ["Alignment of libraw_sony_info_t"][::core::mem::align_of::<libraw_sony_info_t>() - 4usize];
    ["Offset of field: libraw_sony_info_t::CameraType"]
        [::core::mem::offset_of!(libraw_sony_info_t, CameraType) - 0usize];
    ["Offset of field: libraw_sony_info_t::Sony0x9400_version"]
        [::core::mem::offset_of!(libraw_sony_info_t, Sony0x9400_version) - 2usize];
    ["Offset of field: libraw_sony_info_t::Sony0x9400_ReleaseMode2"]
        [::core::mem::offset_of!(libraw_sony_info_t, Sony0x9400_ReleaseMode2) - 3usize];
    ["Offset of field: libraw_sony_info_t::Sony0x9400_SequenceImageNumber"]
        [::core::mem::offset_of!(libraw_sony_info_t, Sony0x9400_SequenceImageNumber) - 4usize];
    ["Offset of field: libraw_sony_info_t::Sony0x9400_SequenceLength1"]
        [::core::mem::offset_of!(libraw_sony_info_t, Sony0x9400_SequenceLength1) - 8usize];
    ["Offset of field: libraw_sony_info_t::Sony0x9400_SequenceFileNumber"]
        [::core::mem::offset_of!(libraw_sony_info_t, Sony0x9400_SequenceFileNumber) - 12usize];
    ["Offset of field: libraw_sony_info_t::Sony0x9400_SequenceLength2"]
        [::core::mem::offset_of!(libraw_sony_info_t, Sony0x9400_SequenceLength2) - 16usize];
    ["Offset of field: libraw_sony_info_t::AFAreaModeSetting"]
        [::core::mem::offset_of!(libraw_sony_info_t, AFAreaModeSetting) - 17usize];
    ["Offset of field: libraw_sony_info_t::AFAreaMode"]
        [::core::mem::offset_of!(libraw_sony_info_t, AFAreaMode) - 18usize];
    ["Offset of field: libraw_sony_info_t::FlexibleSpotPosition"]
        [::core::mem::offset_of!(libraw_sony_info_t, FlexibleSpotPosition) - 20usize];
    ["Offset of field: libraw_sony_info_t::AFPointSelected"]
        [::core::mem::offset_of!(libraw_sony_info_t, AFPointSelected) - 24usize];
    ["Offset of field: libraw_sony_info_t::AFPointSelected_0x201e"]
        [::core::mem::offset_of!(libraw_sony_info_t, AFPointSelected_0x201e) - 25usize];
    ["Offset of field: libraw_sony_info_t::nAFPointsUsed"]
        [::core::mem::offset_of!(libraw_sony_info_t, nAFPointsUsed) - 26usize];
    ["Offset of field: libraw_sony_info_t::AFPointsUsed"]
        [::core::mem::offset_of!(libraw_sony_info_t, AFPointsUsed) - 28usize];
    ["Offset of field: libraw_sony_info_t::AFTracking"]
        [::core::mem::offset_of!(libraw_sony_info_t, AFTracking) - 38usize];
    ["Offset of field: libraw_sony_info_t::AFType"]
        [::core::mem::offset_of!(libraw_sony_info_t, AFType) - 39usize];
    ["Offset of field: libraw_sony_info_t::FocusLocation"]
        [::core::mem::offset_of!(libraw_sony_info_t, FocusLocation) - 40usize];
    ["Offset of field: libraw_sony_info_t::FocusPosition"]
        [::core::mem::offset_of!(libraw_sony_info_t, FocusPosition) - 48usize];
    ["Offset of field: libraw_sony_info_t::AFMicroAdjValue"]
        [::core::mem::offset_of!(libraw_sony_info_t, AFMicroAdjValue) - 50usize];
    ["Offset of field: libraw_sony_info_t::AFMicroAdjOn"]
        [::core::mem::offset_of!(libraw_sony_info_t, AFMicroAdjOn) - 51usize];
    ["Offset of field: libraw_sony_info_t::AFMicroAdjRegisteredLenses"]
        [::core::mem::offset_of!(libraw_sony_info_t, AFMicroAdjRegisteredLenses) - 52usize];
    ["Offset of field: libraw_sony_info_t::VariableLowPassFilter"]
        [::core::mem::offset_of!(libraw_sony_info_t, VariableLowPassFilter) - 54usize];
    ["Offset of field: libraw_sony_info_t::LongExposureNoiseReduction"]
        [::core::mem::offset_of!(libraw_sony_info_t, LongExposureNoiseReduction) - 56usize];
    ["Offset of field: libraw_sony_info_t::HighISONoiseReduction"]
        [::core::mem::offset_of!(libraw_sony_info_t, HighISONoiseReduction) - 60usize];
    ["Offset of field: libraw_sony_info_t::HDR"]
        [::core::mem::offset_of!(libraw_sony_info_t, HDR) - 62usize];
    ["Offset of field: libraw_sony_info_t::group2010"]
        [::core::mem::offset_of!(libraw_sony_info_t, group2010) - 66usize];
    ["Offset of field: libraw_sony_info_t::group9050"]
        [::core::mem::offset_of!(libraw_sony_info_t, group9050) - 68usize];
    ["Offset of field: libraw_sony_info_t::real_iso_offset"]
        [::core::mem::offset_of!(libraw_sony_info_t, real_iso_offset) - 70usize];
    ["Offset of field: libraw_sony_info_t::MeteringMode_offset"]
        [::core::mem::offset_of!(libraw_sony_info_t, MeteringMode_offset) - 72usize];
    ["Offset of field: libraw_sony_info_t::ExposureProgram_offset"]
        [::core::mem::offset_of!(libraw_sony_info_t, ExposureProgram_offset) - 74usize];
    ["Offset of field: libraw_sony_info_t::ReleaseMode2_offset"]
        [::core::mem::offset_of!(libraw_sony_info_t, ReleaseMode2_offset) - 76usize];
    ["Offset of field: libraw_sony_info_t::MinoltaCamID"]
        [::core::mem::offset_of!(libraw_sony_info_t, MinoltaCamID) - 80usize];
    ["Offset of field: libraw_sony_info_t::firmware"]
        [::core::mem::offset_of!(libraw_sony_info_t, firmware) - 84usize];
    ["Offset of field: libraw_sony_info_t::ImageCount3_offset"]
        [::core::mem::offset_of!(libraw_sony_info_t, ImageCount3_offset) - 88usize];
    ["Offset of field: libraw_sony_info_t::ImageCount3"]
        [::core::mem::offset_of!(libraw_sony_info_t, ImageCount3) - 92usize];
    ["Offset of field: libraw_sony_info_t::ElectronicFrontCurtainShutter"]
        [::core::mem::offset_of!(libraw_sony_info_t, ElectronicFrontCurtainShutter) - 96usize];
    ["Offset of field: libraw_sony_info_t::MeteringMode2"]
        [::core::mem::offset_of!(libraw_sony_info_t, MeteringMode2) - 100usize];
    ["Offset of field: libraw_sony_info_t::SonyDateTime"]
        [::core::mem::offset_of!(libraw_sony_info_t, SonyDateTime) - 102usize];
    ["Offset of field: libraw_sony_info_t::ShotNumberSincePowerUp"]
        [::core::mem::offset_of!(libraw_sony_info_t, ShotNumberSincePowerUp) - 124usize];
    ["Offset of field: libraw_sony_info_t::PixelShiftGroupPrefix"]
        [::core::mem::offset_of!(libraw_sony_info_t, PixelShiftGroupPrefix) - 128usize];
    ["Offset of field: libraw_sony_info_t::PixelShiftGroupID"]
        [::core::mem::offset_of!(libraw_sony_info_t, PixelShiftGroupID) - 132usize];
    ["Offset of field: libraw_sony_info_t::nShotsInPixelShiftGroup"]
        [::core::mem::offset_of!(libraw_sony_info_t, nShotsInPixelShiftGroup) - 136usize];
    ["Offset of field: libraw_sony_info_t::numInPixelShiftGroup"]
        [::core::mem::offset_of!(libraw_sony_info_t, numInPixelShiftGroup) - 137usize];
    ["Offset of field: libraw_sony_info_t::prd_ImageHeight"]
        [::core::mem::offset_of!(libraw_sony_info_t, prd_ImageHeight) - 138usize];
    ["Offset of field: libraw_sony_info_t::prd_ImageWidth"]
        [::core::mem::offset_of!(libraw_sony_info_t, prd_ImageWidth) - 140usize];
    ["Offset of field: libraw_sony_info_t::prd_Total_bps"]
        [::core::mem::offset_of!(libraw_sony_info_t, prd_Total_bps) - 142usize];
    ["Offset of field: libraw_sony_info_t::prd_Active_bps"]
        [::core::mem::offset_of!(libraw_sony_info_t, prd_Active_bps) - 144usize];
    ["Offset of field: libraw_sony_info_t::prd_StorageMethod"]
        [::core::mem::offset_of!(libraw_sony_info_t, prd_StorageMethod) - 146usize];
    ["Offset of field: libraw_sony_info_t::prd_BayerPattern"]
        [::core::mem::offset_of!(libraw_sony_info_t, prd_BayerPattern) - 148usize];
    ["Offset of field: libraw_sony_info_t::SonyRawFileType"]
        [::core::mem::offset_of!(libraw_sony_info_t, SonyRawFileType) - 150usize];
    ["Offset of field: libraw_sony_info_t::RAWFileType"]
        [::core::mem::offset_of!(libraw_sony_info_t, RAWFileType) - 152usize];
    ["Offset of field: libraw_sony_info_t::RawSizeType"]
        [::core::mem::offset_of!(libraw_sony_info_t, RawSizeType) - 154usize];
    ["Offset of field: libraw_sony_info_t::Quality"]
        [::core::mem::offset_of!(libraw_sony_info_t, Quality) - 156usize];
    ["Offset of field: libraw_sony_info_t::FileFormat"]
        [::core::mem::offset_of!(libraw_sony_info_t, FileFormat) - 160usize];
    ["Offset of field: libraw_sony_info_t::MetaVersion"]
        [::core::mem::offset_of!(libraw_sony_info_t, MetaVersion) - 162usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_colordata_t {
    pub curve: [ushort; 65536usize],
    pub cblack: [libc::c_uint; 4104usize],
    pub black: libc::c_uint,
    pub data_maximum: libc::c_uint,
    pub maximum: libc::c_uint,
    pub linear_max: [libc::c_long; 4usize],
    pub fmaximum: f32,
    pub fnorm: f32,
    pub white: [[ushort; 8usize]; 8usize],
    pub cam_mul: [f32; 4usize],
    pub pre_mul: [f32; 4usize],
    pub cmatrix: [[f32; 4usize]; 3usize],
    pub ccm: [[f32; 4usize]; 3usize],
    pub rgb_cam: [[f32; 4usize]; 3usize],
    pub cam_xyz: [[f32; 3usize]; 4usize],
    pub phase_one_data: ph1_t,
    pub flash_used: f32,
    pub canon_ev: f32,
    pub model2: [libc::c_char; 64usize],
    pub UniqueCameraModel: [libc::c_char; 64usize],
    pub LocalizedCameraModel: [libc::c_char; 64usize],
    pub ImageUniqueID: [libc::c_char; 64usize],
    pub RawDataUniqueID: [libc::c_char; 17usize],
    pub OriginalRawFileName: [libc::c_char; 64usize],
    pub profile: *mut libc::c_void,
    pub profile_length: libc::c_uint,
    pub black_stat: [libc::c_uint; 8usize],
    pub dng_color: [libraw_dng_color_t; 2usize],
    pub dng_levels: libraw_dng_levels_t,
    pub WB_Coeffs: [[libc::c_int; 4usize]; 256usize],
    pub WBCT_Coeffs: [[f32; 5usize]; 64usize],
    pub as_shot_wb_applied: libc::c_int,
    pub P1_color: [libraw_P1_color_t; 2usize],
    pub raw_bps: libc::c_uint,
    pub ExifColorSpace: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_colordata_t"][::core::mem::size_of::<libraw_colordata_t>() - 187048usize];
    ["Alignment of libraw_colordata_t"][::core::mem::align_of::<libraw_colordata_t>() - 8usize];
    ["Offset of field: libraw_colordata_t::curve"]
        [::core::mem::offset_of!(libraw_colordata_t, curve) - 0usize];
    ["Offset of field: libraw_colordata_t::cblack"]
        [::core::mem::offset_of!(libraw_colordata_t, cblack) - 131072usize];
    ["Offset of field: libraw_colordata_t::black"]
        [::core::mem::offset_of!(libraw_colordata_t, black) - 147488usize];
    ["Offset of field: libraw_colordata_t::data_maximum"]
        [::core::mem::offset_of!(libraw_colordata_t, data_maximum) - 147492usize];
    ["Offset of field: libraw_colordata_t::maximum"]
        [::core::mem::offset_of!(libraw_colordata_t, maximum) - 147496usize];
    ["Offset of field: libraw_colordata_t::linear_max"]
        [::core::mem::offset_of!(libraw_colordata_t, linear_max) - 147504usize];
    ["Offset of field: libraw_colordata_t::fmaximum"]
        [::core::mem::offset_of!(libraw_colordata_t, fmaximum) - 147536usize];
    ["Offset of field: libraw_colordata_t::fnorm"]
        [::core::mem::offset_of!(libraw_colordata_t, fnorm) - 147540usize];
    ["Offset of field: libraw_colordata_t::white"]
        [::core::mem::offset_of!(libraw_colordata_t, white) - 147544usize];
    ["Offset of field: libraw_colordata_t::cam_mul"]
        [::core::mem::offset_of!(libraw_colordata_t, cam_mul) - 147672usize];
    ["Offset of field: libraw_colordata_t::pre_mul"]
        [::core::mem::offset_of!(libraw_colordata_t, pre_mul) - 147688usize];
    ["Offset of field: libraw_colordata_t::cmatrix"]
        [::core::mem::offset_of!(libraw_colordata_t, cmatrix) - 147704usize];
    ["Offset of field: libraw_colordata_t::ccm"]
        [::core::mem::offset_of!(libraw_colordata_t, ccm) - 147752usize];
    ["Offset of field: libraw_colordata_t::rgb_cam"]
        [::core::mem::offset_of!(libraw_colordata_t, rgb_cam) - 147800usize];
    ["Offset of field: libraw_colordata_t::cam_xyz"]
        [::core::mem::offset_of!(libraw_colordata_t, cam_xyz) - 147848usize];
    ["Offset of field: libraw_colordata_t::phase_one_data"]
        [::core::mem::offset_of!(libraw_colordata_t, phase_one_data) - 147896usize];
    ["Offset of field: libraw_colordata_t::flash_used"]
        [::core::mem::offset_of!(libraw_colordata_t, flash_used) - 147932usize];
    ["Offset of field: libraw_colordata_t::canon_ev"]
        [::core::mem::offset_of!(libraw_colordata_t, canon_ev) - 147936usize];
    ["Offset of field: libraw_colordata_t::model2"]
        [::core::mem::offset_of!(libraw_colordata_t, model2) - 147940usize];
    ["Offset of field: libraw_colordata_t::UniqueCameraModel"]
        [::core::mem::offset_of!(libraw_colordata_t, UniqueCameraModel) - 148004usize];
    ["Offset of field: libraw_colordata_t::LocalizedCameraModel"]
        [::core::mem::offset_of!(libraw_colordata_t, LocalizedCameraModel) - 148068usize];
    ["Offset of field: libraw_colordata_t::ImageUniqueID"]
        [::core::mem::offset_of!(libraw_colordata_t, ImageUniqueID) - 148132usize];
    ["Offset of field: libraw_colordata_t::RawDataUniqueID"]
        [::core::mem::offset_of!(libraw_colordata_t, RawDataUniqueID) - 148196usize];
    ["Offset of field: libraw_colordata_t::OriginalRawFileName"]
        [::core::mem::offset_of!(libraw_colordata_t, OriginalRawFileName) - 148213usize];
    ["Offset of field: libraw_colordata_t::profile"]
        [::core::mem::offset_of!(libraw_colordata_t, profile) - 148280usize];
    ["Offset of field: libraw_colordata_t::profile_length"]
        [::core::mem::offset_of!(libraw_colordata_t, profile_length) - 148288usize];
    ["Offset of field: libraw_colordata_t::black_stat"]
        [::core::mem::offset_of!(libraw_colordata_t, black_stat) - 148292usize];
    ["Offset of field: libraw_colordata_t::dng_color"]
        [::core::mem::offset_of!(libraw_colordata_t, dng_color) - 148324usize];
    ["Offset of field: libraw_colordata_t::dng_levels"]
        [::core::mem::offset_of!(libraw_colordata_t, dng_levels) - 148660usize];
    ["Offset of field: libraw_colordata_t::WB_Coeffs"]
        [::core::mem::offset_of!(libraw_colordata_t, WB_Coeffs) - 181588usize];
    ["Offset of field: libraw_colordata_t::WBCT_Coeffs"]
        [::core::mem::offset_of!(libraw_colordata_t, WBCT_Coeffs) - 185684usize];
    ["Offset of field: libraw_colordata_t::as_shot_wb_applied"]
        [::core::mem::offset_of!(libraw_colordata_t, as_shot_wb_applied) - 186964usize];
    ["Offset of field: libraw_colordata_t::P1_color"]
        [::core::mem::offset_of!(libraw_colordata_t, P1_color) - 186968usize];
    ["Offset of field: libraw_colordata_t::raw_bps"]
        [::core::mem::offset_of!(libraw_colordata_t, raw_bps) - 187040usize];
    ["Offset of field: libraw_colordata_t::ExifColorSpace"]
        [::core::mem::offset_of!(libraw_colordata_t, ExifColorSpace) - 187044usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_thumbnail_t {
    pub tformat: LibRaw_thumbnail_formats,
    pub twidth: ushort,
    pub theight: ushort,
    pub tlength: libc::c_uint,
    pub tcolors: libc::c_int,
    pub thumb: *mut libc::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_thumbnail_t"][::core::mem::size_of::<libraw_thumbnail_t>() - 24usize];
    ["Alignment of libraw_thumbnail_t"][::core::mem::align_of::<libraw_thumbnail_t>() - 8usize];
    ["Offset of field: libraw_thumbnail_t::tformat"]
        [::core::mem::offset_of!(libraw_thumbnail_t, tformat) - 0usize];
    ["Offset of field: libraw_thumbnail_t::twidth"]
        [::core::mem::offset_of!(libraw_thumbnail_t, twidth) - 4usize];
    ["Offset of field: libraw_thumbnail_t::theight"]
        [::core::mem::offset_of!(libraw_thumbnail_t, theight) - 6usize];
    ["Offset of field: libraw_thumbnail_t::tlength"]
        [::core::mem::offset_of!(libraw_thumbnail_t, tlength) - 8usize];
    ["Offset of field: libraw_thumbnail_t::tcolors"]
        [::core::mem::offset_of!(libraw_thumbnail_t, tcolors) - 12usize];
    ["Offset of field: libraw_thumbnail_t::thumb"]
        [::core::mem::offset_of!(libraw_thumbnail_t, thumb) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_thumbnail_item_t {
    pub tformat: LibRaw_internal_thumbnail_formats,
    pub twidth: ushort,
    pub theight: ushort,
    pub tflip: ushort,
    pub tlength: libc::c_uint,
    pub tmisc: libc::c_uint,
    pub toffset: INT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_thumbnail_item_t"]
        [::core::mem::size_of::<libraw_thumbnail_item_t>() - 32usize];
    ["Alignment of libraw_thumbnail_item_t"]
        [::core::mem::align_of::<libraw_thumbnail_item_t>() - 8usize];
    ["Offset of field: libraw_thumbnail_item_t::tformat"]
        [::core::mem::offset_of!(libraw_thumbnail_item_t, tformat) - 0usize];
    ["Offset of field: libraw_thumbnail_item_t::twidth"]
        [::core::mem::offset_of!(libraw_thumbnail_item_t, twidth) - 4usize];
    ["Offset of field: libraw_thumbnail_item_t::theight"]
        [::core::mem::offset_of!(libraw_thumbnail_item_t, theight) - 6usize];
    ["Offset of field: libraw_thumbnail_item_t::tflip"]
        [::core::mem::offset_of!(libraw_thumbnail_item_t, tflip) - 8usize];
    ["Offset of field: libraw_thumbnail_item_t::tlength"]
        [::core::mem::offset_of!(libraw_thumbnail_item_t, tlength) - 12usize];
    ["Offset of field: libraw_thumbnail_item_t::tmisc"]
        [::core::mem::offset_of!(libraw_thumbnail_item_t, tmisc) - 16usize];
    ["Offset of field: libraw_thumbnail_item_t::toffset"]
        [::core::mem::offset_of!(libraw_thumbnail_item_t, toffset) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_thumbnail_list_t {
    pub thumbcount: libc::c_int,
    pub thumblist: [libraw_thumbnail_item_t; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_thumbnail_list_t"]
        [::core::mem::size_of::<libraw_thumbnail_list_t>() - 264usize];
    ["Alignment of libraw_thumbnail_list_t"]
        [::core::mem::align_of::<libraw_thumbnail_list_t>() - 8usize];
    ["Offset of field: libraw_thumbnail_list_t::thumbcount"]
        [::core::mem::offset_of!(libraw_thumbnail_list_t, thumbcount) - 0usize];
    ["Offset of field: libraw_thumbnail_list_t::thumblist"]
        [::core::mem::offset_of!(libraw_thumbnail_list_t, thumblist) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_gps_info_t {
    pub latitude: [f32; 3usize],
    pub longitude: [f32; 3usize],
    pub gpstimestamp: [f32; 3usize],
    pub altitude: f32,
    pub altref: libc::c_char,
    pub latref: libc::c_char,
    pub longref: libc::c_char,
    pub gpsstatus: libc::c_char,
    pub gpsparsed: libc::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_gps_info_t"][::core::mem::size_of::<libraw_gps_info_t>() - 48usize];
    ["Alignment of libraw_gps_info_t"][::core::mem::align_of::<libraw_gps_info_t>() - 4usize];
    ["Offset of field: libraw_gps_info_t::latitude"]
        [::core::mem::offset_of!(libraw_gps_info_t, latitude) - 0usize];
    ["Offset of field: libraw_gps_info_t::longitude"]
        [::core::mem::offset_of!(libraw_gps_info_t, longitude) - 12usize];
    ["Offset of field: libraw_gps_info_t::gpstimestamp"]
        [::core::mem::offset_of!(libraw_gps_info_t, gpstimestamp) - 24usize];
    ["Offset of field: libraw_gps_info_t::altitude"]
        [::core::mem::offset_of!(libraw_gps_info_t, altitude) - 36usize];
    ["Offset of field: libraw_gps_info_t::altref"]
        [::core::mem::offset_of!(libraw_gps_info_t, altref) - 40usize];
    ["Offset of field: libraw_gps_info_t::latref"]
        [::core::mem::offset_of!(libraw_gps_info_t, latref) - 41usize];
    ["Offset of field: libraw_gps_info_t::longref"]
        [::core::mem::offset_of!(libraw_gps_info_t, longref) - 42usize];
    ["Offset of field: libraw_gps_info_t::gpsstatus"]
        [::core::mem::offset_of!(libraw_gps_info_t, gpsstatus) - 43usize];
    ["Offset of field: libraw_gps_info_t::gpsparsed"]
        [::core::mem::offset_of!(libraw_gps_info_t, gpsparsed) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_imgother_t {
    pub iso_speed: f32,
    pub shutter: f32,
    pub aperture: f32,
    pub focal_len: f32,
    pub timestamp: time_t,
    pub shot_order: libc::c_uint,
    pub gpsdata: [libc::c_uint; 32usize],
    pub parsed_gps: libraw_gps_info_t,
    pub desc: [libc::c_char; 512usize],
    pub artist: [libc::c_char; 64usize],
    pub analogbalance: [f32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_imgother_t"][::core::mem::size_of::<libraw_imgother_t>() - 800usize];
    ["Alignment of libraw_imgother_t"][::core::mem::align_of::<libraw_imgother_t>() - 8usize];
    ["Offset of field: libraw_imgother_t::iso_speed"]
        [::core::mem::offset_of!(libraw_imgother_t, iso_speed) - 0usize];
    ["Offset of field: libraw_imgother_t::shutter"]
        [::core::mem::offset_of!(libraw_imgother_t, shutter) - 4usize];
    ["Offset of field: libraw_imgother_t::aperture"]
        [::core::mem::offset_of!(libraw_imgother_t, aperture) - 8usize];
    ["Offset of field: libraw_imgother_t::focal_len"]
        [::core::mem::offset_of!(libraw_imgother_t, focal_len) - 12usize];
    ["Offset of field: libraw_imgother_t::timestamp"]
        [::core::mem::offset_of!(libraw_imgother_t, timestamp) - 16usize];
    ["Offset of field: libraw_imgother_t::shot_order"]
        [::core::mem::offset_of!(libraw_imgother_t, shot_order) - 24usize];
    ["Offset of field: libraw_imgother_t::gpsdata"]
        [::core::mem::offset_of!(libraw_imgother_t, gpsdata) - 28usize];
    ["Offset of field: libraw_imgother_t::parsed_gps"]
        [::core::mem::offset_of!(libraw_imgother_t, parsed_gps) - 156usize];
    ["Offset of field: libraw_imgother_t::desc"]
        [::core::mem::offset_of!(libraw_imgother_t, desc) - 204usize];
    ["Offset of field: libraw_imgother_t::artist"]
        [::core::mem::offset_of!(libraw_imgother_t, artist) - 716usize];
    ["Offset of field: libraw_imgother_t::analogbalance"]
        [::core::mem::offset_of!(libraw_imgother_t, analogbalance) - 780usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_afinfo_item_t {
    pub AFInfoData_tag: libc::c_uint,
    pub AFInfoData_order: libc::c_short,
    pub AFInfoData_version: libc::c_uint,
    pub AFInfoData_length: libc::c_uint,
    pub AFInfoData: *mut uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_afinfo_item_t"][::core::mem::size_of::<libraw_afinfo_item_t>() - 24usize];
    ["Alignment of libraw_afinfo_item_t"][::core::mem::align_of::<libraw_afinfo_item_t>() - 8usize];
    ["Offset of field: libraw_afinfo_item_t::AFInfoData_tag"]
        [::core::mem::offset_of!(libraw_afinfo_item_t, AFInfoData_tag) - 0usize];
    ["Offset of field: libraw_afinfo_item_t::AFInfoData_order"]
        [::core::mem::offset_of!(libraw_afinfo_item_t, AFInfoData_order) - 4usize];
    ["Offset of field: libraw_afinfo_item_t::AFInfoData_version"]
        [::core::mem::offset_of!(libraw_afinfo_item_t, AFInfoData_version) - 8usize];
    ["Offset of field: libraw_afinfo_item_t::AFInfoData_length"]
        [::core::mem::offset_of!(libraw_afinfo_item_t, AFInfoData_length) - 12usize];
    ["Offset of field: libraw_afinfo_item_t::AFInfoData"]
        [::core::mem::offset_of!(libraw_afinfo_item_t, AFInfoData) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_metadata_common_t {
    pub FlashEC: f32,
    pub FlashGN: f32,
    pub CameraTemperature: f32,
    pub SensorTemperature: f32,
    pub SensorTemperature2: f32,
    pub LensTemperature: f32,
    pub AmbientTemperature: f32,
    pub BatteryTemperature: f32,
    pub exifAmbientTemperature: f32,
    pub exifHumidity: f32,
    pub exifPressure: f32,
    pub exifWaterDepth: f32,
    pub exifAcceleration: f32,
    pub exifCameraElevationAngle: f32,
    pub real_ISO: f32,
    pub exifExposureIndex: f32,
    pub ColorSpace: ushort,
    pub firmware: [libc::c_char; 128usize],
    pub ExposureCalibrationShift: f32,
    pub afdata: [libraw_afinfo_item_t; 4usize],
    pub afcount: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_metadata_common_t"]
        [::core::mem::size_of::<libraw_metadata_common_t>() - 304usize];
    ["Alignment of libraw_metadata_common_t"]
        [::core::mem::align_of::<libraw_metadata_common_t>() - 8usize];
    ["Offset of field: libraw_metadata_common_t::FlashEC"]
        [::core::mem::offset_of!(libraw_metadata_common_t, FlashEC) - 0usize];
    ["Offset of field: libraw_metadata_common_t::FlashGN"]
        [::core::mem::offset_of!(libraw_metadata_common_t, FlashGN) - 4usize];
    ["Offset of field: libraw_metadata_common_t::CameraTemperature"]
        [::core::mem::offset_of!(libraw_metadata_common_t, CameraTemperature) - 8usize];
    ["Offset of field: libraw_metadata_common_t::SensorTemperature"]
        [::core::mem::offset_of!(libraw_metadata_common_t, SensorTemperature) - 12usize];
    ["Offset of field: libraw_metadata_common_t::SensorTemperature2"]
        [::core::mem::offset_of!(libraw_metadata_common_t, SensorTemperature2) - 16usize];
    ["Offset of field: libraw_metadata_common_t::LensTemperature"]
        [::core::mem::offset_of!(libraw_metadata_common_t, LensTemperature) - 20usize];
    ["Offset of field: libraw_metadata_common_t::AmbientTemperature"]
        [::core::mem::offset_of!(libraw_metadata_common_t, AmbientTemperature) - 24usize];
    ["Offset of field: libraw_metadata_common_t::BatteryTemperature"]
        [::core::mem::offset_of!(libraw_metadata_common_t, BatteryTemperature) - 28usize];
    ["Offset of field: libraw_metadata_common_t::exifAmbientTemperature"]
        [::core::mem::offset_of!(libraw_metadata_common_t, exifAmbientTemperature) - 32usize];
    ["Offset of field: libraw_metadata_common_t::exifHumidity"]
        [::core::mem::offset_of!(libraw_metadata_common_t, exifHumidity) - 36usize];
    ["Offset of field: libraw_metadata_common_t::exifPressure"]
        [::core::mem::offset_of!(libraw_metadata_common_t, exifPressure) - 40usize];
    ["Offset of field: libraw_metadata_common_t::exifWaterDepth"]
        [::core::mem::offset_of!(libraw_metadata_common_t, exifWaterDepth) - 44usize];
    ["Offset of field: libraw_metadata_common_t::exifAcceleration"]
        [::core::mem::offset_of!(libraw_metadata_common_t, exifAcceleration) - 48usize];
    ["Offset of field: libraw_metadata_common_t::exifCameraElevationAngle"]
        [::core::mem::offset_of!(libraw_metadata_common_t, exifCameraElevationAngle) - 52usize];
    ["Offset of field: libraw_metadata_common_t::real_ISO"]
        [::core::mem::offset_of!(libraw_metadata_common_t, real_ISO) - 56usize];
    ["Offset of field: libraw_metadata_common_t::exifExposureIndex"]
        [::core::mem::offset_of!(libraw_metadata_common_t, exifExposureIndex) - 60usize];
    ["Offset of field: libraw_metadata_common_t::ColorSpace"]
        [::core::mem::offset_of!(libraw_metadata_common_t, ColorSpace) - 64usize];
    ["Offset of field: libraw_metadata_common_t::firmware"]
        [::core::mem::offset_of!(libraw_metadata_common_t, firmware) - 66usize];
    ["Offset of field: libraw_metadata_common_t::ExposureCalibrationShift"]
        [::core::mem::offset_of!(libraw_metadata_common_t, ExposureCalibrationShift) - 196usize];
    ["Offset of field: libraw_metadata_common_t::afdata"]
        [::core::mem::offset_of!(libraw_metadata_common_t, afdata) - 200usize];
    ["Offset of field: libraw_metadata_common_t::afcount"]
        [::core::mem::offset_of!(libraw_metadata_common_t, afcount) - 296usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_output_params_t {
    pub greybox: [libc::c_uint; 4usize],
    pub cropbox: [libc::c_uint; 4usize],
    pub aber: [f64; 4usize],
    pub gamm: [f64; 6usize],
    pub user_mul: [f32; 4usize],
    pub bright: f32,
    pub threshold: f32,
    pub half_size: libc::c_int,
    pub four_color_rgb: libc::c_int,
    pub highlight: libc::c_int,
    pub use_auto_wb: libc::c_int,
    pub use_camera_wb: libc::c_int,
    pub use_camera_matrix: libc::c_int,
    pub output_color: libc::c_int,
    pub output_profile: *mut libc::c_char,
    pub camera_profile: *mut libc::c_char,
    pub bad_pixels: *mut libc::c_char,
    pub dark_frame: *mut libc::c_char,
    pub output_bps: libc::c_int,
    pub output_tiff: libc::c_int,
    pub output_flags: libc::c_int,
    pub user_flip: libc::c_int,
    pub user_qual: libc::c_int,
    pub user_black: libc::c_int,
    pub user_cblack: [libc::c_int; 4usize],
    pub user_sat: libc::c_int,
    pub med_passes: libc::c_int,
    pub auto_bright_thr: f32,
    pub adjust_maximum_thr: f32,
    pub no_auto_bright: libc::c_int,
    pub use_fuji_rotate: libc::c_int,
    pub green_matching: libc::c_int,
    pub dcb_iterations: libc::c_int,
    pub dcb_enhance_fl: libc::c_int,
    pub fbdd_noiserd: libc::c_int,
    pub exp_correct: libc::c_int,
    pub exp_shift: f32,
    pub exp_preser: f32,
    pub no_auto_scale: libc::c_int,
    pub no_interpolation: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_output_params_t"][::core::mem::size_of::<libraw_output_params_t>() - 304usize];
    ["Alignment of libraw_output_params_t"]
        [::core::mem::align_of::<libraw_output_params_t>() - 8usize];
    ["Offset of field: libraw_output_params_t::greybox"]
        [::core::mem::offset_of!(libraw_output_params_t, greybox) - 0usize];
    ["Offset of field: libraw_output_params_t::cropbox"]
        [::core::mem::offset_of!(libraw_output_params_t, cropbox) - 16usize];
    ["Offset of field: libraw_output_params_t::aber"]
        [::core::mem::offset_of!(libraw_output_params_t, aber) - 32usize];
    ["Offset of field: libraw_output_params_t::gamm"]
        [::core::mem::offset_of!(libraw_output_params_t, gamm) - 64usize];
    ["Offset of field: libraw_output_params_t::user_mul"]
        [::core::mem::offset_of!(libraw_output_params_t, user_mul) - 112usize];
    ["Offset of field: libraw_output_params_t::bright"]
        [::core::mem::offset_of!(libraw_output_params_t, bright) - 128usize];
    ["Offset of field: libraw_output_params_t::threshold"]
        [::core::mem::offset_of!(libraw_output_params_t, threshold) - 132usize];
    ["Offset of field: libraw_output_params_t::half_size"]
        [::core::mem::offset_of!(libraw_output_params_t, half_size) - 136usize];
    ["Offset of field: libraw_output_params_t::four_color_rgb"]
        [::core::mem::offset_of!(libraw_output_params_t, four_color_rgb) - 140usize];
    ["Offset of field: libraw_output_params_t::highlight"]
        [::core::mem::offset_of!(libraw_output_params_t, highlight) - 144usize];
    ["Offset of field: libraw_output_params_t::use_auto_wb"]
        [::core::mem::offset_of!(libraw_output_params_t, use_auto_wb) - 148usize];
    ["Offset of field: libraw_output_params_t::use_camera_wb"]
        [::core::mem::offset_of!(libraw_output_params_t, use_camera_wb) - 152usize];
    ["Offset of field: libraw_output_params_t::use_camera_matrix"]
        [::core::mem::offset_of!(libraw_output_params_t, use_camera_matrix) - 156usize];
    ["Offset of field: libraw_output_params_t::output_color"]
        [::core::mem::offset_of!(libraw_output_params_t, output_color) - 160usize];
    ["Offset of field: libraw_output_params_t::output_profile"]
        [::core::mem::offset_of!(libraw_output_params_t, output_profile) - 168usize];
    ["Offset of field: libraw_output_params_t::camera_profile"]
        [::core::mem::offset_of!(libraw_output_params_t, camera_profile) - 176usize];
    ["Offset of field: libraw_output_params_t::bad_pixels"]
        [::core::mem::offset_of!(libraw_output_params_t, bad_pixels) - 184usize];
    ["Offset of field: libraw_output_params_t::dark_frame"]
        [::core::mem::offset_of!(libraw_output_params_t, dark_frame) - 192usize];
    ["Offset of field: libraw_output_params_t::output_bps"]
        [::core::mem::offset_of!(libraw_output_params_t, output_bps) - 200usize];
    ["Offset of field: libraw_output_params_t::output_tiff"]
        [::core::mem::offset_of!(libraw_output_params_t, output_tiff) - 204usize];
    ["Offset of field: libraw_output_params_t::output_flags"]
        [::core::mem::offset_of!(libraw_output_params_t, output_flags) - 208usize];
    ["Offset of field: libraw_output_params_t::user_flip"]
        [::core::mem::offset_of!(libraw_output_params_t, user_flip) - 212usize];
    ["Offset of field: libraw_output_params_t::user_qual"]
        [::core::mem::offset_of!(libraw_output_params_t, user_qual) - 216usize];
    ["Offset of field: libraw_output_params_t::user_black"]
        [::core::mem::offset_of!(libraw_output_params_t, user_black) - 220usize];
    ["Offset of field: libraw_output_params_t::user_cblack"]
        [::core::mem::offset_of!(libraw_output_params_t, user_cblack) - 224usize];
    ["Offset of field: libraw_output_params_t::user_sat"]
        [::core::mem::offset_of!(libraw_output_params_t, user_sat) - 240usize];
    ["Offset of field: libraw_output_params_t::med_passes"]
        [::core::mem::offset_of!(libraw_output_params_t, med_passes) - 244usize];
    ["Offset of field: libraw_output_params_t::auto_bright_thr"]
        [::core::mem::offset_of!(libraw_output_params_t, auto_bright_thr) - 248usize];
    ["Offset of field: libraw_output_params_t::adjust_maximum_thr"]
        [::core::mem::offset_of!(libraw_output_params_t, adjust_maximum_thr) - 252usize];
    ["Offset of field: libraw_output_params_t::no_auto_bright"]
        [::core::mem::offset_of!(libraw_output_params_t, no_auto_bright) - 256usize];
    ["Offset of field: libraw_output_params_t::use_fuji_rotate"]
        [::core::mem::offset_of!(libraw_output_params_t, use_fuji_rotate) - 260usize];
    ["Offset of field: libraw_output_params_t::green_matching"]
        [::core::mem::offset_of!(libraw_output_params_t, green_matching) - 264usize];
    ["Offset of field: libraw_output_params_t::dcb_iterations"]
        [::core::mem::offset_of!(libraw_output_params_t, dcb_iterations) - 268usize];
    ["Offset of field: libraw_output_params_t::dcb_enhance_fl"]
        [::core::mem::offset_of!(libraw_output_params_t, dcb_enhance_fl) - 272usize];
    ["Offset of field: libraw_output_params_t::fbdd_noiserd"]
        [::core::mem::offset_of!(libraw_output_params_t, fbdd_noiserd) - 276usize];
    ["Offset of field: libraw_output_params_t::exp_correct"]
        [::core::mem::offset_of!(libraw_output_params_t, exp_correct) - 280usize];
    ["Offset of field: libraw_output_params_t::exp_shift"]
        [::core::mem::offset_of!(libraw_output_params_t, exp_shift) - 284usize];
    ["Offset of field: libraw_output_params_t::exp_preser"]
        [::core::mem::offset_of!(libraw_output_params_t, exp_preser) - 288usize];
    ["Offset of field: libraw_output_params_t::no_auto_scale"]
        [::core::mem::offset_of!(libraw_output_params_t, no_auto_scale) - 292usize];
    ["Offset of field: libraw_output_params_t::no_interpolation"]
        [::core::mem::offset_of!(libraw_output_params_t, no_interpolation) - 296usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_raw_unpack_params_t {
    pub use_rawspeed: libc::c_int,
    pub use_dngsdk: libc::c_int,
    pub options: libc::c_uint,
    pub shot_select: libc::c_uint,
    pub specials: libc::c_uint,
    pub max_raw_memory_mb: libc::c_uint,
    pub sony_arw2_posterization_thr: libc::c_int,
    pub coolscan_nef_gamma: f32,
    pub p4shot_order: [libc::c_char; 5usize],
    pub custom_camera_strings: *mut *mut libc::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_raw_unpack_params_t"]
        [::core::mem::size_of::<libraw_raw_unpack_params_t>() - 48usize];
    ["Alignment of libraw_raw_unpack_params_t"]
        [::core::mem::align_of::<libraw_raw_unpack_params_t>() - 8usize];
    ["Offset of field: libraw_raw_unpack_params_t::use_rawspeed"]
        [::core::mem::offset_of!(libraw_raw_unpack_params_t, use_rawspeed) - 0usize];
    ["Offset of field: libraw_raw_unpack_params_t::use_dngsdk"]
        [::core::mem::offset_of!(libraw_raw_unpack_params_t, use_dngsdk) - 4usize];
    ["Offset of field: libraw_raw_unpack_params_t::options"]
        [::core::mem::offset_of!(libraw_raw_unpack_params_t, options) - 8usize];
    ["Offset of field: libraw_raw_unpack_params_t::shot_select"]
        [::core::mem::offset_of!(libraw_raw_unpack_params_t, shot_select) - 12usize];
    ["Offset of field: libraw_raw_unpack_params_t::specials"]
        [::core::mem::offset_of!(libraw_raw_unpack_params_t, specials) - 16usize];
    ["Offset of field: libraw_raw_unpack_params_t::max_raw_memory_mb"]
        [::core::mem::offset_of!(libraw_raw_unpack_params_t, max_raw_memory_mb) - 20usize];
    ["Offset of field: libraw_raw_unpack_params_t::sony_arw2_posterization_thr"][::core::mem::offset_of!(
        libraw_raw_unpack_params_t,
        sony_arw2_posterization_thr
    ) - 24usize];
    ["Offset of field: libraw_raw_unpack_params_t::coolscan_nef_gamma"]
        [::core::mem::offset_of!(libraw_raw_unpack_params_t, coolscan_nef_gamma) - 28usize];
    ["Offset of field: libraw_raw_unpack_params_t::p4shot_order"]
        [::core::mem::offset_of!(libraw_raw_unpack_params_t, p4shot_order) - 32usize];
    ["Offset of field: libraw_raw_unpack_params_t::custom_camera_strings"]
        [::core::mem::offset_of!(libraw_raw_unpack_params_t, custom_camera_strings) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_rawdata_t {
    pub raw_alloc: *mut libc::c_void,
    pub raw_image: *mut ushort,
    pub color4_image: *mut [ushort; 4usize],
    pub color3_image: *mut [ushort; 3usize],
    pub float_image: *mut f32,
    pub float3_image: *mut [f32; 3usize],
    pub float4_image: *mut [f32; 4usize],
    pub ph1_cblack: *mut [libc::c_short; 2usize],
    pub ph1_rblack: *mut [libc::c_short; 2usize],
    pub iparams: libraw_iparams_t,
    pub sizes: libraw_image_sizes_t,
    pub ioparams: libraw_internal_output_params_t,
    pub color: libraw_colordata_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_rawdata_t"][::core::mem::size_of::<libraw_rawdata_t>() - 187760usize];
    ["Alignment of libraw_rawdata_t"][::core::mem::align_of::<libraw_rawdata_t>() - 8usize];
    ["Offset of field: libraw_rawdata_t::raw_alloc"]
        [::core::mem::offset_of!(libraw_rawdata_t, raw_alloc) - 0usize];
    ["Offset of field: libraw_rawdata_t::raw_image"]
        [::core::mem::offset_of!(libraw_rawdata_t, raw_image) - 8usize];
    ["Offset of field: libraw_rawdata_t::color4_image"]
        [::core::mem::offset_of!(libraw_rawdata_t, color4_image) - 16usize];
    ["Offset of field: libraw_rawdata_t::color3_image"]
        [::core::mem::offset_of!(libraw_rawdata_t, color3_image) - 24usize];
    ["Offset of field: libraw_rawdata_t::float_image"]
        [::core::mem::offset_of!(libraw_rawdata_t, float_image) - 32usize];
    ["Offset of field: libraw_rawdata_t::float3_image"]
        [::core::mem::offset_of!(libraw_rawdata_t, float3_image) - 40usize];
    ["Offset of field: libraw_rawdata_t::float4_image"]
        [::core::mem::offset_of!(libraw_rawdata_t, float4_image) - 48usize];
    ["Offset of field: libraw_rawdata_t::ph1_cblack"]
        [::core::mem::offset_of!(libraw_rawdata_t, ph1_cblack) - 56usize];
    ["Offset of field: libraw_rawdata_t::ph1_rblack"]
        [::core::mem::offset_of!(libraw_rawdata_t, ph1_rblack) - 64usize];
    ["Offset of field: libraw_rawdata_t::iparams"]
        [::core::mem::offset_of!(libraw_rawdata_t, iparams) - 72usize];
    ["Offset of field: libraw_rawdata_t::sizes"]
        [::core::mem::offset_of!(libraw_rawdata_t, sizes) - 512usize];
    ["Offset of field: libraw_rawdata_t::ioparams"]
        [::core::mem::offset_of!(libraw_rawdata_t, ioparams) - 696usize];
    ["Offset of field: libraw_rawdata_t::color"]
        [::core::mem::offset_of!(libraw_rawdata_t, color) - 712usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_makernotes_lens_t {
    pub LensID: libc::c_ulonglong,
    pub Lens: [libc::c_char; 128usize],
    pub LensFormat: ushort,
    pub LensMount: ushort,
    pub CamID: libc::c_ulonglong,
    pub CameraFormat: ushort,
    pub CameraMount: ushort,
    pub body: [libc::c_char; 64usize],
    pub FocalType: libc::c_short,
    pub LensFeatures_pre: [libc::c_char; 16usize],
    pub LensFeatures_suf: [libc::c_char; 16usize],
    pub MinFocal: f32,
    pub MaxFocal: f32,
    pub MaxAp4MinFocal: f32,
    pub MaxAp4MaxFocal: f32,
    pub MinAp4MinFocal: f32,
    pub MinAp4MaxFocal: f32,
    pub MaxAp: f32,
    pub MinAp: f32,
    pub CurFocal: f32,
    pub CurAp: f32,
    pub MaxAp4CurFocal: f32,
    pub MinAp4CurFocal: f32,
    pub MinFocusDistance: f32,
    pub FocusRangeIndex: f32,
    pub LensFStops: f32,
    pub TeleconverterID: libc::c_ulonglong,
    pub Teleconverter: [libc::c_char; 128usize],
    pub AdapterID: libc::c_ulonglong,
    pub Adapter: [libc::c_char; 128usize],
    pub AttachmentID: libc::c_ulonglong,
    pub Attachment: [libc::c_char; 128usize],
    pub FocalUnits: ushort,
    pub FocalLengthIn35mmFormat: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_makernotes_lens_t"]
        [::core::mem::size_of::<libraw_makernotes_lens_t>() - 736usize];
    ["Alignment of libraw_makernotes_lens_t"]
        [::core::mem::align_of::<libraw_makernotes_lens_t>() - 8usize];
    ["Offset of field: libraw_makernotes_lens_t::LensID"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, LensID) - 0usize];
    ["Offset of field: libraw_makernotes_lens_t::Lens"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, Lens) - 8usize];
    ["Offset of field: libraw_makernotes_lens_t::LensFormat"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, LensFormat) - 136usize];
    ["Offset of field: libraw_makernotes_lens_t::LensMount"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, LensMount) - 138usize];
    ["Offset of field: libraw_makernotes_lens_t::CamID"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, CamID) - 144usize];
    ["Offset of field: libraw_makernotes_lens_t::CameraFormat"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, CameraFormat) - 152usize];
    ["Offset of field: libraw_makernotes_lens_t::CameraMount"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, CameraMount) - 154usize];
    ["Offset of field: libraw_makernotes_lens_t::body"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, body) - 156usize];
    ["Offset of field: libraw_makernotes_lens_t::FocalType"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, FocalType) - 220usize];
    ["Offset of field: libraw_makernotes_lens_t::LensFeatures_pre"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, LensFeatures_pre) - 222usize];
    ["Offset of field: libraw_makernotes_lens_t::LensFeatures_suf"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, LensFeatures_suf) - 238usize];
    ["Offset of field: libraw_makernotes_lens_t::MinFocal"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, MinFocal) - 256usize];
    ["Offset of field: libraw_makernotes_lens_t::MaxFocal"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, MaxFocal) - 260usize];
    ["Offset of field: libraw_makernotes_lens_t::MaxAp4MinFocal"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, MaxAp4MinFocal) - 264usize];
    ["Offset of field: libraw_makernotes_lens_t::MaxAp4MaxFocal"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, MaxAp4MaxFocal) - 268usize];
    ["Offset of field: libraw_makernotes_lens_t::MinAp4MinFocal"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, MinAp4MinFocal) - 272usize];
    ["Offset of field: libraw_makernotes_lens_t::MinAp4MaxFocal"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, MinAp4MaxFocal) - 276usize];
    ["Offset of field: libraw_makernotes_lens_t::MaxAp"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, MaxAp) - 280usize];
    ["Offset of field: libraw_makernotes_lens_t::MinAp"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, MinAp) - 284usize];
    ["Offset of field: libraw_makernotes_lens_t::CurFocal"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, CurFocal) - 288usize];
    ["Offset of field: libraw_makernotes_lens_t::CurAp"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, CurAp) - 292usize];
    ["Offset of field: libraw_makernotes_lens_t::MaxAp4CurFocal"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, MaxAp4CurFocal) - 296usize];
    ["Offset of field: libraw_makernotes_lens_t::MinAp4CurFocal"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, MinAp4CurFocal) - 300usize];
    ["Offset of field: libraw_makernotes_lens_t::MinFocusDistance"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, MinFocusDistance) - 304usize];
    ["Offset of field: libraw_makernotes_lens_t::FocusRangeIndex"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, FocusRangeIndex) - 308usize];
    ["Offset of field: libraw_makernotes_lens_t::LensFStops"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, LensFStops) - 312usize];
    ["Offset of field: libraw_makernotes_lens_t::TeleconverterID"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, TeleconverterID) - 320usize];
    ["Offset of field: libraw_makernotes_lens_t::Teleconverter"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, Teleconverter) - 328usize];
    ["Offset of field: libraw_makernotes_lens_t::AdapterID"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, AdapterID) - 456usize];
    ["Offset of field: libraw_makernotes_lens_t::Adapter"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, Adapter) - 464usize];
    ["Offset of field: libraw_makernotes_lens_t::AttachmentID"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, AttachmentID) - 592usize];
    ["Offset of field: libraw_makernotes_lens_t::Attachment"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, Attachment) - 600usize];
    ["Offset of field: libraw_makernotes_lens_t::FocalUnits"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, FocalUnits) - 728usize];
    ["Offset of field: libraw_makernotes_lens_t::FocalLengthIn35mmFormat"]
        [::core::mem::offset_of!(libraw_makernotes_lens_t, FocalLengthIn35mmFormat) - 732usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_nikonlens_t {
    pub EffectiveMaxAp: f32,
    pub LensIDNumber: uchar,
    pub LensFStops: uchar,
    pub MCUVersion: uchar,
    pub LensType: uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_nikonlens_t"][::core::mem::size_of::<libraw_nikonlens_t>() - 8usize];
    ["Alignment of libraw_nikonlens_t"][::core::mem::align_of::<libraw_nikonlens_t>() - 4usize];
    ["Offset of field: libraw_nikonlens_t::EffectiveMaxAp"]
        [::core::mem::offset_of!(libraw_nikonlens_t, EffectiveMaxAp) - 0usize];
    ["Offset of field: libraw_nikonlens_t::LensIDNumber"]
        [::core::mem::offset_of!(libraw_nikonlens_t, LensIDNumber) - 4usize];
    ["Offset of field: libraw_nikonlens_t::LensFStops"]
        [::core::mem::offset_of!(libraw_nikonlens_t, LensFStops) - 5usize];
    ["Offset of field: libraw_nikonlens_t::MCUVersion"]
        [::core::mem::offset_of!(libraw_nikonlens_t, MCUVersion) - 6usize];
    ["Offset of field: libraw_nikonlens_t::LensType"]
        [::core::mem::offset_of!(libraw_nikonlens_t, LensType) - 7usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_dnglens_t {
    pub MinFocal: f32,
    pub MaxFocal: f32,
    pub MaxAp4MinFocal: f32,
    pub MaxAp4MaxFocal: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_dnglens_t"][::core::mem::size_of::<libraw_dnglens_t>() - 16usize];
    ["Alignment of libraw_dnglens_t"][::core::mem::align_of::<libraw_dnglens_t>() - 4usize];
    ["Offset of field: libraw_dnglens_t::MinFocal"]
        [::core::mem::offset_of!(libraw_dnglens_t, MinFocal) - 0usize];
    ["Offset of field: libraw_dnglens_t::MaxFocal"]
        [::core::mem::offset_of!(libraw_dnglens_t, MaxFocal) - 4usize];
    ["Offset of field: libraw_dnglens_t::MaxAp4MinFocal"]
        [::core::mem::offset_of!(libraw_dnglens_t, MaxAp4MinFocal) - 8usize];
    ["Offset of field: libraw_dnglens_t::MaxAp4MaxFocal"]
        [::core::mem::offset_of!(libraw_dnglens_t, MaxAp4MaxFocal) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_lensinfo_t {
    pub MinFocal: f32,
    pub MaxFocal: f32,
    pub MaxAp4MinFocal: f32,
    pub MaxAp4MaxFocal: f32,
    pub EXIF_MaxAp: f32,
    pub LensMake: [libc::c_char; 128usize],
    pub Lens: [libc::c_char; 128usize],
    pub LensSerial: [libc::c_char; 128usize],
    pub InternalLensSerial: [libc::c_char; 128usize],
    pub FocalLengthIn35mmFormat: ushort,
    pub nikon: libraw_nikonlens_t,
    pub dng: libraw_dnglens_t,
    pub makernotes: libraw_makernotes_lens_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_lensinfo_t"][::core::mem::size_of::<libraw_lensinfo_t>() - 1296usize];
    ["Alignment of libraw_lensinfo_t"][::core::mem::align_of::<libraw_lensinfo_t>() - 8usize];
    ["Offset of field: libraw_lensinfo_t::MinFocal"]
        [::core::mem::offset_of!(libraw_lensinfo_t, MinFocal) - 0usize];
    ["Offset of field: libraw_lensinfo_t::MaxFocal"]
        [::core::mem::offset_of!(libraw_lensinfo_t, MaxFocal) - 4usize];
    ["Offset of field: libraw_lensinfo_t::MaxAp4MinFocal"]
        [::core::mem::offset_of!(libraw_lensinfo_t, MaxAp4MinFocal) - 8usize];
    ["Offset of field: libraw_lensinfo_t::MaxAp4MaxFocal"]
        [::core::mem::offset_of!(libraw_lensinfo_t, MaxAp4MaxFocal) - 12usize];
    ["Offset of field: libraw_lensinfo_t::EXIF_MaxAp"]
        [::core::mem::offset_of!(libraw_lensinfo_t, EXIF_MaxAp) - 16usize];
    ["Offset of field: libraw_lensinfo_t::LensMake"]
        [::core::mem::offset_of!(libraw_lensinfo_t, LensMake) - 20usize];
    ["Offset of field: libraw_lensinfo_t::Lens"]
        [::core::mem::offset_of!(libraw_lensinfo_t, Lens) - 148usize];
    ["Offset of field: libraw_lensinfo_t::LensSerial"]
        [::core::mem::offset_of!(libraw_lensinfo_t, LensSerial) - 276usize];
    ["Offset of field: libraw_lensinfo_t::InternalLensSerial"]
        [::core::mem::offset_of!(libraw_lensinfo_t, InternalLensSerial) - 404usize];
    ["Offset of field: libraw_lensinfo_t::FocalLengthIn35mmFormat"]
        [::core::mem::offset_of!(libraw_lensinfo_t, FocalLengthIn35mmFormat) - 532usize];
    ["Offset of field: libraw_lensinfo_t::nikon"]
        [::core::mem::offset_of!(libraw_lensinfo_t, nikon) - 536usize];
    ["Offset of field: libraw_lensinfo_t::dng"]
        [::core::mem::offset_of!(libraw_lensinfo_t, dng) - 544usize];
    ["Offset of field: libraw_lensinfo_t::makernotes"]
        [::core::mem::offset_of!(libraw_lensinfo_t, makernotes) - 560usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_makernotes_t {
    pub canon: libraw_canon_makernotes_t,
    pub nikon: libraw_nikon_makernotes_t,
    pub hasselblad: libraw_hasselblad_makernotes_t,
    pub fuji: libraw_fuji_info_t,
    pub olympus: libraw_olympus_makernotes_t,
    pub sony: libraw_sony_info_t,
    pub kodak: libraw_kodak_makernotes_t,
    pub panasonic: libraw_panasonic_makernotes_t,
    pub pentax: libraw_pentax_makernotes_t,
    pub phaseone: libraw_p1_makernotes_t,
    pub ricoh: libraw_ricoh_makernotes_t,
    pub samsung: libraw_samsung_makernotes_t,
    pub common: libraw_metadata_common_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_makernotes_t"][::core::mem::size_of::<libraw_makernotes_t>() - 2952usize];
    ["Alignment of libraw_makernotes_t"][::core::mem::align_of::<libraw_makernotes_t>() - 8usize];
    ["Offset of field: libraw_makernotes_t::canon"]
        [::core::mem::offset_of!(libraw_makernotes_t, canon) - 0usize];
    ["Offset of field: libraw_makernotes_t::nikon"]
        [::core::mem::offset_of!(libraw_makernotes_t, nikon) - 168usize];
    ["Offset of field: libraw_makernotes_t::hasselblad"]
        [::core::mem::offset_of!(libraw_makernotes_t, hasselblad) - 392usize];
    ["Offset of field: libraw_makernotes_t::fuji"]
        [::core::mem::offset_of!(libraw_makernotes_t, fuji) - 776usize];
    ["Offset of field: libraw_makernotes_t::olympus"]
        [::core::mem::offset_of!(libraw_makernotes_t, olympus) - 1056usize];
    ["Offset of field: libraw_makernotes_t::sony"]
        [::core::mem::offset_of!(libraw_makernotes_t, sony) - 1464usize];
    ["Offset of field: libraw_makernotes_t::kodak"]
        [::core::mem::offset_of!(libraw_makernotes_t, kodak) - 1644usize];
    ["Offset of field: libraw_makernotes_t::panasonic"]
        [::core::mem::offset_of!(libraw_makernotes_t, panasonic) - 1888usize];
    ["Offset of field: libraw_makernotes_t::pentax"]
        [::core::mem::offset_of!(libraw_makernotes_t, pentax) - 1956usize];
    ["Offset of field: libraw_makernotes_t::phaseone"]
        [::core::mem::offset_of!(libraw_makernotes_t, phaseone) - 1988usize];
    ["Offset of field: libraw_makernotes_t::ricoh"]
        [::core::mem::offset_of!(libraw_makernotes_t, ricoh) - 2440usize];
    ["Offset of field: libraw_makernotes_t::samsung"]
        [::core::mem::offset_of!(libraw_makernotes_t, samsung) - 2512usize];
    ["Offset of field: libraw_makernotes_t::common"]
        [::core::mem::offset_of!(libraw_makernotes_t, common) - 2648usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_shootinginfo_t {
    pub DriveMode: libc::c_short,
    pub FocusMode: libc::c_short,
    pub MeteringMode: libc::c_short,
    pub AFPoint: libc::c_short,
    pub ExposureMode: libc::c_short,
    pub ExposureProgram: libc::c_short,
    pub ImageStabilization: libc::c_short,
    pub BodySerial: [libc::c_char; 64usize],
    pub InternalBodySerial: [libc::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_shootinginfo_t"][::core::mem::size_of::<libraw_shootinginfo_t>() - 142usize];
    ["Alignment of libraw_shootinginfo_t"]
        [::core::mem::align_of::<libraw_shootinginfo_t>() - 2usize];
    ["Offset of field: libraw_shootinginfo_t::DriveMode"]
        [::core::mem::offset_of!(libraw_shootinginfo_t, DriveMode) - 0usize];
    ["Offset of field: libraw_shootinginfo_t::FocusMode"]
        [::core::mem::offset_of!(libraw_shootinginfo_t, FocusMode) - 2usize];
    ["Offset of field: libraw_shootinginfo_t::MeteringMode"]
        [::core::mem::offset_of!(libraw_shootinginfo_t, MeteringMode) - 4usize];
    ["Offset of field: libraw_shootinginfo_t::AFPoint"]
        [::core::mem::offset_of!(libraw_shootinginfo_t, AFPoint) - 6usize];
    ["Offset of field: libraw_shootinginfo_t::ExposureMode"]
        [::core::mem::offset_of!(libraw_shootinginfo_t, ExposureMode) - 8usize];
    ["Offset of field: libraw_shootinginfo_t::ExposureProgram"]
        [::core::mem::offset_of!(libraw_shootinginfo_t, ExposureProgram) - 10usize];
    ["Offset of field: libraw_shootinginfo_t::ImageStabilization"]
        [::core::mem::offset_of!(libraw_shootinginfo_t, ImageStabilization) - 12usize];
    ["Offset of field: libraw_shootinginfo_t::BodySerial"]
        [::core::mem::offset_of!(libraw_shootinginfo_t, BodySerial) - 14usize];
    ["Offset of field: libraw_shootinginfo_t::InternalBodySerial"]
        [::core::mem::offset_of!(libraw_shootinginfo_t, InternalBodySerial) - 78usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_custom_camera_t {
    pub fsize: libc::c_uint,
    pub rw: ushort,
    pub rh: ushort,
    pub lm: uchar,
    pub tm: uchar,
    pub rm: uchar,
    pub bm: uchar,
    pub lf: ushort,
    pub cf: uchar,
    pub max: uchar,
    pub flags: uchar,
    pub t_make: [libc::c_char; 10usize],
    pub t_model: [libc::c_char; 20usize],
    pub offset: ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_custom_camera_t"][::core::mem::size_of::<libraw_custom_camera_t>() - 52usize];
    ["Alignment of libraw_custom_camera_t"]
        [::core::mem::align_of::<libraw_custom_camera_t>() - 4usize];
    ["Offset of field: libraw_custom_camera_t::fsize"]
        [::core::mem::offset_of!(libraw_custom_camera_t, fsize) - 0usize];
    ["Offset of field: libraw_custom_camera_t::rw"]
        [::core::mem::offset_of!(libraw_custom_camera_t, rw) - 4usize];
    ["Offset of field: libraw_custom_camera_t::rh"]
        [::core::mem::offset_of!(libraw_custom_camera_t, rh) - 6usize];
    ["Offset of field: libraw_custom_camera_t::lm"]
        [::core::mem::offset_of!(libraw_custom_camera_t, lm) - 8usize];
    ["Offset of field: libraw_custom_camera_t::tm"]
        [::core::mem::offset_of!(libraw_custom_camera_t, tm) - 9usize];
    ["Offset of field: libraw_custom_camera_t::rm"]
        [::core::mem::offset_of!(libraw_custom_camera_t, rm) - 10usize];
    ["Offset of field: libraw_custom_camera_t::bm"]
        [::core::mem::offset_of!(libraw_custom_camera_t, bm) - 11usize];
    ["Offset of field: libraw_custom_camera_t::lf"]
        [::core::mem::offset_of!(libraw_custom_camera_t, lf) - 12usize];
    ["Offset of field: libraw_custom_camera_t::cf"]
        [::core::mem::offset_of!(libraw_custom_camera_t, cf) - 14usize];
    ["Offset of field: libraw_custom_camera_t::max"]
        [::core::mem::offset_of!(libraw_custom_camera_t, max) - 15usize];
    ["Offset of field: libraw_custom_camera_t::flags"]
        [::core::mem::offset_of!(libraw_custom_camera_t, flags) - 16usize];
    ["Offset of field: libraw_custom_camera_t::t_make"]
        [::core::mem::offset_of!(libraw_custom_camera_t, t_make) - 17usize];
    ["Offset of field: libraw_custom_camera_t::t_model"]
        [::core::mem::offset_of!(libraw_custom_camera_t, t_model) - 27usize];
    ["Offset of field: libraw_custom_camera_t::offset"]
        [::core::mem::offset_of!(libraw_custom_camera_t, offset) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_data_t {
    pub image: *mut [ushort; 4usize],
    pub sizes: libraw_image_sizes_t,
    pub idata: libraw_iparams_t,
    pub lens: libraw_lensinfo_t,
    pub makernotes: libraw_makernotes_t,
    pub shootinginfo: libraw_shootinginfo_t,
    pub params: libraw_output_params_t,
    pub rawparams: libraw_raw_unpack_params_t,
    pub progress_flags: libc::c_uint,
    pub process_warnings: libc::c_uint,
    pub color: libraw_colordata_t,
    pub other: libraw_imgother_t,
    pub thumbnail: libraw_thumbnail_t,
    pub thumbs_list: libraw_thumbnail_list_t,
    pub rawdata: libraw_rawdata_t,
    pub parent_class: *mut libc::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_data_t"][::core::mem::size_of::<libraw_data_t>() - 381288usize];
    ["Alignment of libraw_data_t"][::core::mem::align_of::<libraw_data_t>() - 8usize];
    ["Offset of field: libraw_data_t::image"]
        [::core::mem::offset_of!(libraw_data_t, image) - 0usize];
    ["Offset of field: libraw_data_t::sizes"]
        [::core::mem::offset_of!(libraw_data_t, sizes) - 8usize];
    ["Offset of field: libraw_data_t::idata"]
        [::core::mem::offset_of!(libraw_data_t, idata) - 192usize];
    ["Offset of field: libraw_data_t::lens"]
        [::core::mem::offset_of!(libraw_data_t, lens) - 632usize];
    ["Offset of field: libraw_data_t::makernotes"]
        [::core::mem::offset_of!(libraw_data_t, makernotes) - 1928usize];
    ["Offset of field: libraw_data_t::shootinginfo"]
        [::core::mem::offset_of!(libraw_data_t, shootinginfo) - 4880usize];
    ["Offset of field: libraw_data_t::params"]
        [::core::mem::offset_of!(libraw_data_t, params) - 5024usize];
    ["Offset of field: libraw_data_t::rawparams"]
        [::core::mem::offset_of!(libraw_data_t, rawparams) - 5328usize];
    ["Offset of field: libraw_data_t::progress_flags"]
        [::core::mem::offset_of!(libraw_data_t, progress_flags) - 5376usize];
    ["Offset of field: libraw_data_t::process_warnings"]
        [::core::mem::offset_of!(libraw_data_t, process_warnings) - 5380usize];
    ["Offset of field: libraw_data_t::color"]
        [::core::mem::offset_of!(libraw_data_t, color) - 5384usize];
    ["Offset of field: libraw_data_t::other"]
        [::core::mem::offset_of!(libraw_data_t, other) - 192432usize];
    ["Offset of field: libraw_data_t::thumbnail"]
        [::core::mem::offset_of!(libraw_data_t, thumbnail) - 193232usize];
    ["Offset of field: libraw_data_t::thumbs_list"]
        [::core::mem::offset_of!(libraw_data_t, thumbs_list) - 193256usize];
    ["Offset of field: libraw_data_t::rawdata"]
        [::core::mem::offset_of!(libraw_data_t, rawdata) - 193520usize];
    ["Offset of field: libraw_data_t::parent_class"]
        [::core::mem::offset_of!(libraw_data_t, parent_class) - 381280usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuji_q_table {
    pub q_table: *mut i8,
    pub raw_bits: libc::c_int,
    pub total_values: libc::c_int,
    pub max_grad: libc::c_int,
    pub q_grad_mult: libc::c_int,
    pub q_base: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fuji_q_table"][::core::mem::size_of::<fuji_q_table>() - 32usize];
    ["Alignment of fuji_q_table"][::core::mem::align_of::<fuji_q_table>() - 8usize];
    ["Offset of field: fuji_q_table::q_table"]
        [::core::mem::offset_of!(fuji_q_table, q_table) - 0usize];
    ["Offset of field: fuji_q_table::raw_bits"]
        [::core::mem::offset_of!(fuji_q_table, raw_bits) - 8usize];
    ["Offset of field: fuji_q_table::total_values"]
        [::core::mem::offset_of!(fuji_q_table, total_values) - 12usize];
    ["Offset of field: fuji_q_table::max_grad"]
        [::core::mem::offset_of!(fuji_q_table, max_grad) - 16usize];
    ["Offset of field: fuji_q_table::q_grad_mult"]
        [::core::mem::offset_of!(fuji_q_table, q_grad_mult) - 20usize];
    ["Offset of field: fuji_q_table::q_base"]
        [::core::mem::offset_of!(fuji_q_table, q_base) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuji_compressed_params {
    pub qt: [fuji_q_table; 4usize],
    pub buf: *mut libc::c_void,
    pub max_bits: libc::c_int,
    pub min_value: libc::c_int,
    pub max_value: libc::c_int,
    pub line_width: ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fuji_compressed_params"][::core::mem::size_of::<fuji_compressed_params>() - 152usize];
    ["Alignment of fuji_compressed_params"]
        [::core::mem::align_of::<fuji_compressed_params>() - 8usize];
    ["Offset of field: fuji_compressed_params::qt"]
        [::core::mem::offset_of!(fuji_compressed_params, qt) - 0usize];
    ["Offset of field: fuji_compressed_params::buf"]
        [::core::mem::offset_of!(fuji_compressed_params, buf) - 128usize];
    ["Offset of field: fuji_compressed_params::max_bits"]
        [::core::mem::offset_of!(fuji_compressed_params, max_bits) - 136usize];
    ["Offset of field: fuji_compressed_params::min_value"]
        [::core::mem::offset_of!(fuji_compressed_params, min_value) - 140usize];
    ["Offset of field: fuji_compressed_params::max_value"]
        [::core::mem::offset_of!(fuji_compressed_params, max_value) - 144usize];
    ["Offset of field: fuji_compressed_params::line_width"]
        [::core::mem::offset_of!(fuji_compressed_params, line_width) - 148usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct internal_data_t {
    pub input: *mut LibRaw_abstract_datastream,
    pub output: *mut FILE,
    pub input_internal: libc::c_int,
    pub meta_data: *mut libc::c_char,
    pub profile_offset: INT64,
    pub toffset: INT64,
    pub pana_black: [libc::c_uint; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of internal_data_t"][::core::mem::size_of::<internal_data_t>() - 64usize];
    ["Alignment of internal_data_t"][::core::mem::align_of::<internal_data_t>() - 8usize];
    ["Offset of field: internal_data_t::input"]
        [::core::mem::offset_of!(internal_data_t, input) - 0usize];
    ["Offset of field: internal_data_t::output"]
        [::core::mem::offset_of!(internal_data_t, output) - 8usize];
    ["Offset of field: internal_data_t::input_internal"]
        [::core::mem::offset_of!(internal_data_t, input_internal) - 16usize];
    ["Offset of field: internal_data_t::meta_data"]
        [::core::mem::offset_of!(internal_data_t, meta_data) - 24usize];
    ["Offset of field: internal_data_t::profile_offset"]
        [::core::mem::offset_of!(internal_data_t, profile_offset) - 32usize];
    ["Offset of field: internal_data_t::toffset"]
        [::core::mem::offset_of!(internal_data_t, toffset) - 40usize];
    ["Offset of field: internal_data_t::pana_black"]
        [::core::mem::offset_of!(internal_data_t, pana_black) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct output_data_t {
    pub histogram: *mut [libc::c_int; 8192usize],
    pub oprof: *mut libc::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of output_data_t"][::core::mem::size_of::<output_data_t>() - 16usize];
    ["Alignment of output_data_t"][::core::mem::align_of::<output_data_t>() - 8usize];
    ["Offset of field: output_data_t::histogram"]
        [::core::mem::offset_of!(output_data_t, histogram) - 0usize];
    ["Offset of field: output_data_t::oprof"]
        [::core::mem::offset_of!(output_data_t, oprof) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct identify_data_t {
    pub olympus_exif_cfa: libc::c_uint,
    pub unique_id: libc::c_ulonglong,
    pub OlyID: libc::c_ulonglong,
    pub tiff_nifds: libc::c_uint,
    pub tiff_flip: libc::c_int,
    pub metadata_blocks: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of identify_data_t"][::core::mem::size_of::<identify_data_t>() - 40usize];
    ["Alignment of identify_data_t"][::core::mem::align_of::<identify_data_t>() - 8usize];
    ["Offset of field: identify_data_t::olympus_exif_cfa"]
        [::core::mem::offset_of!(identify_data_t, olympus_exif_cfa) - 0usize];
    ["Offset of field: identify_data_t::unique_id"]
        [::core::mem::offset_of!(identify_data_t, unique_id) - 8usize];
    ["Offset of field: identify_data_t::OlyID"]
        [::core::mem::offset_of!(identify_data_t, OlyID) - 16usize];
    ["Offset of field: identify_data_t::tiff_nifds"]
        [::core::mem::offset_of!(identify_data_t, tiff_nifds) - 24usize];
    ["Offset of field: identify_data_t::tiff_flip"]
        [::core::mem::offset_of!(identify_data_t, tiff_flip) - 28usize];
    ["Offset of field: identify_data_t::metadata_blocks"]
        [::core::mem::offset_of!(identify_data_t, metadata_blocks) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crx_sample_to_chunk_t {
    pub first: u32,
    pub count: u32,
    pub id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of crx_sample_to_chunk_t"][::core::mem::size_of::<crx_sample_to_chunk_t>() - 12usize];
    ["Alignment of crx_sample_to_chunk_t"]
        [::core::mem::align_of::<crx_sample_to_chunk_t>() - 4usize];
    ["Offset of field: crx_sample_to_chunk_t::first"]
        [::core::mem::offset_of!(crx_sample_to_chunk_t, first) - 0usize];
    ["Offset of field: crx_sample_to_chunk_t::count"]
        [::core::mem::offset_of!(crx_sample_to_chunk_t, count) - 4usize];
    ["Offset of field: crx_sample_to_chunk_t::id"]
        [::core::mem::offset_of!(crx_sample_to_chunk_t, id) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crx_data_header_t {
    pub version: i32,
    pub f_width: i32,
    pub f_height: i32,
    pub tileWidth: i32,
    pub tileHeight: i32,
    pub nBits: i32,
    pub nPlanes: i32,
    pub cfaLayout: i32,
    pub encType: i32,
    pub imageLevels: i32,
    pub hasTileCols: i32,
    pub hasTileRows: i32,
    pub mdatHdrSize: i32,
    pub medianBits: i32,
    pub MediaSize: u32,
    pub MediaOffset: INT64,
    pub MediaType: u32,
    pub stsc_data: *mut crx_sample_to_chunk_t,
    pub stsc_count: u32,
    pub sample_count: u32,
    pub sample_size: u32,
    pub sample_sizes: *mut i32,
    pub chunk_count: u32,
    pub chunk_offsets: *mut INT64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of crx_data_header_t"][::core::mem::size_of::<crx_data_header_t>() - 128usize];
    ["Alignment of crx_data_header_t"][::core::mem::align_of::<crx_data_header_t>() - 8usize];
    ["Offset of field: crx_data_header_t::version"]
        [::core::mem::offset_of!(crx_data_header_t, version) - 0usize];
    ["Offset of field: crx_data_header_t::f_width"]
        [::core::mem::offset_of!(crx_data_header_t, f_width) - 4usize];
    ["Offset of field: crx_data_header_t::f_height"]
        [::core::mem::offset_of!(crx_data_header_t, f_height) - 8usize];
    ["Offset of field: crx_data_header_t::tileWidth"]
        [::core::mem::offset_of!(crx_data_header_t, tileWidth) - 12usize];
    ["Offset of field: crx_data_header_t::tileHeight"]
        [::core::mem::offset_of!(crx_data_header_t, tileHeight) - 16usize];
    ["Offset of field: crx_data_header_t::nBits"]
        [::core::mem::offset_of!(crx_data_header_t, nBits) - 20usize];
    ["Offset of field: crx_data_header_t::nPlanes"]
        [::core::mem::offset_of!(crx_data_header_t, nPlanes) - 24usize];
    ["Offset of field: crx_data_header_t::cfaLayout"]
        [::core::mem::offset_of!(crx_data_header_t, cfaLayout) - 28usize];
    ["Offset of field: crx_data_header_t::encType"]
        [::core::mem::offset_of!(crx_data_header_t, encType) - 32usize];
    ["Offset of field: crx_data_header_t::imageLevels"]
        [::core::mem::offset_of!(crx_data_header_t, imageLevels) - 36usize];
    ["Offset of field: crx_data_header_t::hasTileCols"]
        [::core::mem::offset_of!(crx_data_header_t, hasTileCols) - 40usize];
    ["Offset of field: crx_data_header_t::hasTileRows"]
        [::core::mem::offset_of!(crx_data_header_t, hasTileRows) - 44usize];
    ["Offset of field: crx_data_header_t::mdatHdrSize"]
        [::core::mem::offset_of!(crx_data_header_t, mdatHdrSize) - 48usize];
    ["Offset of field: crx_data_header_t::medianBits"]
        [::core::mem::offset_of!(crx_data_header_t, medianBits) - 52usize];
    ["Offset of field: crx_data_header_t::MediaSize"]
        [::core::mem::offset_of!(crx_data_header_t, MediaSize) - 56usize];
    ["Offset of field: crx_data_header_t::MediaOffset"]
        [::core::mem::offset_of!(crx_data_header_t, MediaOffset) - 64usize];
    ["Offset of field: crx_data_header_t::MediaType"]
        [::core::mem::offset_of!(crx_data_header_t, MediaType) - 72usize];
    ["Offset of field: crx_data_header_t::stsc_data"]
        [::core::mem::offset_of!(crx_data_header_t, stsc_data) - 80usize];
    ["Offset of field: crx_data_header_t::stsc_count"]
        [::core::mem::offset_of!(crx_data_header_t, stsc_count) - 88usize];
    ["Offset of field: crx_data_header_t::sample_count"]
        [::core::mem::offset_of!(crx_data_header_t, sample_count) - 92usize];
    ["Offset of field: crx_data_header_t::sample_size"]
        [::core::mem::offset_of!(crx_data_header_t, sample_size) - 96usize];
    ["Offset of field: crx_data_header_t::sample_sizes"]
        [::core::mem::offset_of!(crx_data_header_t, sample_sizes) - 104usize];
    ["Offset of field: crx_data_header_t::chunk_count"]
        [::core::mem::offset_of!(crx_data_header_t, chunk_count) - 112usize];
    ["Offset of field: crx_data_header_t::chunk_offsets"]
        [::core::mem::offset_of!(crx_data_header_t, chunk_offsets) - 120usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unpacker_data_t {
    pub order: libc::c_short,
    pub sraw_mul: [ushort; 4usize],
    pub cr2_slice: [ushort; 3usize],
    pub kodak_cbpp: libc::c_uint,
    pub strip_offset: INT64,
    pub data_offset: INT64,
    pub meta_offset: INT64,
    pub exif_offset: INT64,
    pub exif_subdir_offset: INT64,
    pub ifd0_offset: INT64,
    pub data_size: libc::c_uint,
    pub meta_length: libc::c_uint,
    pub cr3_exif_length: libc::c_uint,
    pub cr3_ifd0_length: libc::c_uint,
    pub thumb_misc: libc::c_uint,
    pub thumb_format: LibRaw_internal_thumbnail_formats,
    pub fuji_layout: libc::c_uint,
    pub tiff_samples: libc::c_uint,
    pub tiff_bps: libc::c_uint,
    pub tiff_compress: libc::c_uint,
    pub tiff_sampleformat: libc::c_uint,
    pub zero_after_ff: libc::c_uint,
    pub tile_width: libc::c_uint,
    pub tile_length: libc::c_uint,
    pub load_flags: libc::c_uint,
    pub data_error: libc::c_uint,
    pub hasselblad_parser_flag: libc::c_int,
    pub posRAFData: libc::c_longlong,
    pub lenRAFData: libc::c_uint,
    pub fuji_total_lines: libc::c_int,
    pub fuji_total_blocks: libc::c_int,
    pub fuji_block_width: libc::c_int,
    pub fuji_bits: libc::c_int,
    pub fuji_raw_type: libc::c_int,
    pub fuji_lossless: libc::c_int,
    pub pana_encoding: libc::c_int,
    pub pana_bpp: libc::c_int,
    pub crx_header: [crx_data_header_t; 16usize],
    pub crx_track_selected: libc::c_int,
    pub crx_track_count: libc::c_int,
    pub CR3_CTMDtag: libc::c_short,
    pub CR3_Version: libc::c_short,
    pub CM_found: libc::c_int,
    pub is_NikonTransfer: libc::c_uint,
    pub is_Olympus: libc::c_uint,
    pub OlympusDNG_SubDirOffsetValid: libc::c_int,
    pub is_Sony: libc::c_uint,
    pub is_pana_raw: libc::c_uint,
    pub is_PentaxRicohMakernotes: libc::c_uint,
    pub dng_frames: [libc::c_uint; 20usize],
    pub raw_stride: libc::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of unpacker_data_t"][::core::mem::size_of::<unpacker_data_t>() - 2368usize];
    ["Alignment of unpacker_data_t"][::core::mem::align_of::<unpacker_data_t>() - 8usize];
    ["Offset of field: unpacker_data_t::order"]
        [::core::mem::offset_of!(unpacker_data_t, order) - 0usize];
    ["Offset of field: unpacker_data_t::sraw_mul"]
        [::core::mem::offset_of!(unpacker_data_t, sraw_mul) - 2usize];
    ["Offset of field: unpacker_data_t::cr2_slice"]
        [::core::mem::offset_of!(unpacker_data_t, cr2_slice) - 10usize];
    ["Offset of field: unpacker_data_t::kodak_cbpp"]
        [::core::mem::offset_of!(unpacker_data_t, kodak_cbpp) - 16usize];
    ["Offset of field: unpacker_data_t::strip_offset"]
        [::core::mem::offset_of!(unpacker_data_t, strip_offset) - 24usize];
    ["Offset of field: unpacker_data_t::data_offset"]
        [::core::mem::offset_of!(unpacker_data_t, data_offset) - 32usize];
    ["Offset of field: unpacker_data_t::meta_offset"]
        [::core::mem::offset_of!(unpacker_data_t, meta_offset) - 40usize];
    ["Offset of field: unpacker_data_t::exif_offset"]
        [::core::mem::offset_of!(unpacker_data_t, exif_offset) - 48usize];
    ["Offset of field: unpacker_data_t::exif_subdir_offset"]
        [::core::mem::offset_of!(unpacker_data_t, exif_subdir_offset) - 56usize];
    ["Offset of field: unpacker_data_t::ifd0_offset"]
        [::core::mem::offset_of!(unpacker_data_t, ifd0_offset) - 64usize];
    ["Offset of field: unpacker_data_t::data_size"]
        [::core::mem::offset_of!(unpacker_data_t, data_size) - 72usize];
    ["Offset of field: unpacker_data_t::meta_length"]
        [::core::mem::offset_of!(unpacker_data_t, meta_length) - 76usize];
    ["Offset of field: unpacker_data_t::cr3_exif_length"]
        [::core::mem::offset_of!(unpacker_data_t, cr3_exif_length) - 80usize];
    ["Offset of field: unpacker_data_t::cr3_ifd0_length"]
        [::core::mem::offset_of!(unpacker_data_t, cr3_ifd0_length) - 84usize];
    ["Offset of field: unpacker_data_t::thumb_misc"]
        [::core::mem::offset_of!(unpacker_data_t, thumb_misc) - 88usize];
    ["Offset of field: unpacker_data_t::thumb_format"]
        [::core::mem::offset_of!(unpacker_data_t, thumb_format) - 92usize];
    ["Offset of field: unpacker_data_t::fuji_layout"]
        [::core::mem::offset_of!(unpacker_data_t, fuji_layout) - 96usize];
    ["Offset of field: unpacker_data_t::tiff_samples"]
        [::core::mem::offset_of!(unpacker_data_t, tiff_samples) - 100usize];
    ["Offset of field: unpacker_data_t::tiff_bps"]
        [::core::mem::offset_of!(unpacker_data_t, tiff_bps) - 104usize];
    ["Offset of field: unpacker_data_t::tiff_compress"]
        [::core::mem::offset_of!(unpacker_data_t, tiff_compress) - 108usize];
    ["Offset of field: unpacker_data_t::tiff_sampleformat"]
        [::core::mem::offset_of!(unpacker_data_t, tiff_sampleformat) - 112usize];
    ["Offset of field: unpacker_data_t::zero_after_ff"]
        [::core::mem::offset_of!(unpacker_data_t, zero_after_ff) - 116usize];
    ["Offset of field: unpacker_data_t::tile_width"]
        [::core::mem::offset_of!(unpacker_data_t, tile_width) - 120usize];
    ["Offset of field: unpacker_data_t::tile_length"]
        [::core::mem::offset_of!(unpacker_data_t, tile_length) - 124usize];
    ["Offset of field: unpacker_data_t::load_flags"]
        [::core::mem::offset_of!(unpacker_data_t, load_flags) - 128usize];
    ["Offset of field: unpacker_data_t::data_error"]
        [::core::mem::offset_of!(unpacker_data_t, data_error) - 132usize];
    ["Offset of field: unpacker_data_t::hasselblad_parser_flag"]
        [::core::mem::offset_of!(unpacker_data_t, hasselblad_parser_flag) - 136usize];
    ["Offset of field: unpacker_data_t::posRAFData"]
        [::core::mem::offset_of!(unpacker_data_t, posRAFData) - 144usize];
    ["Offset of field: unpacker_data_t::lenRAFData"]
        [::core::mem::offset_of!(unpacker_data_t, lenRAFData) - 152usize];
    ["Offset of field: unpacker_data_t::fuji_total_lines"]
        [::core::mem::offset_of!(unpacker_data_t, fuji_total_lines) - 156usize];
    ["Offset of field: unpacker_data_t::fuji_total_blocks"]
        [::core::mem::offset_of!(unpacker_data_t, fuji_total_blocks) - 160usize];
    ["Offset of field: unpacker_data_t::fuji_block_width"]
        [::core::mem::offset_of!(unpacker_data_t, fuji_block_width) - 164usize];
    ["Offset of field: unpacker_data_t::fuji_bits"]
        [::core::mem::offset_of!(unpacker_data_t, fuji_bits) - 168usize];
    ["Offset of field: unpacker_data_t::fuji_raw_type"]
        [::core::mem::offset_of!(unpacker_data_t, fuji_raw_type) - 172usize];
    ["Offset of field: unpacker_data_t::fuji_lossless"]
        [::core::mem::offset_of!(unpacker_data_t, fuji_lossless) - 176usize];
    ["Offset of field: unpacker_data_t::pana_encoding"]
        [::core::mem::offset_of!(unpacker_data_t, pana_encoding) - 180usize];
    ["Offset of field: unpacker_data_t::pana_bpp"]
        [::core::mem::offset_of!(unpacker_data_t, pana_bpp) - 184usize];
    ["Offset of field: unpacker_data_t::crx_header"]
        [::core::mem::offset_of!(unpacker_data_t, crx_header) - 192usize];
    ["Offset of field: unpacker_data_t::crx_track_selected"]
        [::core::mem::offset_of!(unpacker_data_t, crx_track_selected) - 2240usize];
    ["Offset of field: unpacker_data_t::crx_track_count"]
        [::core::mem::offset_of!(unpacker_data_t, crx_track_count) - 2244usize];
    ["Offset of field: unpacker_data_t::CR3_CTMDtag"]
        [::core::mem::offset_of!(unpacker_data_t, CR3_CTMDtag) - 2248usize];
    ["Offset of field: unpacker_data_t::CR3_Version"]
        [::core::mem::offset_of!(unpacker_data_t, CR3_Version) - 2250usize];
    ["Offset of field: unpacker_data_t::CM_found"]
        [::core::mem::offset_of!(unpacker_data_t, CM_found) - 2252usize];
    ["Offset of field: unpacker_data_t::is_NikonTransfer"]
        [::core::mem::offset_of!(unpacker_data_t, is_NikonTransfer) - 2256usize];
    ["Offset of field: unpacker_data_t::is_Olympus"]
        [::core::mem::offset_of!(unpacker_data_t, is_Olympus) - 2260usize];
    ["Offset of field: unpacker_data_t::OlympusDNG_SubDirOffsetValid"]
        [::core::mem::offset_of!(unpacker_data_t, OlympusDNG_SubDirOffsetValid) - 2264usize];
    ["Offset of field: unpacker_data_t::is_Sony"]
        [::core::mem::offset_of!(unpacker_data_t, is_Sony) - 2268usize];
    ["Offset of field: unpacker_data_t::is_pana_raw"]
        [::core::mem::offset_of!(unpacker_data_t, is_pana_raw) - 2272usize];
    ["Offset of field: unpacker_data_t::is_PentaxRicohMakernotes"]
        [::core::mem::offset_of!(unpacker_data_t, is_PentaxRicohMakernotes) - 2276usize];
    ["Offset of field: unpacker_data_t::dng_frames"]
        [::core::mem::offset_of!(unpacker_data_t, dng_frames) - 2280usize];
    ["Offset of field: unpacker_data_t::raw_stride"]
        [::core::mem::offset_of!(unpacker_data_t, raw_stride) - 2360usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct libraw_internal_data_t {
    pub internal_data: internal_data_t,
    pub internal_output_params: libraw_internal_output_params_t,
    pub output_data: output_data_t,
    pub identify_data: identify_data_t,
    pub unpacker_data: unpacker_data_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_internal_data_t"]
        [::core::mem::size_of::<libraw_internal_data_t>() - 2504usize];
    ["Alignment of libraw_internal_data_t"]
        [::core::mem::align_of::<libraw_internal_data_t>() - 8usize];
    ["Offset of field: libraw_internal_data_t::internal_data"]
        [::core::mem::offset_of!(libraw_internal_data_t, internal_data) - 0usize];
    ["Offset of field: libraw_internal_data_t::internal_output_params"]
        [::core::mem::offset_of!(libraw_internal_data_t, internal_output_params) - 64usize];
    ["Offset of field: libraw_internal_data_t::output_data"]
        [::core::mem::offset_of!(libraw_internal_data_t, output_data) - 80usize];
    ["Offset of field: libraw_internal_data_t::identify_data"]
        [::core::mem::offset_of!(libraw_internal_data_t, identify_data) - 96usize];
    ["Offset of field: libraw_internal_data_t::unpacker_data"]
        [::core::mem::offset_of!(libraw_internal_data_t, unpacker_data) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct decode {
    pub branch: [*mut decode; 2usize],
    pub leaf: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of decode"][::core::mem::size_of::<decode>() - 24usize];
    ["Alignment of decode"][::core::mem::align_of::<decode>() - 8usize];
    ["Offset of field: decode::branch"][::core::mem::offset_of!(decode, branch) - 0usize];
    ["Offset of field: decode::leaf"][::core::mem::offset_of!(decode, leaf) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tiff_ifd_t {
    pub t_width: libc::c_int,
    pub t_height: libc::c_int,
    pub bps: libc::c_int,
    pub comp: libc::c_int,
    pub phint: libc::c_int,
    pub offset: libc::c_int,
    pub t_flip: libc::c_int,
    pub samples: libc::c_int,
    pub bytes: libc::c_int,
    pub extrasamples: libc::c_int,
    pub t_tile_width: libc::c_int,
    pub t_tile_length: libc::c_int,
    pub sample_format: libc::c_int,
    pub predictor: libc::c_int,
    pub rows_per_strip: libc::c_int,
    pub strip_offsets: *mut libc::c_int,
    pub strip_offsets_count: libc::c_int,
    pub strip_byte_counts: *mut libc::c_int,
    pub strip_byte_counts_count: libc::c_int,
    pub t_filters: libc::c_uint,
    pub t_vwidth: libc::c_int,
    pub t_vheight: libc::c_int,
    pub t_lm: libc::c_int,
    pub t_tm: libc::c_int,
    pub t_fuji_width: libc::c_int,
    pub t_shutter: f32,
    pub opcode2_offset: INT64,
    pub lineartable_offset: INT64,
    pub lineartable_len: libc::c_int,
    pub dng_color: [libraw_dng_color_t; 2usize],
    pub dng_levels: libraw_dng_levels_t,
    pub newsubfiletype: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tiff_ifd_t"][::core::mem::size_of::<tiff_ifd_t>() - 33408usize];
    ["Alignment of tiff_ifd_t"][::core::mem::align_of::<tiff_ifd_t>() - 8usize];
    ["Offset of field: tiff_ifd_t::t_width"][::core::mem::offset_of!(tiff_ifd_t, t_width) - 0usize];
    ["Offset of field: tiff_ifd_t::t_height"]
        [::core::mem::offset_of!(tiff_ifd_t, t_height) - 4usize];
    ["Offset of field: tiff_ifd_t::bps"][::core::mem::offset_of!(tiff_ifd_t, bps) - 8usize];
    ["Offset of field: tiff_ifd_t::comp"][::core::mem::offset_of!(tiff_ifd_t, comp) - 12usize];
    ["Offset of field: tiff_ifd_t::phint"][::core::mem::offset_of!(tiff_ifd_t, phint) - 16usize];
    ["Offset of field: tiff_ifd_t::offset"][::core::mem::offset_of!(tiff_ifd_t, offset) - 20usize];
    ["Offset of field: tiff_ifd_t::t_flip"][::core::mem::offset_of!(tiff_ifd_t, t_flip) - 24usize];
    ["Offset of field: tiff_ifd_t::samples"]
        [::core::mem::offset_of!(tiff_ifd_t, samples) - 28usize];
    ["Offset of field: tiff_ifd_t::bytes"][::core::mem::offset_of!(tiff_ifd_t, bytes) - 32usize];
    ["Offset of field: tiff_ifd_t::extrasamples"]
        [::core::mem::offset_of!(tiff_ifd_t, extrasamples) - 36usize];
    ["Offset of field: tiff_ifd_t::t_tile_width"]
        [::core::mem::offset_of!(tiff_ifd_t, t_tile_width) - 40usize];
    ["Offset of field: tiff_ifd_t::t_tile_length"]
        [::core::mem::offset_of!(tiff_ifd_t, t_tile_length) - 44usize];
    ["Offset of field: tiff_ifd_t::sample_format"]
        [::core::mem::offset_of!(tiff_ifd_t, sample_format) - 48usize];
    ["Offset of field: tiff_ifd_t::predictor"]
        [::core::mem::offset_of!(tiff_ifd_t, predictor) - 52usize];
    ["Offset of field: tiff_ifd_t::rows_per_strip"]
        [::core::mem::offset_of!(tiff_ifd_t, rows_per_strip) - 56usize];
    ["Offset of field: tiff_ifd_t::strip_offsets"]
        [::core::mem::offset_of!(tiff_ifd_t, strip_offsets) - 64usize];
    ["Offset of field: tiff_ifd_t::strip_offsets_count"]
        [::core::mem::offset_of!(tiff_ifd_t, strip_offsets_count) - 72usize];
    ["Offset of field: tiff_ifd_t::strip_byte_counts"]
        [::core::mem::offset_of!(tiff_ifd_t, strip_byte_counts) - 80usize];
    ["Offset of field: tiff_ifd_t::strip_byte_counts_count"]
        [::core::mem::offset_of!(tiff_ifd_t, strip_byte_counts_count) - 88usize];
    ["Offset of field: tiff_ifd_t::t_filters"]
        [::core::mem::offset_of!(tiff_ifd_t, t_filters) - 92usize];
    ["Offset of field: tiff_ifd_t::t_vwidth"]
        [::core::mem::offset_of!(tiff_ifd_t, t_vwidth) - 96usize];
    ["Offset of field: tiff_ifd_t::t_vheight"]
        [::core::mem::offset_of!(tiff_ifd_t, t_vheight) - 100usize];
    ["Offset of field: tiff_ifd_t::t_lm"][::core::mem::offset_of!(tiff_ifd_t, t_lm) - 104usize];
    ["Offset of field: tiff_ifd_t::t_tm"][::core::mem::offset_of!(tiff_ifd_t, t_tm) - 108usize];
    ["Offset of field: tiff_ifd_t::t_fuji_width"]
        [::core::mem::offset_of!(tiff_ifd_t, t_fuji_width) - 112usize];
    ["Offset of field: tiff_ifd_t::t_shutter"]
        [::core::mem::offset_of!(tiff_ifd_t, t_shutter) - 116usize];
    ["Offset of field: tiff_ifd_t::opcode2_offset"]
        [::core::mem::offset_of!(tiff_ifd_t, opcode2_offset) - 120usize];
    ["Offset of field: tiff_ifd_t::lineartable_offset"]
        [::core::mem::offset_of!(tiff_ifd_t, lineartable_offset) - 128usize];
    ["Offset of field: tiff_ifd_t::lineartable_len"]
        [::core::mem::offset_of!(tiff_ifd_t, lineartable_len) - 136usize];
    ["Offset of field: tiff_ifd_t::dng_color"]
        [::core::mem::offset_of!(tiff_ifd_t, dng_color) - 140usize];
    ["Offset of field: tiff_ifd_t::dng_levels"]
        [::core::mem::offset_of!(tiff_ifd_t, dng_levels) - 476usize];
    ["Offset of field: tiff_ifd_t::newsubfiletype"]
        [::core::mem::offset_of!(tiff_ifd_t, newsubfiletype) - 33404usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct jhead {
    pub algo: libc::c_int,
    pub bits: libc::c_int,
    pub high: libc::c_int,
    pub wide: libc::c_int,
    pub clrs: libc::c_int,
    pub sraw: libc::c_int,
    pub psv: libc::c_int,
    pub restart: libc::c_int,
    pub vpred: [libc::c_int; 6usize],
    pub quant: [ushort; 64usize],
    pub idct: [ushort; 64usize],
    pub huff: [*mut ushort; 20usize],
    pub free: [*mut ushort; 20usize],
    pub row: *mut ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jhead"][::core::mem::size_of::<jhead>() - 640usize];
    ["Alignment of jhead"][::core::mem::align_of::<jhead>() - 8usize];
    ["Offset of field: jhead::algo"][::core::mem::offset_of!(jhead, algo) - 0usize];
    ["Offset of field: jhead::bits"][::core::mem::offset_of!(jhead, bits) - 4usize];
    ["Offset of field: jhead::high"][::core::mem::offset_of!(jhead, high) - 8usize];
    ["Offset of field: jhead::wide"][::core::mem::offset_of!(jhead, wide) - 12usize];
    ["Offset of field: jhead::clrs"][::core::mem::offset_of!(jhead, clrs) - 16usize];
    ["Offset of field: jhead::sraw"][::core::mem::offset_of!(jhead, sraw) - 20usize];
    ["Offset of field: jhead::psv"][::core::mem::offset_of!(jhead, psv) - 24usize];
    ["Offset of field: jhead::restart"][::core::mem::offset_of!(jhead, restart) - 28usize];
    ["Offset of field: jhead::vpred"][::core::mem::offset_of!(jhead, vpred) - 32usize];
    ["Offset of field: jhead::quant"][::core::mem::offset_of!(jhead, quant) - 56usize];
    ["Offset of field: jhead::idct"][::core::mem::offset_of!(jhead, idct) - 184usize];
    ["Offset of field: jhead::huff"][::core::mem::offset_of!(jhead, huff) - 312usize];
    ["Offset of field: jhead::free"][::core::mem::offset_of!(jhead, free) - 472usize];
    ["Offset of field: jhead::row"][::core::mem::offset_of!(jhead, row) - 632usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct libraw_tiff_tag {
    pub tag: ushort,
    pub type_: ushort,
    pub count: libc::c_int,
    pub val: libraw_tiff_tag__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union libraw_tiff_tag__bindgen_ty_1 {
    pub c: [libc::c_char; 4usize],
    pub s: [libc::c_short; 2usize],
    pub i: libc::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_tiff_tag__bindgen_ty_1"]
        [::core::mem::size_of::<libraw_tiff_tag__bindgen_ty_1>() - 4usize];
    ["Alignment of libraw_tiff_tag__bindgen_ty_1"]
        [::core::mem::align_of::<libraw_tiff_tag__bindgen_ty_1>() - 4usize];
    ["Offset of field: libraw_tiff_tag__bindgen_ty_1::c"]
        [::core::mem::offset_of!(libraw_tiff_tag__bindgen_ty_1, c) - 0usize];
    ["Offset of field: libraw_tiff_tag__bindgen_ty_1::s"]
        [::core::mem::offset_of!(libraw_tiff_tag__bindgen_ty_1, s) - 0usize];
    ["Offset of field: libraw_tiff_tag__bindgen_ty_1::i"]
        [::core::mem::offset_of!(libraw_tiff_tag__bindgen_ty_1, i) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of libraw_tiff_tag"][::core::mem::size_of::<libraw_tiff_tag>() - 12usize];
    ["Alignment of libraw_tiff_tag"][::core::mem::align_of::<libraw_tiff_tag>() - 4usize];
    ["Offset of field: libraw_tiff_tag::tag"]
        [::core::mem::offset_of!(libraw_tiff_tag, tag) - 0usize];
    ["Offset of field: libraw_tiff_tag::type_"]
        [::core::mem::offset_of!(libraw_tiff_tag, type_) - 2usize];
    ["Offset of field: libraw_tiff_tag::count"]
        [::core::mem::offset_of!(libraw_tiff_tag, count) - 4usize];
    ["Offset of field: libraw_tiff_tag::val"]
        [::core::mem::offset_of!(libraw_tiff_tag, val) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tiff_hdr {
    pub t_order: ushort,
    pub magic: ushort,
    pub ifd: libc::c_int,
    pub pad: ushort,
    pub ntag: ushort,
    pub tag: [libraw_tiff_tag; 23usize],
    pub nextifd: libc::c_int,
    pub pad2: ushort,
    pub nexif: ushort,
    pub exif: [libraw_tiff_tag; 4usize],
    pub pad3: ushort,
    pub ngps: ushort,
    pub gpst: [libraw_tiff_tag; 10usize],
    pub bps: [libc::c_short; 4usize],
    pub rat: [libc::c_int; 10usize],
    pub gps: [libc::c_uint; 26usize],
    pub t_desc: [libc::c_char; 512usize],
    pub t_make: [libc::c_char; 64usize],
    pub t_model: [libc::c_char; 64usize],
    pub soft: [libc::c_char; 32usize],
    pub date: [libc::c_char; 20usize],
    pub t_artist: [libc::c_char; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tiff_hdr"][::core::mem::size_of::<tiff_hdr>() - 1376usize];
    ["Alignment of tiff_hdr"][::core::mem::align_of::<tiff_hdr>() - 4usize];
    ["Offset of field: tiff_hdr::t_order"][::core::mem::offset_of!(tiff_hdr, t_order) - 0usize];
    ["Offset of field: tiff_hdr::magic"][::core::mem::offset_of!(tiff_hdr, magic) - 2usize];
    ["Offset of field: tiff_hdr::ifd"][::core::mem::offset_of!(tiff_hdr, ifd) - 4usize];
    ["Offset of field: tiff_hdr::pad"][::core::mem::offset_of!(tiff_hdr, pad) - 8usize];
    ["Offset of field: tiff_hdr::ntag"][::core::mem::offset_of!(tiff_hdr, ntag) - 10usize];
    ["Offset of field: tiff_hdr::tag"][::core::mem::offset_of!(tiff_hdr, tag) - 12usize];
    ["Offset of field: tiff_hdr::nextifd"][::core::mem::offset_of!(tiff_hdr, nextifd) - 288usize];
    ["Offset of field: tiff_hdr::pad2"][::core::mem::offset_of!(tiff_hdr, pad2) - 292usize];
    ["Offset of field: tiff_hdr::nexif"][::core::mem::offset_of!(tiff_hdr, nexif) - 294usize];
    ["Offset of field: tiff_hdr::exif"][::core::mem::offset_of!(tiff_hdr, exif) - 296usize];
    ["Offset of field: tiff_hdr::pad3"][::core::mem::offset_of!(tiff_hdr, pad3) - 344usize];
    ["Offset of field: tiff_hdr::ngps"][::core::mem::offset_of!(tiff_hdr, ngps) - 346usize];
    ["Offset of field: tiff_hdr::gpst"][::core::mem::offset_of!(tiff_hdr, gpst) - 348usize];
    ["Offset of field: tiff_hdr::bps"][::core::mem::offset_of!(tiff_hdr, bps) - 468usize];
    ["Offset of field: tiff_hdr::rat"][::core::mem::offset_of!(tiff_hdr, rat) - 476usize];
    ["Offset of field: tiff_hdr::gps"][::core::mem::offset_of!(tiff_hdr, gps) - 516usize];
    ["Offset of field: tiff_hdr::t_desc"][::core::mem::offset_of!(tiff_hdr, t_desc) - 620usize];
    ["Offset of field: tiff_hdr::t_make"][::core::mem::offset_of!(tiff_hdr, t_make) - 1132usize];
    ["Offset of field: tiff_hdr::t_model"][::core::mem::offset_of!(tiff_hdr, t_model) - 1196usize];
    ["Offset of field: tiff_hdr::soft"][::core::mem::offset_of!(tiff_hdr, soft) - 1260usize];
    ["Offset of field: tiff_hdr::date"][::core::mem::offset_of!(tiff_hdr, date) - 1292usize];
    ["Offset of field: tiff_hdr::t_artist"]
        [::core::mem::offset_of!(tiff_hdr, t_artist) - 1312usize];
};
unsafe extern "C" {
    pub fn libraw_strerror(errorcode: libc::c_int) -> *const libc::c_char;
}
unsafe extern "C" {
    pub fn libraw_strprogress(arg1: LibRaw_progress) -> *const libc::c_char;
}
unsafe extern "C" {
    pub fn libraw_init(flags: libc::c_uint) -> *mut libraw_data_t;
}
unsafe extern "C" {
    pub fn libraw_open_file(arg1: *mut libraw_data_t, arg2: *const libc::c_char) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_open_buffer(
        arg1: *mut libraw_data_t,
        buffer: *const libc::c_void,
        size: usize,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_open_bayer(
        lr: *mut libraw_data_t,
        data: *mut libc::c_uchar,
        datalen: libc::c_uint,
        _raw_width: ushort,
        _raw_height: ushort,
        _left_margin: ushort,
        _top_margin: ushort,
        _right_margin: ushort,
        _bottom_margin: ushort,
        procflags: libc::c_uchar,
        bayer_battern: libc::c_uchar,
        unused_bits: libc::c_uint,
        otherflags: libc::c_uint,
        black_level: libc::c_uint,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_unpack(arg1: *mut libraw_data_t) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_unpack_thumb(arg1: *mut libraw_data_t) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_unpack_thumb_ex(arg1: *mut libraw_data_t, arg2: libc::c_int) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_recycle_datastream(arg1: *mut libraw_data_t);
}
unsafe extern "C" {
    pub fn libraw_recycle(arg1: *mut libraw_data_t);
}
unsafe extern "C" {
    pub fn libraw_close(arg1: *mut libraw_data_t);
}
unsafe extern "C" {
    pub fn libraw_subtract_black(arg1: *mut libraw_data_t);
}
unsafe extern "C" {
    pub fn libraw_raw2image(arg1: *mut libraw_data_t) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_free_image(arg1: *mut libraw_data_t);
}
unsafe extern "C" {
    pub fn libraw_version() -> *const libc::c_char;
}
unsafe extern "C" {
    pub fn libraw_versionNumber() -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_cameraList() -> *mut *const libc::c_char;
}
unsafe extern "C" {
    pub fn libraw_cameraCount() -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_set_exifparser_handler(
        arg1: *mut libraw_data_t,
        cb: exif_parser_callback,
        datap: *mut libc::c_void,
    );
}
unsafe extern "C" {
    pub fn libraw_set_dataerror_handler(
        arg1: *mut libraw_data_t,
        func: data_callback,
        datap: *mut libc::c_void,
    );
}
unsafe extern "C" {
    pub fn libraw_set_progress_handler(
        arg1: *mut libraw_data_t,
        cb: progress_callback,
        datap: *mut libc::c_void,
    );
}
unsafe extern "C" {
    pub fn libraw_unpack_function_name(lr: *mut libraw_data_t) -> *const libc::c_char;
}
unsafe extern "C" {
    pub fn libraw_get_decoder_info(
        lr: *mut libraw_data_t,
        d: *mut libraw_decoder_info_t,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_COLOR(
        arg1: *mut libraw_data_t,
        row: libc::c_int,
        col: libc::c_int,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_capabilities() -> libc::c_uint;
}
unsafe extern "C" {
    pub fn libraw_adjust_sizes_info_only(arg1: *mut libraw_data_t) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_dcraw_ppm_tiff_writer(
        lr: *mut libraw_data_t,
        filename: *const libc::c_char,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_dcraw_thumb_writer(
        lr: *mut libraw_data_t,
        fname: *const libc::c_char,
    ) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_dcraw_process(lr: *mut libraw_data_t) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_dcraw_make_mem_image(
        lr: *mut libraw_data_t,
        errc: *mut libc::c_int,
    ) -> *mut libraw_processed_image_t;
}
unsafe extern "C" {
    pub fn libraw_dcraw_make_mem_thumb(
        lr: *mut libraw_data_t,
        errc: *mut libc::c_int,
    ) -> *mut libraw_processed_image_t;
}
unsafe extern "C" {
    pub fn libraw_dcraw_clear_mem(arg1: *mut libraw_processed_image_t);
}
unsafe extern "C" {
    pub fn libraw_set_demosaic(lr: *mut libraw_data_t, value: libc::c_int);
}
unsafe extern "C" {
    pub fn libraw_set_output_color(lr: *mut libraw_data_t, value: libc::c_int);
}
unsafe extern "C" {
    pub fn libraw_set_adjust_maximum_thr(lr: *mut libraw_data_t, value: f32);
}
unsafe extern "C" {
    pub fn libraw_set_user_mul(lr: *mut libraw_data_t, index: libc::c_int, val: f32);
}
unsafe extern "C" {
    pub fn libraw_set_output_bps(lr: *mut libraw_data_t, value: libc::c_int);
}
unsafe extern "C" {
    pub fn libraw_set_gamma(lr: *mut libraw_data_t, index: libc::c_int, value: f32);
}
unsafe extern "C" {
    pub fn libraw_set_no_auto_bright(lr: *mut libraw_data_t, value: libc::c_int);
}
unsafe extern "C" {
    pub fn libraw_set_bright(lr: *mut libraw_data_t, value: f32);
}
unsafe extern "C" {
    pub fn libraw_set_highlight(lr: *mut libraw_data_t, value: libc::c_int);
}
unsafe extern "C" {
    pub fn libraw_set_fbdd_noiserd(lr: *mut libraw_data_t, value: libc::c_int);
}
unsafe extern "C" {
    pub fn libraw_get_raw_height(lr: *mut libraw_data_t) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_get_raw_width(lr: *mut libraw_data_t) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_get_iheight(lr: *mut libraw_data_t) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_get_iwidth(lr: *mut libraw_data_t) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_get_cam_mul(lr: *mut libraw_data_t, index: libc::c_int) -> f32;
}
unsafe extern "C" {
    pub fn libraw_get_pre_mul(lr: *mut libraw_data_t, index: libc::c_int) -> f32;
}
unsafe extern "C" {
    pub fn libraw_get_rgb_cam(
        lr: *mut libraw_data_t,
        index1: libc::c_int,
        index2: libc::c_int,
    ) -> f32;
}
unsafe extern "C" {
    pub fn libraw_get_color_maximum(lr: *mut libraw_data_t) -> libc::c_int;
}
unsafe extern "C" {
    pub fn libraw_set_output_tif(lr: *mut libraw_data_t, value: libc::c_int);
}
unsafe extern "C" {
    pub fn libraw_get_iparams(lr: *mut libraw_data_t) -> *mut libraw_iparams_t;
}
unsafe extern "C" {
    pub fn libraw_get_lensinfo(lr: *mut libraw_data_t) -> *mut libraw_lensinfo_t;
}
unsafe extern "C" {
    pub fn libraw_get_imgother(lr: *mut libraw_data_t) -> *mut libraw_imgother_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: libc::c_uint,
    pub fp_offset: libc::c_uint,
    pub overflow_arg_area: *mut libc::c_void,
    pub reg_save_area: *mut libc::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::core::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::core::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::core::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::core::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::core::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::core::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LibRaw_abstract_datastream {
    pub _address: u8,
}
